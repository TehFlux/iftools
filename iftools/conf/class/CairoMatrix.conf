# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoMatrix.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'"cairo.h"'
	'"ionflux/Matrix3.hpp"'
}

# Class definition.
class = {
	name = Matrix
	base = public Ionflux::Tools::Matrix3
	shortDesc = Cairo matrix
	title = Cairo matrix
	longDesc = A wrapper for the Cairo vector graphics API matrix type (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Helper structs.
struct[] = {
	name = Point
	desc = A point in R2
	field[] = {
		type = double
		name = x
		desc = X coordinate
	}
	field[] = {
		type = double
		name = y
		desc = Y coordinate
	}
}
struct[] = {
	name = Distance
	desc = A distance in R2
	field[] = {
		type = double
		name = dx
		desc = X distance
	}
	field[] = {
		type = double
		name = dy
		desc = Y distance
	}
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const Matrix&
		name = initMatrix
		desc = Cairo matrix
	}
}
constructor.public[] = {
	param[] = {
		type = const cairo_matrix_t&
		name = initMatrix
		desc = Cairo matrix
	}
}
constructor.public[] = {
	param[] = {
		type = double
		name = xx
		desc = Xx
	}
	param[] = {
		type = double
		name = yx
		desc = Yx
	}
	param[] = {
		type = double
		name = xy
		desc = Xy
	}
	param[] = {
		type = double
		name = yy
		desc = Yy
	}
	param[] = {
		type = double
		name = x0
		desc = X0
	}
	param[] = {
		type = double
		name = y0
		desc = Y0
	}
}

# Protected variables.

# Public constants.

# Protected class properties.

# Protected member functions.

# Public member functions.
function.public[] = {
	type = void
	name = initIdentity
	shortDesc = Matrix identity
	longDesc = Matrix identity
}
function.public[] = {
	type = void
	name = initTranslate
	shortDesc = Matrix translate
	longDesc = Matrix translate
	param[] = {
		type = double
		name = tx
		desc = Tx
	}
	param[] = {
		type = double
		name = ty
		desc = Ty
	}
}
function.public[] = {
	type = void
	name = initScale
	shortDesc = Matrix scale
	longDesc = Matrix scale
	param[] = {
		type = double
		name = sx
		desc = Sx
	}
	param[] = {
		type = double
		name = sy
		desc = Sy
	}
}
function.public[] = {
	type = void
	name = initRotate
	shortDesc = Matrix rotate
	longDesc = Matrix rotate
	param[] = {
		type = double
		name = radians
		desc = Radians
	}
}
function.public[] = {
	type = void
	name = translate
	shortDesc = Matrix
	longDesc = Matrix
	param[] = {
		type = double
		name = tx
		desc = Tx
	}
	param[] = {
		type = double
		name = ty
		desc = Ty
	}
}
function.public[] = {
	type = void
	name = scale
	shortDesc = Matrix
	longDesc = Matrix
	param[] = {
		type = double
		name = sx
		desc = Sx
	}
	param[] = {
		type = double
		name = sy
		desc = Sy
	}
}
function.public[] = {
	type = void
	name = rotate
	shortDesc = Matrix
	longDesc = Matrix
	param[] = {
		type = double
		name = radians
		desc = Radians
	}
}
function.public[] = {
	type = void
	name = transformDistance
	shortDesc = Transform distance
	longDesc = Transform distance.
	param[] = {
		type = Distance&
		name = distance
		desc = Distance
	}
}
function.public[] = {
	type = void
	name = transformPoint
	shortDesc = Transform point
	longDesc = Transform point.
	param[] = {
		type = Point&
		name = point
		desc = Point
	}
}
function.public[] = {
	spec = virtual
	type = Matrix&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a matrix (R3) to a Cairo matrix.
	param[] = {
		type = const Matrix3&
		name = newMatrix
		desc = Matrix (R3)
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = Matrix&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a matrix to another matrix.
	param[] = {
		type = const Matrix&
		name = newCairoMatrix
		desc = Cairo matrix
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = Matrix&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo matrix to this matrix object.
	param[] = {
		type = const cairo_matrix_t&
		name = newCairoMatrix
		desc = Cairo matrix
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	type = void
	name = toCairoMatrix
	const = true
	shortDesc = Convert to Cairo matrix
	longDesc = Convert the matrix to a Cairo matrix.
	param[] = {
		type = cairo_matrix_t&
		name = cairoMatrix
		desc = Where to store the Cairo matrix
	}
}
