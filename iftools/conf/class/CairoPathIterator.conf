# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoPathIterator.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include.header = {
	'"ionflux/CairoPathData.hpp"'
}
include.impl = {
	'"ionflux/CairoPath.hpp"'
}

# Forward declarations.
forward = {
	'class Path'
}

# Class definition.
class = {
	name = PathIterator
	shortDesc = Cairo path iterator
	title = Cairo path iterator
	longDesc = Iterator for a path in the Cairo vector graphics API (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const PathIterator&
		name = initPathIterator
		desc = Cairo path iterator
	}
}
constructor.public[] = {
	param[] = {
		type = Path&
		name = initPath
		desc = Cairo path
	}
	param[] = {
		type = unsigned int
		name = initIndex
		desc = Element index
		default = 0
	}
}

# Protected variables.

# Public constants.

# Protected class properties.
property.protected[] = {
	type = Path*
	setFromType = Path*
	name = path
	desc = Path
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = elementIndex
	desc = Element index
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator*
	shortDesc = Dereference
	longDesc = Dereference operator.
	return.value = PathData()
	return.desc = Path data
}
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator++
	shortDesc = Increment
	longDesc = Increment operator.
	return.value = PathData()
	return.desc = Path data
}
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator++
	shortDesc = Increment
	longDesc = Increment operator.
	param[] = {
		type = int
		name = dummy
		desc = Postfix operator dummy argument
	}
	return.value = PathData()
	return.desc = Path data
}
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator--
	shortDesc = Decrement
	longDesc = Decrement operator.
	return.value = PathData()
	return.desc = Path data
}
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator--
	shortDesc = Decrement
	longDesc = Decrement operator.
	param[] = {
		type = int
		name = dummy
		desc = Postfix operator dummy argument
	}
	return.value = PathData()
	return.desc = Path data
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	shortDesc = Comparison
	longDesc = Comparison operator.
	param[] = {
		type = const PathIterator&
		name = other
		desc = Cairo path iterator
	}
	return.value = false
	return.desc = \c true if the path iterators are equal, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	shortDesc = Comparison
	longDesc = Comparison operator.
	param[] = {
		type = const PathIterator&
		name = other
		desc = Cairo path iterator
	}
	return.value = false
	return.desc = \c true if the path iterators are not equal, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = PathIterator&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a path iterator to another path iterator.
	param[] = {
		type = const PathIterator&
		name = newPathIterator
		desc = Cairo path iterator
	}
	return.value = *this
	return.desc = The object itself
}
