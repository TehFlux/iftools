# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004-2005 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Utf8Tokenizer.conf          Tokenizer with UTF-8 support.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
	'namespace Ionflux::Tools'
}

# Include files (header).
include.header = {
	'"ionflux/Utf8TokenTypeMap.hpp"'
}

# Include files (implementation).
include.impl = {
	'"ionflux/tools.hpp"'
}

# Forward declarations.

# Typedefs.

# Helper structs.
struct[] = {
	name = Utf8Token
	desc = A token for the UTF-8 tokenizer
	field[] = {
		type = int
		name = typeID
		desc = Numeric token type ID
	}
	field[] = {
		type = std::string
		name = value
		desc = UTF-8 encoded value of the token
	}
}

# Class definition.
class = {
	name = Utf8Tokenizer
	shortDesc = Tokenizer with UTF-8 support
	title = Tokenizer with UTF-8 support
	longDesc = A generic tokenizer for parsing UTF-8 strings. To set up a tokenizer, first create a Utf8Tokenizer object. This will be set up using the default token types Utf8Tokenizer::TT_WHITESPACE, Utf8Tokenizer::TT_LINETERM and Utf8Tokenizer::TT_IDENTIFIER. You may then add your own custom token types and optionally set up the Utf8Tokenizer::TT_ANYTHING token type (which will match anything not matched by previously defined token types). To enable extraction of quoted strings and escaped characters, call Utf8Tokenizer::setExtractQuoted() with \c true as an argument.\n\
To get a token from the token stream, call Utf8Tokenizer::getNextToken(). Make sure your code handles the Utf8Tokenizer::TT_NONE and Utf8Tokenizer::TT_INVALID special token types (which cannot be disabled). Utf8Tokenizer::getNextToken() will always return Utf8Tokenizer::TT_NONE at the end of the token stream and Utf8Tokenizer::TT_INVALID if an invalid token is encountered.
	includeDir = ionflux
	group.name = tokenizer
	createClassInfo = true
	managed = true
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const std::string&
		name = initInput
		desc = UTF-8 input string
	}
}
constructor.public[] = {
	param[] = {
		type = const std::vector<Utf8TokenType>&
		name = initTokenTypes
		desc = Token types
	}
	param[] = {
		type = const std::string&
		name = initInput
		desc = UTF-8 input string
		default = ""
	}
}

# Member variables.
variable.protected[] = {
	type = std::vector<unsigned int>
	name = theInput
	desc = Input characters to be tokenized
}
variable.protected[] = {
	type = std::vector<unsigned int>
	name = quoteChars
	desc = Quote characters
}
variable.protected[] = {
	type = unsigned int
	name = currentPos
	desc = Current position in the input character string
}
variable.protected[] = {
	type = unsigned int
	name = currentTokenPos
	desc = Position of the current token in the input character string
}
variable.protected[] = {
	type = unsigned int
	name = currentQuoteChar
	desc = The current quote character
}
variable.protected[] = {
	type = Utf8TokenTypeMap*
	name = typeMap
	desc = Token type map
}
variable.protected[] = {
	type = Utf8Token
	name = currentToken
	desc = Current token
}

# Class properties.
property.protected[] = {
	type = bool
	setFromType = bool
	name = extractQuoted
	desc = Extract quoted strings flag
}
property.protected[] = {
	type = bool
	setFromType = bool
	name = extractEscaped
	desc = Extract escaped characters flag
}

# Public static constants.
constant.public[] = {
	type = Utf8TokenType
	name = TT_INVALID
	desc = Token type: invalid (special)
	value = \{Utf8TokenTypeMap::INVALID_ID, "", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_NONE
	desc = Token type: none (special)
	value = \{Utf8TokenTypeMap::EMPTY_ID, "", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_DEFAULT
	desc = Token type: default (special)
	value = \{1, "", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_QUOTED
	desc = Token type: quoted (special)
	value = \{2, "", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_ESCAPED
	desc = Token type: escaped (special)
	value = \{3, "", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_LINEAR_WHITESPACE
	desc = Token type: linear whitespace
	value = \{4, " \t", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_LINETERM
	desc = Token type: linear whitespace
	value = \{5, "\n\r", 1\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_IDENTIFIER
	desc = Token type: identifier
	value = \{6, "abcdefghijklmnopqrstuvwxyz"\
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_NUMBER
	desc = Token type: identifier
	value = \{7, "0123456789", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_ALPHA
	desc = Token type: latin alphabet
	value = \{8, "abcdefghijklmnopqrstuvwxyz"\
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_DEFAULT_SEP
	desc = Token type: default separators
	value = \{9, "_-.", 0\}
}
constant.public[] = {
	type = Utf8TokenType
	name = TT_LATIN
	desc = Token type: lots of latin characters
	value = \{10, "abcdefghijklmnopqrstuvwxyz"\
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ"\
		"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíî"\
		"ïðñòóôõöøùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜ"\
		"ĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌ"\
		"ōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ", 0\}
}
constant.public[] = {
	type = Utf8Token
	name = TOK_INVALID
	desc = Token type: invalid (special)
	value = \{Utf8TokenTypeMap::INVALID_ID, ""\}
}
constant.public[] = {
	type = Utf8Token
	name = TOK_NONE
	desc = Token type: none (special)
	value = \{Utf8TokenTypeMap::EMPTY_ID, ""\}
}
constant.public[] = {
	type = std::string
	name = QUOTE_CHARS
	desc = Quote characters
	value = "'\""
}
constant.public[] = {
	type = unsigned int
	name = ESCAPE_CHAR
	desc = Escape character
	value = '\\'
}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = reset
	shortDesc = Reset
	longDesc = Reset the tokenizer.
}
function.public[] = {
	spec = virtual
	type = void
	name = clearTokenTypes
	shortDesc = Clear token types
	longDesc = Remove all token types.
}
function.public[] = {
	spec = virtual
	type = void
	name = useDefaultTokenTypes
	shortDesc = Use default token types
	longDesc = Use default token types (TT_LINEAR_WHITESPACE, TT_IDENTIFIER, TT_LINETERM).
}
function.public[] = {
	spec = virtual
	type = void
	name = addDefaultTokenType
	shortDesc = Add default token type
	longDesc = Add a special token type TT_DEFAULT which will be returned if a token is not recognized.
}
function.public[] = {
	spec = virtual
	type = void
	name = setTokenTypes
	shortDesc = Set token types
	longDesc = Set the token types for the tokenizer.
	param[] = {
		type = const std::vector<Utf8TokenType>&
		name = newTokenTypes
		deac = Token types
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = addTokenTypes
	shortDesc = Add token types
	longDesc = Add the specified token types.
	param[] = {
		type = const std::vector<Utf8TokenType>&
		name = newTokenTypes
		deac = Token types
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = addTokenType
	shortDesc = Add token type
	longDesc = Add the specified token type.
	param[] = {
		type = const Utf8TokenType&
		name = newTokenType
		desc = Token type
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setInput
	shortDesc = Set input
	longDesc = Set the UTF-8 encoded input string.
	param[] = {
		type = const std::string&
		name = newInput
		desc = UTF-8 input string
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setInput
	shortDesc = Set input
	longDesc = Set the unicode input characters.
	param[] = {
		type = const std::vector<unsigned int>&
		name = newInput
		desc = Unicode characters
	}
}
function.public[] = {
	spec = virtual
	type = Utf8Token
	name = getNextToken
	shortDesc = Get next token
	longDesc = Get the next token from the input string. If the optional \c otherTypeMap is set, the specified token type map will be used instead of the default token type map.
	param[] = {
		type = Utf8TokenTypeMap*
		name = otherTypeMap
		desc = Token type map
		default = 0
	}
	return.value = TOK_INVALID
	return.desc = Next token
}
function.public[] = {
	spec = virtual
	type = Utf8Token
	name = getCurrentToken
	shortDesc = Get current token
	longDesc = Get the current token from the input string.
	return.value = currentToken
	return.desc = Current token
}
function.public[] = {
	spec = virtual
	type = int
	name = getCurrentTokenType
	shortDesc = Get current token type
	longDesc = Get the type ID of the current token.
	return.value = currentToken.typeID
	return.desc = Type ID of current token
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getCurrentPos
	shortDesc = Get current position
	longDesc = Get the current position in the input string.
	return.value = currentPos
	return.desc = Current position
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getCurrentTokenPos
	shortDesc = Get current token position
	longDesc = Get the position of the current token in the input string.
	return.value = currentTokenPos
	return.desc = Current token position
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getQuoteChar
	shortDesc = Get quote character
	longDesc = Get the quote character for the current token.
	return.value = currentQuoteChar
	return.desc = Current quote character
}
function.public[] = {
	spec = static
	type = bool
	name = isValid
	shortDesc = Validate token
	longDesc = Check whether the specified token is valid (i.e. it is not invalid or empty).
	param[] = {
		type = const Utf8Token&
		name = checkToken
		desc = Token to be checked
	}
	return.desc = \c true if the specified token is valid, \c false otherwise
	return.value = false
}
