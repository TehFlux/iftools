# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BufferedTable.conf          Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'<string>'
	'<iostream>'
	'<sstream>'
	'<vector>'
	'"ionflux/Reporter.h"'
	'"ionflux/MySQLDatabase.h"'
	'"ionflux/Node.h"'
	'"ionflux/Template.h"'
	'"ionflux/ObjectPool.hpp"'
}

# Class definition.
class = {
	name = BufferedTable
	base = public Ionflux::Tools::ManagedObject
	shortDesc = Buffered database table
	title = Buffered database table
	longDesc =  A buffered table providing access to records which are stored in a database table. The table buffer allows for the efficient sequential retrieval of records from the database, where the order of records is defined by a specified key field. This is achieved by fetching a block (or page) of records on each database query. Records from the blocks loaded into memory may then be accessed sequentially. A new block is fetched from the database automatically whenever the current index pointer goes out of the scope of a block.\
\
\note The buffered table also allows random access, however, this does not have any advantages in efficiency unless the random accesses occur within order of the block size.
	includeDir = ionflux
	group.name = database
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = unsigned int
		name = initBlockSize
		desc = Buffering block size
	}
}

constructor.public[] = {
	param[] = {
		type = Ionflux::Tools::Database*
		name = initDatabase
		desc = Source database
	}
}

constructor.public[] = {
	param[] = {
		type = Ionflux::Tools::Database*
		name = initDatabase
		desc = Source database
	}
	param[] = {
		type = unsigned int
		name = initBlockSize
		desc = Buffering block size
	}
}

constructor.public[] = {
	param[] = {
		type = Ionflux::Tools::Database*
		name = initDatabase
		desc = Source database
	}
	param[] = {
		type = unsigned int
		name = initBlockSize
		desc = Buffering block size
	}
	param[] = {
		type = const std::string&
		name = initTable
		desc = Source database table name
	}
	param[] = {
		type = const std::string&
		name = initKeyField
		desc = Name of the key field of the source database table
	}
	param[] = {
		type = const std::vector<std::string>&
		name = initFields
		desc = Names of fields to be included in each record
	}
}

constructor.public[] = {
	param[] = {
		type = Ionflux::Tools::Database*
		name = initDatabase
		desc = Source database
	}
	param[] = {
		type = unsigned int
		name = initBlockSize
		desc = Buffering block size
	}
	param[] = {
		type = const std::string&
		name = initTable
		desc = Source database table name
	}
	param[] = {
		type = const std::string&
		name = initKeyField
		desc = Name of the key field of the source database table
	}
	param[] = {
		type = const std::vector<std::string>&
		name = initFields
		desc = Names of fields to be included in each record
	}
	param[] = {
		type = const std::string&
		name = initOrigin
		desc = Key of the record with index pointer zero
	}
}

# Protected variables.
variable.protected[] = {
	type = Ionflux::Tools::Reporter
	name = log
	desc = Console output/logging
}
variable.protected[] = {
	type = Ionflux::Tools::ObjectPool
	name = pool
	desc = Object allocation pool
}
variable.protected[] = {
	type = Ionflux::Tools::Database*
	name = database
	desc = Source database
}
variable.protected[] = {
	type = Ionflux::Tools::Node*
	name = prevBlock
	desc = Previous block
}
variable.protected[] = {
	type = Ionflux::Tools::Node*
	name = currentBlock
	desc = Current block
}
variable.protected[] = {
	type = Ionflux::Tools::Node*
	name = nextBlock
	desc = Next block
}
variable.protected[] = {
	type = int
	name = currentOffset
	desc = Index of the first record of the current block
}
variable.protected[] = {
	type = Ionflux::Tools::Node
	name = config
	desc = Buffered table configuration node
}
variable.protected[] = {
	type = std::map<std::string, unsigned int>
	name = offsetIndex
	desc = Key/offset index
}
variable.protected[] = {
	type = std::vector<std::string>
	name = keyIndex
	desc = Offset/key index
}

# Public constants.
constant.public[] = {
	type = unsigned int
	name = DEFAULT_BLOCK_SIZE
	desc = Default buffering block size
	value = 50
}

# Protected class properties.
property.protected[] = {
	type = unsigned int
	name = blockSize
	setFromType = unsigned int
	desc = Buffer block size
}
property.protected[] = {
	type = std::string
	name = origin
	setFromType = const std::string&
	desc = Key of the record with index pointer zero
}
property.protected[] = {
	type = std::string
	name = table
	setFromType = const std::string&
	desc = Source database table name
}
property.protected[] = {
	type = std::string
	name = keyField
	setFromType = const std::string&
	desc = Name of the key field of the source database table
}
property.protected[] = {
	type = std::vector<std::string>
	name = fields
	setFromType = const std::vector<std::string>&
	desc = Names of fields to be included in each record
}
property.protected[] = {
	type = int
	name = currentIndex
	setFromType = int
	desc = Index of current record
}
property.protected[] = {
	type = std::string
	name = createTemplate
	setFromType = const std::string&
	desc = Create template
}
property.protected[] = {
	type = std::string
	name = createTemplateFile
	setFromType = const std::string&
	desc = Create template file name
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = cycleForward
	shortDesc = Cycle buffers (forward)
	longDesc = Cycle the buffer blocks forward.\
\
\note This effectively discards the previous block, sets the previous block to the current block, the current block to the next block end empties the next block.
}

function.protected[] = {
	spec = virtual
	type = void
	name = cycleBackward
	shortDesc = Cycle buffers (backward)
	longDesc = Cycle the buffer blocks backward.\
\
\note This effectively discards the next block, sets the next block to the current block, the current block to the previous block end empties the previous block.
}

function.protected[] = {
	spec = virtual
	type = void
	name = updateIndices
	shortDesc = Update indices
	longDesc = Update the key/offset and offset/key indices.
}

function.protected[] = {
	spec = virtual
	type = void
	name = initBlock
	shortDesc = Initialize buffer block
	longDesc = Initialize a block of the buffer with records starting from the specified key value.\
\
\note Pass \c true to \c invert to initialize a block with records starting from the last record (instead of the first) counting records backwards and result records being aligned to the end of the block (instead of the start of the block).
	param[] = {
		type = Ionflux::Tools::Node*
		name = target
		desc = Where to store the resulting records
	}
	param[] = {
		type = const std::string&
		name = fromKey
		desc = Key of the first (or last, if \c invert is \c true) record of the block
	}
	param[] = {
		type = bool
		name = invert
		default = false
		desc = Whether initialization order should be inverted
	}
}

function.protected[] = {
	spec = virtual
	type = int
	name = getBlockStartOffset
	shortDesc = Get block start offset
	longDesc = Get the offset of the start of the data block which contains the specified key, relative to the specified key.\
\
\note A data block is a block of data in the source database table of buffer block size, with the first block aligned to the start of the table. The data block that contains a certain key may be different from the buffer block that contains that same key. Data and buffer blocks can contain the same data only if the buffer block boundaries are aligned to the data block boundaries.
	param[] = {
		type = const std::string&
		name = key
		desc = Key
	}
	return.value = 0
	return.desc = Block start offset
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = setConfig
	shortDesc = Set configuration
	longDesc = Initialize the configuration of the buffered table from a configuration data node.
	param[] = {
		type = Ionflux::Tools::Node&
		name = newConfig
		desc = Configuration node
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setDatabase
	shortDesc = Set source database
	longDesc = Set the source database that will be used for fetching record blocks.
	param[] = {
		type = Ionflux::Tools::Database*
		name = newDatabase
		desc = Source database
	}
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Database*
	name = getDatabase
	shortDesc = Get source database
	longDesc = Get the source database that will be used for fetching record blocks.
	return.value = database
	return.desc = Source database. (The returned object will be referenced)
}

function.public[] = {
	spec = virtual
	type = bool
	name = validateTable
	shortDesc = Validate database table
	longDesc = Validate the existence of the database table. If the table does not exist and a template is set, the table will be created automatically.
	return.value = true
	return.desc = \c true on success, \c false otherwise
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Node*
	name = getRecord
	shortDesc = Get record
	longDesc = Get the record with the specified index.
	param[] = {
		type = int
		name = recIndex
		desc = Record index
	}
	return.value = 0
	return.desc = Record with specified index, or null if the record does not exist
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Node*
	name = operator[]
	shortDesc = Get record
	longDesc = Get the record with the specified index.
	param[] = {
		type = int
		name = recIndex
		desc = Record index
	}
	return.value = 0
	return.desc = Record with specified index, or null if the record does not exist
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Node*
	name = getCurrentRecord
	shortDesc = Get current record
	longDesc = Get the current record.
	return.value = 0
	return.desc = Current record, or null if the record does not exist
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Node*
	name = getNextRecord
	shortDesc = Get next record
	longDesc = Get the next record.\
\
\note This also makes the next record the current record.
	return.value = 0
	return.desc = Next record, or null if the record does not exist
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Node*
	name = getPrevRecord
	shortDesc = Get previous record
	longDesc = Get the previous record.\
\
\note This also makes the previous record the current record.
	return.value = 0
	return.desc = Previous record, or null if the record does not exist
}

function.public[] = {
	spec = virtual
	type = int
	name = getTableOffset
	shortDesc = Get key table offset
	longDesc = Get the database table offset (position relative to the start of the table) of a key.
	param[] = {
		type = const std::string&
		name = key
		desc = Key
	}
	return.value = 0
	return.desc = Table offset
}

function.public[] = {
	spec = virtual
	type = std::string
	name = getKey
	shortDesc = Get key
	longDesc = Get the key of the record with the specified offset relative to the record with the specified key.\
\
\sa fetchKey
	param[] = {
		type = const std::string&
		name = key
		desc = Key
	}
	param[] = {
		type = int
		name = recOffset
		desc = Offset of target record
	}
	return.value = string()
	return.desc = Key of record with specified offset relative to specified key, or an empty string if the record does not exist
}

function.public[] = {
	spec = virtual
	type = std::string
	name = getKey
	shortDesc = Get key by index
	longDesc = Get the key of the record with the specified index relative to the origin.\
\
\sa fetchKey
	param[] = {
		type = int
		name = recIndex
		desc = Record index
	}
	return.value = string()
	return.desc = Key of record with specified index, or an empty string if the record does not exist
}

function.public[] = {
	spec = virtual
	type = std::string
	name = fetchKey
	shortDesc = Get key from database table
	longDesc = Get the key of the record with the specified offset from the start of the database table.\
\
\sa getKey
	param[] = {
		type = unsigned int
		name = offset
		desc = Record offset
	}
	return.value = string()
	return.desc = Key of record with specified offset, or an empty string if record does not exist.
}

function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumRecs
	shortDesc = Get number of records
	longDesc = Get the number of records in the source database table.
	return.value = 0
	return.desc = Number of records
}

function.public[] = {
	spec = virtual
	type = unsigned int
	name = getFieldIndex
	shortDesc = Get field index
	longDesc = Get the index of the specified field.
	param[] = {
		type = const std::string&
		name = fieldName
		desc = Field name
	}
	return.value = 0
	return.desc = Field index
}

function.public[] = {
	spec = virtual
	type = void
	name = refresh
	shortDesc = Refresh buffer
	longDesc = Refresh the buffer to reflect changes in the database table.\
\
\note This function should always be called after records have been inserted, changed or deleted in the database table. Failing to do this may result in inaccurate buffers or even errors.
}

function.public[] = {
	spec = virtual
	type = void
	name = clearBlocks
	shortDesc = Clear buffer blocks
	longDesc = Clear all records from the buffer blocks.\
\
\note While this function will clear all data from the buffer, it will not touch any of the other internal state (unlike clear()).\
\
\sa clear
}

function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear buffer
	longDesc = Clear all records from the buffer.
}

function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Reporter&
	name = getLog
	shortDesc = Get Console output/logging facility
	longDesc = The console output/logging facility used by this object.
	return.value = log
	return.desc = Console output/logging facility
}

function.public[] = {
	spec = virtual
	type = void
	name = setOrigin
	shortDesc = Set key of the record with index pointer zero
	longDesc = Set the key of the record with index pointer zero by its offset in the database table.
	param[] = {
		type = unsigned int
		name = offset
		desc = Database table offset
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setCurrentRecord
	shortDesc = Set current record
	longDesc = Set the current record by key.\
\
\sa setCurrentIndex
	param[] = {
		type = const std::string&
		name = newKey
		desc = Key of record to be set as current record
	}
}
