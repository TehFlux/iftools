# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Canvas.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'<string>'
	'"ionflux/color.hpp"'
	'"ionflux/Matrix3.hpp"'
}

# Class definition.
class = {
	name = Canvas
	shortDesc = Drawing canvas
	title = Drawing canvas
	longDesc =  Abstract base class for objects which process drawing operations.
	includeDir = ionflux
	group.name = general
}

# Public constructors.

# Protected variables.

# Public constants.

# Protected class properties.
property.protected[] = {
	type = Color
	name = defaultStrokeColor
	setFromType = const Color&
	desc = Default stroke color
}
property.protected[] = {
	type = Color
	name = defaultFillColor
	setFromType = const Color&
	desc = Default fill color
}
property.protected[] = {
	type = double
	name = defaultStrokeWidth
	setFromType = double
	desc = Default stroke width
}
property.protected[] = {
	type = std::string
	name = defaultFontFamily
	setFromType = const std::string&
	desc = Default font family
}
property.protected[] = {
	type = double
	name = defaultFontSize
	setFromType = double
	desc = Default font size
}
property.protected[] = {
	type = Matrix3*
	name = defaultTransform
	setFromType = Matrix3*
	desc = Default transform matrix
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = drawLine
	pureVirtual = true
	shortDesc = Draw line
	longDesc = Draw a line.
	param[] = {
		type = double
		name = x1
		desc = x1 coordinate
	}
	param[] = {
		type = double
		name = y1
		desc = y1 coordinate
	}
	param[] = {
		type = double
		name = x2
		desc = x2 coordinate
	}
	param[] = {
		type = double
		name = y2
		desc = y2 coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = color
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawRectangle
	pureVirtual = true
	shortDesc = Draw rectangle
	longDesc = Draw a rectangle.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawArc
	pureVirtual = true
	shortDesc = Draw arc
	longDesc = Draw an arc.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	param[] = {
		type = double
		name = angle1
		desc = Angle 1
	}
	param[] = {
		type = double
		name = angle2
		desc = Angle 2
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawArcEc
	pureVirtual = true
	shortDesc = Draw arc
	longDesc = Draw an arc with specified eccentricity.
	param[] = {
		type = double
		name = xc
		desc = x center
	}
	param[] = {
		type = double
		name = yc
		desc = y center
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = angle1
		desc = Angle 1
	}
	param[] = {
		type = double
		name = angle2
		desc = Angle 2
	}
	param[] = {
		type = double
		name = eccentricity
		desc = Eccentricity
		default = 0.0
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawEllipse
	pureVirtual = true
	shortDesc = Draw ellipse
	longDesc = Draw an ellipse.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawEllipseEc
	pureVirtual = true
	shortDesc = Draw ellipse
	longDesc = Draw an ellipse.
	param[] = {
		type = double
		name = xc
		desc = x center
	}
	param[] = {
		type = double
		name = yc
		desc = y center
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = eccentricity
		desc = Eccentricity
		default = 0.0
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawCircle
	pureVirtual = true
	shortDesc = Draw circle
	longDesc = Draw a circle.
	param[] = {
		type = double
		name = xc
		desc = x center
	}
	param[] = {
		type = double
		name = yc
		desc = y center
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawCurve
	pureVirtual = true
	shortDesc = Draw curve
	longDesc = Draw a curve.
	param[] = {
		type = double
		name = x1
		desc = x1 coordinate
	}
	param[] = {
		type = double
		name = y1
		desc = y1 coordinate
	}
	param[] = {
		type = double
		name = x2
		desc = x2 coordinate
	}
	param[] = {
		type = double
		name = y2
		desc = y2 coordinate
	}
	param[] = {
		type = double
		name = x3
		desc = x3 coordinate
	}
	param[] = {
		type = double
		name = y3
		desc = y3 coordinate
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = color
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawText
	pureVirtual = true
	shortDesc = Draw text
	longDesc = Draw a text.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = const std::string&
		name = text
		desc = Text
	}
	param[] = {
		type = const std::string&
		name = fontFamily
		desc = Font family
		default = ""
	}
	param[] = {
		type = double
		name = fontSize
		desc = Font size
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = color
		desc = Color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
