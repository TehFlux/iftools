# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoGradient.conf                 Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'"ionflux/color.hpp"'
	'"ionflux/CairoPattern.hpp"'
}

# Class definition.
class = {
	name = Gradient
	base = public Pattern
	shortDesc = Cairo gradient
	title = Cairo gradient
	longDesc = Gradient for use with the Cairo vector graphics API (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const Gradient&
		name = initGradient
		desc = Cairo gradient
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_pattern_t*
		name = initGradient
		desc = Cairo gradient
	}
}

# Protected variables.

# Public constants.

# Protected class properties.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = addColorStopRgb
	shortDesc = Pattern color stop rgb
	longDesc = Pattern color stop rgb
	param[] = {
		type = double
		name = offset
		desc = Offset
	}
	param[] = {
		type = double
		name = red
		desc = Red
	}
	param[] = {
		type = double
		name = green
		desc = Green
	}
	param[] = {
		type = double
		name = blue
		desc = Blue
	}
	impl = cairo_pattern_add_color_stop_rgb(cairoPattern, offset, red, green, blue);
}
function.public[] = {
	spec = virtual
	type = void
	name = addColorStopRgba
	shortDesc = Pattern color stop rgba
	longDesc = Pattern color stop rgba
	param[] = {
		type = double
		name = offset
		desc = Offset
	}
	param[] = {
		type = double
		name = red
		desc = Red
	}
	param[] = {
		type = double
		name = green
		desc = Green
	}
	param[] = {
		type = double
		name = blue
		desc = Blue
	}
	param[] = {
		type = double
		name = alpha
		desc = Alpha
	}
	impl = cairo_pattern_add_color_stop_rgba(cairoPattern, offset, red, green, blue, alpha);
}
function.public[] = {
	spec = virtual
	type = void
	name = addColorStop
	shortDesc = Pattern color stop
	longDesc = Pattern color stop
	param[] = {
		type = double
		name = offset
		desc = Offset
	}
	param[] = {
		type = const Ionflux::Tools::Color&
		name = color
		desc = Color
	}
	impl = addColorStopRgba(offset, color.red, color.green, color.blue, color.alpha);
}
function.public[] = {
	spec = virtual
	type = Gradient&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a pattern to another pattern.
	param[] = {
		type = const Gradient&
		name = newCairoPattern
		desc = Cairo solid pattern
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = Gradient&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo pattern to this pattern object.
	param[] = {
		type = cairo_pattern_t*
		name = newCairoPattern
		desc = Cairo solid pattern
	}
	return.value = *this
	return.desc = The object itself
}
