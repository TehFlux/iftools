# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004-2005 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Object.conf                       Base class for all objects.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2004-2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
	'namespace Ionflux::Tools'
}

# Include files (header).
include.header = {
	'<string>'
	'<vector>'
}

# Include files (implementation).

# Class definition.
class = {
	name = Object
	shortDesc = Object
	title = Object
	longDesc = A base class for all objects.
	includeDir = ionflux
	group.name = general
	createClassInfo = true
}

# Public constructors.

# Member variables.
variable.protected[] = {
	name = theClasses
	type = std::vector<const ClassInfo*>
	desc = Class info vector
}

# Class properties.

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = const ClassInfo*
	name = getClass
	const = true
	shortDesc = Get class information
	longDesc = Get the class information.
	return.value = 0
	return.desc = The class information, or 0 if no class information exists for this class
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getClassName
	const = true
	shortDesc = Get class name
	longDesc = Get the class name
	return.value = ""
	return.desc = The class name
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getClassDesc
	const = true
	shortDesc = Get class description
	longDesc = Get the class description
	return.value = ""
	return.desc = The class description
}
