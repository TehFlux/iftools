# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Matrix3.conf                Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Include files.
include = {
	'<string>'
	'<iostream>'
	'<sstream>'
	'<math.h>'
	'"ionflux/Vector3.hpp"'
	'"ionflux/ManagedObject.hpp"'
}

# Class definition.
class = {
	name = Matrix3
	base = public ManagedObject
	shortDesc = Matrix (R3 x R3)
	title = Matrix (R3 x R3)
	longDesc =  A matrix in three dimensional space.
	includeDir = ionflux
	group.name = vecmath
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = double
		name = initX11
		desc = x11 entry
	}
	param[] = {
		type = double
		name = initX12
		desc = x12 entry
	}
	param[] = {
		type = double
		name = initX13
		desc = x13 entry
	}
	param[] = {
		type = double
		name = initX21
		desc = x21 entry
	}
	param[] = {
		type = double
		name = initX22
		desc = x22 entry
	}
	param[] = {
		type = double
		name = initX23
		desc = x23 entry
	}
	param[] = {
		type = double
		name = initX31
		desc = x31 entry
	}
	param[] = {
		type = double
		name = initX32
		desc = x32 entry
	}
	param[] = {
		type = double
		name = initX33
		desc = x33 entry
	}
}

constructor.public[] = {
	param[] = {
		type = const Matrix3&
		name = initMat
		desc = Matrix (R3 x R3)
	}
}

constructor.public[] = {
	param[] = { 
		type = const Vector3&
		name = initC1
		desc = First column vector
	}
	param[] = {
		type = const Vector3&
		name = initC2
		desc = Second column vector
	}
	param[] = {
		type = const Vector3&
		name = initC3
		desc = Third column vector
	}
}

constructor.public[] = {
	param[] = { 
		type = const double*
		name = initEntry
		desc = Array of matrix entries
	}
}

# Protected variables.
variable.protected[] = {
	type = double*
	name = entry
	desc = Entries
}

# Class properties.
property[] = {
	type = double
	name = x11
	setFromType = double
	desc = x11 entry
}
property[] = {
	type = double
	name = x12
	setFromType = double
	desc = x13 entry
}
property[] = {
	type = double
	name = x13
	setFromType = double
	desc = x13 entry
}
property[] = {
	type = double
	name = x21
	setFromType = double
	desc = x21 entry
}
property[] = {
	type = double
	name = x22
	setFromType = double
	desc = x22 entry
}
property[] = {
	type = double
	name = x23
	setFromType = double
	desc = x23 entry
}
property[] = {
	type = double
	name = x31
	setFromType = double
	desc = x31 entry
}
property[] = {
	type = double
	name = x32
	setFromType = double
	desc = x32 entry
}
property[] = {
	type = double
	name = x33
	setFromType = double
	desc = x33 entry
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = setEntries
	shortDesc = Set entries
	longDesc = Set the entries of the matrix.
	param[] = {
		type = double
		name = newX11
		desc = x11 entry
	}
	param[] = {
		type = double
		name = newX12
		desc = x12 entry
	}
	param[] = {
		type = double
		name = newX13
		desc = x13 entry
	}
	param[] = {
		type = double
		name = newX21
		desc = x21 entry
	}
	param[] = {
		type = double
		name = newX22
		desc = x22 entry
	}
	param[] = {
		type = double
		name = newX23
		desc = x23 entry
	}
	param[] = {
		type = double
		name = newX31
		desc = x31 entry
	}
	param[] = {
		type = double
		name = newX32
		desc = x32 entry
	}
	param[] = {
		type = double
		name = newX33
		desc = x33 entry
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setEntries
	shortDesc = Set entries
	longDesc = Set the entries of the matrix. \
\
\note \c newEntry is expected to have a size of at least 9.
	param[] = {
		type = const double*
		name = newEntry
		desc = Array of entries
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setColumns
	shortDesc = Set column vectors
	longDesc = Set the column vectors of the matrix.
	param[] = {
		type = const Vector3&
		name = newC1
		desc = First column vector
	}
	param[] = {
		type = const Vector3&
		name = newC2
		desc = Second column vector
	}
	param[] = {
		type = const Vector3&
		name = newC3
		desc = Third column vector
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setRows
	shortDesc = Set row vectors
	longDesc = Set the row vectors of the matrix.
	param[] = {
		type = const Vector3&
		name = newR1
		desc = First row vector
	}
	param[] = {
		type = const Vector3&
		name = newR2
		desc = Second row vector
	}
	param[] = {
		type = const Vector3&
		name = newR3
		desc = Third row vector
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setEntry
	shortDesc = Set entry
	longDesc = Set the specified entry of the matrix. \
\
\note If either \c rowIndex or \c colIndex is out of range, this function does nothing.
	param[] = {
		type = int
		name = rowIndex
		desc = Row index (0...2)
	}
	param[] = {
		type = int
		name = colIndex
		desc = Column index (0...2)
	}
	param[] = {
		type = double
		name = newEntry
		desc = New value of entry
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setColumn
	shortDesc = Set column vector
	longDesc = Set the specified column vector of the matrix. \
\
\note If \c colIndex is out of range, this function does nothing.
	param[] = {
		type = int
		name = colIndex
		desc = Column index (0...2)
	}
	param[] = {
		type = const Vector3&
		name = newCol
		desc = Column vector
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = setRow
	shortDesc = Set row vector
	longDesc = Set the specified row vector of the matrix. \
\
\note If \c rowIndex is out of range, this function does nothing.
	param[] = {
		type = int
		name = rowIndex
		desc = Row index (0...2)
	}
	param[] = {
		type = const Vector3&
		name = newRow
		desc = Row vector
	}
}

function.public[] = {
	spec = virtual
	type = Vector3
	name = getColumn
	const = true
	shortDesc = Get column vector
	longDesc = Get the specified column vector of the matrix. \
\
\note If \c colIndex is out of range, this function returns the null vector.
	param[] = {
		type = int
		name = colIndex
		desc = Column index (0...2)
	}
	return.value = Vector3()
	return.desc = Column vector
}

function.public[] = {
	spec = virtual
	type = Vector3
	name = getRow
	const = true
	shortDesc = Get row vector
	longDesc = Get the specified row vector of the matrix. \
\
\note If \c rowIndex is out of range, this function returns the null vector.
	param[] = {
		type = int
		name = rowIndex
		desc = Row index (0...2)
	}
	return.value = Vector3()
	return.desc = Row vector
}

function.public[] = {
	spec = virtual
	type = double
	name = getEntry
	const = true
	shortDesc = Get entry
	longDesc = Get the specified entry of the matrix. \
\
\note If either \c rowIndex or \c colIndex is out of range, this function does nothing.
	param[] = {
		type = int
		name = rowIndex
		desc = Row index (0...2)
	}
	param[] = {
		type = int
		name = colIndex
		desc = Column index (0...2)
	}
	return.value = 0.0
	return.desc = Matrix entry
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign one matrix to another matrix.
	param[] = {
		type = const Matrix3&
		name = newMat
		desc = Matrix (R3 x R3)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3
	name = operator+
	shortDesc = Add operator
	longDesc = Add one matrix to another matrix.
	param[] = {
		type = const Matrix3&
		name = otherMat
		desc = Matrix (R3 x R3)
	}
	return.value = Matrix3()
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3
	name = operator-
	shortDesc = Subtract operator
	longDesc = Subtract one matrix from another matrix.
	param[] = {
		type = const Matrix3&
		name = otherMat
		desc = Matrix (R3 x R3)
	}
	return.value = Matrix3()
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3
	name = operator*
	shortDesc = Multiply operator
	longDesc = Calculate the product of two matrices.
	param[] = {
		type = const Matrix3&
		name = otherMat
		desc = Matrix (R3 x R3)
	}
	return.value = Matrix3()
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = operator+=
	shortDesc = Add operator
	longDesc = Add one matrix to another matrix.
	param[] = {
		type = const Matrix3&
		name = otherMat
		desc = Matrix (R3 x R3)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = operator-=
	shortDesc = Subtract operator
	longDesc = Subtract one matrix from another matrix.
	param[] = {
		type = const Matrix3&
		name = otherMat
		desc = Matrix (R3 x R3)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = operator*=
	shortDesc = Multiply operator
	longDesc = Calculate the product of two matrices.
	param[] = {
		type = const Matrix3&
		name = otherMat
		desc = Matrix (R3 x R3)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = operator*=
	shortDesc = Multiply operator
	longDesc = Calculate the product of the matrix and a scalar.
	param[] = {
		type = double
		name = a
		desc = Scalar
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Vector3
	name = operator*
	shortDesc = Multiply operator
	longDesc = Apply a matrix to a vector.
	param[] = {
		type = const Vector3&
		name = argVec
		desc = Vector (R3)
	}
	return.value = Vector3()
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3
	name = operator*
	shortDesc = Multiply operator
	longDesc = Calculate the product of the matrix and a scalar.
	param[] = {
		type = double
		name = a
		desc = Scalar
	}
	return.value = Matrix3()
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Vector3
	name = operator[]
	const = true
	shortDesc = Subscript operator
	longDesc = Access a row vector of the matrix.\
\
\note If \c rowIndex is out of range, the function returns the null vector.
	param[] = {
		type = int
		name = rowIndex
		desc = Row index (0...2)
	}
	return.value = Vector3()
	return.desc = Row vector
}

function.public[] = {
	spec = virtual
	type = std::string
	name = toString
	const = true
	shortDesc = Create string representation
	longDesc = Create a string representation of the matrix (i.e. "[&lt;R1&gt;,&lt;R2&gt;,&lt;R3&gt;]", R1...R3 being the string representations of the row vectors).
	return.value = string()
	return.desc = String representation
}

function.public[] = {
	spec = virtual
	type = double
	name = getSubDet
	const = true
	shortDesc = Calculate subdeterminant
	longDesc = Calculate a subdeterminant of the matrix. A subdeterminant is obtained by calculating the determinant of the matrix resulting from removing a row and a column from the original matrix.
	param[] = {
		type = int
		name = rowIndex
		desc = Row index of the row to be removed (0...2)
	}
	param[] = {
		type = int
		name = colIndex
		desc = Column index of the column to be removed (0...2)
	}
	return.value = 0.0
	return.desc = Subdeterminant
}

function.public[] = {
	spec = virtual
	type = double
	name = getDet
	const = true
	shortDesc = Calculate determinant
	longDesc = Calculate the determinant of the matrix.
	return.value = 0.0
	return.desc = Determinant
}

function.public[] = {
	spec = virtual
	type = Matrix3
	name = getAdjoint
	const = true
	shortDesc = Get adjoint
	longDesc = Get the adjoint of the matrix.
	return.value = Matrix3
	return.desc = Adjoint matrix
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = transpose
	shortDesc = Transpose
	longDesc = Transpose the matrix.
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = invert
	shortDesc = Invert
	longDesc = Invert the matrix.
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = clear
	shortDesc = Clear
	longDesc = Clear the matrix (set all entries to zero).
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = setIdentity
	shortDesc = Set identity matrix
	longDesc = Set the matrix to the identity matrix.
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = setRotateX
	shortDesc = Set rotation matrix (X)
	longDesc = Set the matrix to a rotation matrix around the X axis.
	param[] = {
		type = double
		name = phi
		desc = Rotation angle (rad)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = setRotateY
	shortDesc = Set rotation matrix (X)
	longDesc = Set the matrix to a rotation matrix around the Y axis.
	param[] = {
		type = double
		name = phi
		desc = Rotation angle (rad)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = setRotateZ
	shortDesc = Set rotation matrix (Z)
	longDesc = Set the matrix to a rotation matrix around the Z axis.
	param[] = {
		type = double
		name = phi
		desc = Rotation angle (rad)
	}
	return.value = *this
	return.desc = Result of the operation
}

function.public[] = {
	spec = virtual
	type = Matrix3&
	name = setScale
	shortDesc = Set scale matrix
	longDesc = Set the matrix to a scale matrix.
	param[] = {
		type = double
		name = scaleX
		desc = Scale factor (X)
	}
	param[] = {
		type = double
		name = scaleY
		desc = Scale factor (Y)
	}
	param[] = {
		type = double
		name = scaleZ
		desc = Scale factor (Z)
	}
	return.value = *this
	return.desc = Result of the operation
}
