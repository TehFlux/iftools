# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IOMultiplexer.conf                 Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project.name = Ionflux Tools
project.author = Joern P. Meier
project.mail = mail@ionflux.org
copyrightYear = 2004
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[0].name = Ionflux
namespace[1].name = Tools

# Include files.
include[0] = <string>
include[1] = <iostream>
include[2] = <sstream>
include[3] = <vector>
include[4] = <signal.h>
include[5] = "ionflux/IOHandler.h"
include[6] = "ionflux/Reporter.h"
include[7] = "ionflux/FDSet.h"

# Class definition.
class.name = IOMultiplexer
class.shortDesc = IO event multiplexer
class.title = IO event multiplexer
class.longDesc = A multiplexer for IO events. If a specified event is ready to be processed, \
 * the IO multiplexer notifies the associated IO handler. For example, an \
 * IOHandler may be called if a file descriptor is ready for reading.

# Member functions.
function[0].spec = virtual
function[0].type = void
function[0].name = registerEvent
function[0].shortDesc = Register IO event
function[0].longDesc = Register an IO event to be handled by the multiplexer.
function[0].paramList = IOHandler *handler, IOEvent event
function[0].param[0].type = IOHandler*
function[0].param[0].name = handler
function[0].param[0].desc = IO handler to be notified if the event occurs.
function[0].param[1].type = IOEvent
function[0].param[1].name = event
function[0].param[1].desc = IO event.

function[1].spec = virtual
function[1].type = void
function[1].name = removeEvent
function[1].shortDesc = Remove IO event
function[1].longDesc = Remove an IO event from the set of events handled by the multiplexer.
function[1].paramList = IOHandler *handler, IOEvent event
function[1].param[0].type = IOHandler*
function[1].param[0].name = handler
function[1].param[0].desc = IO handler for which the event has been registered.
function[1].param[1].type = IOEvent
function[1].param[1].name = event
function[1].param[1].desc = IO event.

function[2].spec = virtual
function[2].type = void
function[2].name = run
function[2].shortDesc = Main loop
function[2].longDesc = Watch for registered events.
