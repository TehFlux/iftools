# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoImageSurface.conf                 Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'"ionflux/CairoSurface.hpp"'
}

# Class definition.
class = {
	name = ImageSurface
	base = public Surface
	shortDesc = Cairo image surface
	title = Cairo image surface
	longDesc = Image surface for the Cairo vector graphics API (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const ImageSurface&
		name = initSurface
		desc = Cairo image surface
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_surface_t*
		name = initSurface
		desc = Cairo image surface
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_format_t
		name = format
		desc = Format
	}
	param[] = {
		type = int
		name = width
		desc = Width
	}
	param[] = {
		type = int
		name = height
		desc = Height
	}
}
constructor.public[] = {
	param[] = {
		type = unsigned char*
		name = data
		desc = Data
	}
	param[] = {
		type = cairo_format_t
		name = format
		desc = Format
	}
	param[] = {
		type = int
		name = width
		desc = Width
	}
	param[] = {
		type = int
		name = height
		desc = Height
	}
	param[] = {
		type = int
		name = stride
		desc = Stride
	}
}
constructor.public[] = {
	param[] = {
		type = const std::string&
		name = pngFilename
		desc = Filename of a PNG file
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_read_func_t
		name = pngReadFunc
		desc = Read function for PNG stream
	}
	param[] = {
		type = void*
		name = closure
		desc = Closure
	}
}

# Protected variables.

# Public constants.

# Protected class properties.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = cairo_status_t
	name = writeToPng
	shortDesc = Write to png
	longDesc = Write to png
	param[] = {
		type = const std::string&
		name = pngFilename
		desc = Filename of a PNG file
	}
	return.value = cairo_surface_write_to_png(surface, filename)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = cairo_status_t
	name = writeToPngStream
	shortDesc = Write to png stream
	longDesc = Write to png stream
	param[] = {
		type = cairo_write_func_t
		name = write_func
		desc = Write_func
	}
	param[] = {
		type = void*
		name = closure
		desc = Closure
	}
	return.value = cairo_surface_write_to_png_stream(surface, write_func, closure)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = int
	name = getWidth
	shortDesc = Get width
	longDesc = Get width
	return.value = cairo_image_surface_get_width(surface)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = int
	name = getHeight
	shortDesc = Get height
	longDesc = Get height
	return.value = cairo_image_surface_get_height(surface)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = ImageSurface&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a surface to another surface.
	param[] = {
		type = const ImageSurface&
		name = newCairoSurface
		desc = Cairo image surface
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = ImageSurface&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo surface to this surface object.
	param[] = {
		type = cairo_surface_t*
		name = newCairoSurface
		desc = Cairo image surface
	}
	return.value = *this
	return.desc = The object itself
}
