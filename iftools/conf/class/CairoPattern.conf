# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoPattern.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'"cairo.h"'
	'"ionflux/ManagedObject.hpp"'
	'"ionflux/CairoMatrix.hpp"'
}

# Class definition.
class = {
	name = Pattern
	base = public Ionflux::Tools::ManagedObject
	shortDesc = Cairo pattern
	title = Cairo pattern
	longDesc = Base class for the Cairo vector graphics API pattern types (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const Pattern&
		name = initPattern
		desc = Cairo pattern
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_pattern_t*
		name = initPattern
		desc = Cairo pattern
	}
}

# Protected variables.

# Public constants.

# Protected class properties.
property.protected[] = {
	type = cairo_pattern_t*
	setFromType = cairo_pattern_t*
	name = cairoPattern
	desc = Cairo pattern
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = reference
	shortDesc = Pattern
	longDesc = Pattern
	impl = cairo_pattern_reference(pattern);
}
function.public[] = {
	spec = virtual
	type = void
	name = destroy
	shortDesc = Pattern
	longDesc = Pattern
	impl = cairo_pattern_destroy(pattern);
}
function.public[] = {
	spec = virtual
	type = cairo_status_t
	name = status
	shortDesc = Pattern
	longDesc = Pattern
	return.value = cairo_pattern_status(pattern)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = setMatrix
	shortDesc = Pattern matrix
	longDesc = Pattern matrix
	param[] = {
		type = const cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_pattern_set_matrix(pattern, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = getMatrix
	shortDesc = Pattern matrix
	longDesc = Pattern matrix
	param[] = {
		type = cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_pattern_get_matrix(pattern, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = setMatrix
	shortDesc = Pattern matrix
	longDesc = Pattern matrix
	param[] = {
		type = const Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = getMatrix
	shortDesc = Pattern matrix
	longDesc = Pattern matrix
	param[] = {
		type = Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = Pattern&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a pattern to another pattern.
	param[] = {
		type = const Pattern&
		name = newCairoPattern
		desc = Cairo pattern
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = Pattern&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo pattern to this pattern object.
	param[] = {
		type = cairo_pattern_t*
		name = newCairoPattern
		desc = Cairo pattern
	}
	return.value = *this
	return.desc = The object itself
}
