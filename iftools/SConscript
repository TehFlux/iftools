#!/usr/bin/python
# -*- coding: utf-8 -*-
# ==========================================================================
# Ionflux Tools
# Copyright Â© 2004-2010 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SConscript                  SCons build script
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================
import sys, os, shutil, subprocess

# Create a default local configuration file if it does not exist.
if (not os.path.isfile('site_scons/local_config.py')):
    shutil.copy('site_scons/local_config.py.default', 
        'site_scons/local_config.py')

import local_config as lc

Help("""
Type 'scons' to build the default targets.
Type 'scons install' to install to default location.
Type 'scons <target>' to build a specific target.

You can add local configuration to site_scons/local_config.py.

Targets:
  (default)                    Everything.
  all                          Everything
  libs                         Shared libraries.
  programs                     Programs.
  tests                        Test programs.
  pymodule                     Python module.
  install                      Install headers, libraries and programs.

Options:
  prefix=<target directory>    Installation prefix
                               (default: /usr/local)
  debug=<yes|no>               Whether to use debug compiler flags 
                               (default: no)
  gtools=<yes|no>              Whether to build the Glib tools (default: no).
""")

env0 = os.environ
env0['PATH'] += (':' + lc.PATH)

env = Environment(ENV = env0)
env.Append(
    CPPPATH = ['include', 'extern/sha1', 'extern/Mersenne'] + lc.CPPPATH, 
    LIBPATH = ['lib'] + lc.LIBPATH)
env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2'])

if (ARGUMENTS.get('debug', 'no') == 'yes'):
    env.Append(CCFLAGS = '-g')

if (hasattr(lc, 'prefix')):
    defaultPrefix = lc.prefix
else:
    defaultPrefix = '/usr/local'
prefix = ARGUMENTS.get('prefix', defaultPrefix)

gtools = ARGUMENTS.get('gtools', 'no')

env.VariantDir('build', 'src')
env.VariantDir('build/ionflux', 'src/ionflux')
env.VariantDir('test/build', 'test')

toolsEnv = env.Clone()

def checkProgram(ctx, cmd):
    """Check for installed program."""
    ctx.Message('Checking for ' + cmd + '... ')
    try:
        subprocess.call(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

config = toolsEnv.Configure(custom_tests = { "CheckProgram" : checkProgram })

missingDeps = []
if (not config.CheckLib("bz2")):
    missingDeps += ['bz2']
if (not config.CheckLib("pcre")):
    missingDeps += ['pcre']
if (not config.CheckLib("mysqlclient")):
    missingDeps += ['mysqlclient']

buildPyModule = True
if (not config.CheckLibWithHeader("python" + lc.pythonVersion, 
    "Python.h", 'C', autoadd = 0)):
    print "***************************************************"
    print "Python not found - Python module will NOT be built!"
    print "***************************************************"
    buildPyModule = False

haveSWIG = True
if (not config.CheckProgram("swig")):
    print "*************************************************"
    print "SWIG not found - Python module will NOT be built!"
    print "*************************************************"
    haveSWIG = False
    buildPyModule = False

if (len(missingDeps) > 0):
    print "**********************************************************"
    print "IFTools cannot be built because the following dependencies"
    print "were not found:"
    print " "
    for it in missingDeps:
        print "  " + it
    print " "
    print "**********************************************************"
    Exit(1)

toolsEnv = config.Finish()

toolsEnv.Append(LIBS = ['bz2', 'pcre', 'mysqlclient'])
if (sys.platform == 'darwin'):
    toolsEnv.Append(LIBS = ['iconv'])

swigPythonBuilder = Builder(action = "swig -c++ -python "
    + "-outdir swig/python -o $TARGET $SOURCE")

toolsEnv.Append(BUILDERS = { 'SWIGPython' : swigPythonBuilder})

gtoolsEnv = None
buildGTools = False
if (gtools == "yes"):
    buildGTools = True

if (buildGTools):
    gtoolsEnv = env.Clone()
    gtoolsEnv.MergeFlags(['!pkg-config --cflags --libs gtkmm-2.4', 
        '!pkg-config --cflags --libs cairo'])
    gtoolsEnv.Append(LIBS = ['iftools'])

toolsHeaders = ['extern/sha1/sha1.h',
    'extern/Mersenne/MersenneTwister.h',
    'include/ionflux/ClassInfo.hpp',
    'include/ionflux/Object.hpp',
    'include/ionflux/AuthFile.hpp',
    'include/ionflux/Auth.hpp',
    'include/ionflux/ByteDump.hpp',
    'include/ionflux/CLArgs.hpp',
    'include/ionflux/Config.hpp',
    'include/ionflux/ConfigMap.hpp',
    'include/ionflux/ConfigTree.hpp',
    'include/ionflux/Database.hpp',
    'include/ionflux/DateTime.hpp',
    'include/ionflux/FDSet.hpp',
    'include/ionflux/IOHandler.hpp',
    'include/ionflux/IOMultiplexer.hpp',
    'include/ionflux/MessageDump.hpp',
    'include/ionflux/Message.hpp',
    'include/ionflux/MessageHandler.hpp',
    'include/ionflux/MySQLDatabase.hpp',
    'include/ionflux/NodeDump.hpp',
    'include/ionflux/Node.hpp',
    'include/ionflux/NodeReference.hpp',
    'include/ionflux/RegExp.hpp',
    'include/ionflux/Reporter.hpp',
    'include/ionflux/SelectMultiplexer.hpp',
    'include/ionflux/StringFilter.hpp',
    'include/ionflux/StringManipulator.hpp',
    'include/ionflux/TCPAuthClient.hpp',
    'include/ionflux/TCPAuthServer.hpp',
    'include/ionflux/TCPClient.hpp',
    'include/ionflux/TCPMessageClient.hpp',
    'include/ionflux/TCPMessageServer.hpp',
    'include/ionflux/TCPRemotePeer.hpp',
    'include/ionflux/TCPServer.hpp',
    'include/ionflux/TCPSocket.hpp',
    'include/ionflux/TCPSocketIOHandler.hpp',
    'include/ionflux/Template.hpp',
    'include/ionflux/TimeZone.hpp',
    'include/ionflux/Tokenizer.hpp',
    'include/ionflux/TokenTypeMap.hpp',
    'include/ionflux/Utf8TokenTypeMap.hpp',
    'include/ionflux/Utf8Tokenizer.hpp',
    'include/ionflux/tools.hpp',
    'include/ionflux/Tree.hpp',
    'include/ionflux/TreeResolver.hpp',
    'include/ionflux/TreeEval.hpp',
    'include/ionflux/ManagedObject.hpp',
    'include/ionflux/ObjectPool.hpp',
    'include/ionflux/BufferedTable.hpp',
    'include/ionflux/File.hpp',
    'include/ionflux/EMailAddress.hpp',
    'include/ionflux/color.hpp',
    'include/ionflux/Vector3.hpp',
    'include/ionflux/Matrix3.hpp',
    'include/ionflux/Canvas.hpp']

toolsSources = ['extern/sha1/sha1.cpp',
     'build/ionflux/tools.cpp',
     'build/ionflux/ClassInfo.cpp',
     'build/ionflux/Object.cpp',
     'build/ionflux/Reporter.cpp',
     'build/ionflux/RegExp.cpp',
     'build/ionflux/Database.cpp',
     'build/ionflux/MySQLDatabase.cpp',
     'build/ionflux/TokenTypeMap.cpp',
     'build/ionflux/Tokenizer.cpp',
     'build/ionflux/Utf8TokenTypeMap.cpp',
     'build/ionflux/Utf8Tokenizer.cpp',
     'build/ionflux/StringFilter.cpp',
     'build/ionflux/StringManipulator.cpp',
     'build/ionflux/DateTime.cpp',
     'build/ionflux/TimeZone.cpp',
     'build/ionflux/Node.cpp',
     'build/ionflux/Tree.cpp',
     'build/ionflux/NodeReference.cpp',
     'build/ionflux/TreeResolver.cpp',
     'build/ionflux/TreeEval.cpp',
     'build/ionflux/Config.cpp',
     'build/ionflux/ConfigMap.cpp',
     'build/ionflux/ConfigTree.cpp',
     'build/ionflux/Template.cpp',
     'build/ionflux/CLArgs.cpp',
     'build/ionflux/TCPSocket.cpp',
     'build/ionflux/TCPSocketIOHandler.cpp',
     'build/ionflux/TCPRemotePeer.cpp',
     'build/ionflux/TCPClient.cpp',
     'build/ionflux/TCPServer.cpp',
     'build/ionflux/TCPMessageClient.cpp',
     'build/ionflux/TCPMessageServer.cpp',
     'build/ionflux/TCPAuthClient.cpp',
     'build/ionflux/TCPAuthServer.cpp',
     'build/ionflux/FDSet.cpp',
     'build/ionflux/AuthFile.cpp',
     'build/ionflux/Message.cpp',
     'build/ionflux/IOHandler.cpp',
     'build/ionflux/IOMultiplexer.cpp',
     'build/ionflux/SelectMultiplexer.cpp',
     'build/ionflux/ManagedObject.cpp',
     'build/ionflux/ObjectPool.cpp',
     'build/ionflux/BufferedTable.cpp',
     'build/ionflux/File.cpp',
     'build/ionflux/EMailAddress.cpp',
     'build/ionflux/color.cpp',
     'build/ionflux/Vector3.cpp',
     'build/ionflux/Matrix3.cpp',
     'build/ionflux/Canvas.cpp']

gtoolsHeaders = ['include/ionflux/GlibMultiplexer.hpp',
    'include/ionflux/CairoContext.hpp',
    'include/ionflux/CairoMatrix.hpp',
    'include/ionflux/CairoPattern.hpp',
    'include/ionflux/CairoSolidPattern.hpp',
    'include/ionflux/CairoSurfacePattern.hpp',
    'include/ionflux/CairoGradient.hpp',
    'include/ionflux/CairoLinearGradient.hpp',
    'include/ionflux/CairoRadialGradient.hpp',
    'include/ionflux/CairoSurface.hpp',
    'include/ionflux/CairoImageSurface.hpp',
    'include/ionflux/CairoPathData.hpp',
    'include/ionflux/CairoPathIterator.hpp',
    'include/ionflux/CairoPath.hpp',
    'include/ionflux/CairoCanvas.hpp',
    'include/ionflux/GtkCairoArea.hpp']

gtoolsSources = ['build/ionflux/GlibMultiplexer.cpp',
    'build/ionflux/CairoContext.cpp',
    'build/ionflux/CairoMatrix.cpp',
    'build/ionflux/CairoPattern.cpp',
    'build/ionflux/CairoSolidPattern.cpp',
    'build/ionflux/CairoSurfacePattern.cpp',
    'build/ionflux/CairoGradient.cpp',
    'build/ionflux/CairoLinearGradient.cpp',
    'build/ionflux/CairoRadialGradient.cpp',
    'build/ionflux/CairoSurface.cpp',
    'build/ionflux/CairoImageSurface.cpp',
    'build/ionflux/CairoPathData.cpp',
    'build/ionflux/CairoPathIterator.cpp',
    'build/ionflux/CairoPath.cpp',
    'build/ionflux/CairoCanvas.cpp',
    'build/ionflux/GtkCairoArea.cpp']

# IFTools core library.
toolsLib = toolsEnv.SharedLibrary('lib/iftools',
    toolsSources)

targetLibs = [toolsLib]

# Glib utility library.
if (buildGTools):
    gtoolsLib = gtoolsEnv.SharedLibrary('lib/ifgtools',
        gtoolsSources)
    targetLibs += [gtoolsLib]

# programs
binEnv = toolsEnv.Clone()
binEnv.Append(LIBS = ['iftools'])

iftplBin = binEnv.Program('bin/iftpl',
    ['build/iftpl.cpp'])
ifpasswdBin = binEnv.Program('bin/ifpasswd',
    ['build/ifpasswd.cpp'])
ifdateBin = binEnv.Program('bin/ifdate',
    ['build/ifdate.cpp'])
iflsBin = binEnv.Program('bin/ifls',
    ['build/ifls.cpp'])

targetBins = [iftplBin, ifpasswdBin, ifdateBin, iflsBin]

# Core tests
testEnv = toolsEnv.Clone()
testEnv.Append(LIBS = ['iftools'])

tokenizerTest = testEnv.Program('test/bin/tokenizer',
    ['test/build/tokenizer.cpp'])
stringfilterTest = testEnv.Program('test/bin/stringfilter',
    ['test/build/stringfilter.cpp'])
datetimeTest = testEnv.Program('test/bin/datetime',
    ['test/build/datetime.cpp'])
treeTest = testEnv.Program('test/bin/tree',
    ['test/build/tree.cpp'])
treeresolverTest = testEnv.Program('test/bin/treeresolver',
    ['test/build/treeresolver.cpp'])
configtreeTest = testEnv.Program('test/bin/configtree',
    ['test/build/configtree.cpp'])
templateTest = testEnv.Program('test/bin/template',
    ['test/build/template.cpp'])
bz2compressTest = testEnv.Program('test/bin/bz2compress',
    ['test/build/bz2compress.cpp'])
packTest = testEnv.Program('test/bin/pack',
    ['test/build/pack.cpp'])
clargsTest = testEnv.Program('test/bin/clargs',
    ['test/build/clargs.cpp'])
tcpserverTest = testEnv.Program('test/bin/tcpserver',
    ['test/build/tcpserver.cpp'])
echoserverTest = testEnv.Program('test/bin/echoserver',
    ['test/build/echoserver.cpp'])
parsehexTest = testEnv.Program('test/bin/parsehex',
    ['test/build/parsehex.cpp'])
authfileTest = testEnv.Program('test/bin/authfile',
    ['test/build/authfile.cpp'])
tcpclientTest = testEnv.Program('test/bin/tcpclient',
    ['test/build/tcpclient.cpp'])
messageTest = testEnv.Program('test/bin/message',
    ['test/build/message.cpp'])
msgclientTest = testEnv.Program('test/bin/msgclient',
    ['test/build/msgclient.cpp'])
msgserverTest = testEnv.Program('test/bin/msgserver',
    ['test/build/msgserver.cpp'])
authclientTest = testEnv.Program('test/bin/authclient',
    ['test/build/authclient.cpp'])
authserverTest = testEnv.Program('test/bin/authserver',
    ['test/build/authserver.cpp'])
readdirTest = testEnv.Program('test/bin/readdir',
    ['test/build/readdir.cpp'])
explodeqTest = testEnv.Program('test/bin/explodeq',
    ['test/build/explodeq.cpp'])
numcheckTest = testEnv.Program('test/bin/numcheck',
    ['test/build/numcheck.cpp'])
treeexprTest = testEnv.Program('test/bin/treeexpr',
    ['test/build/treeexpr.cpp'])
treeevalTest = testEnv.Program('test/bin/treeeval',
    ['test/build/treeeval.cpp'])
combineTest = testEnv.Program('test/bin/combine',
    ['test/build/combine.cpp'])
nodeindexTest = testEnv.Program('test/bin/nodeindex',
    ['test/build/nodeindex.cpp'])
mergeTest = testEnv.Program('test/bin/merge',
    ['test/build/merge.cpp'])
toconfigTest = testEnv.Program('test/bin/toconfig',
    ['test/build/toconfig.cpp'])
urlencodeTest = testEnv.Program('test/bin/urlencode',
    ['test/build/urlencode.cpp'])
urldecodeTest = testEnv.Program('test/bin/urldecode',
    ['test/build/urldecode.cpp'])
utf8decodeTest = testEnv.Program('test/bin/utf8decode',
    ['test/build/utf8decode.cpp'])
utf8encodeTest = testEnv.Program('test/bin/utf8encode',
    ['test/build/utf8encode.cpp'])
utf8trimTest = testEnv.Program('test/bin/utf8trim',
    ['test/build/utf8trim.cpp'])
emailaddressTest = testEnv.Program('test/bin/emailaddress',
    ['test/build/emailaddress.cpp'])
databaseTest = testEnv.Program('test/bin/database',
    ['test/build/database.cpp'])
colorTest = testEnv.Program('test/bin/color',
    ['test/build/color.cpp'])
vector3Test = testEnv.Program('test/bin/vector3',
    ['test/build/vector3.cpp'])
matrix3Test = testEnv.Program('test/bin/matrix3',
    ['test/build/matrix3.cpp'])
validatepathTest = testEnv.Program('test/bin/validatepath',
    ['test/build/validatepath.cpp'])
utf8tokenizerTest = testEnv.Program('test/bin/utf8tokenizer',
    ['test/build/utf8tokenizer.cpp'])
utf8escapeTest = testEnv.Program('test/bin/utf8escape',
    ['test/build/utf8escape.cpp'])
utf8unescapeTest = testEnv.Program('test/bin/utf8unescape',
    ['test/build/utf8unescape.cpp'])
filelistTest = testEnv.Program('test/bin/filelist',
    ['test/build/filelist.cpp'])

targetTests = [tokenizerTest, stringfilterTest, datetimeTest, treeTest, 
    treeresolverTest, configtreeTest, templateTest, bz2compressTest, 
    packTest, clargsTest, tcpserverTest, echoserverTest, parsehexTest, 
    authfileTest, tcpclientTest, messageTest, msgclientTest, msgserverTest, 
    authclientTest, authserverTest, readdirTest, explodeqTest, numcheckTest, 
    treeexprTest, treeevalTest, combineTest, nodeindexTest, mergeTest, 
    toconfigTest, urlencodeTest, urldecodeTest, utf8decodeTest, 
    utf8encodeTest, utf8trimTest, emailaddressTest, databaseTest, 
    colorTest, vector3Test, matrix3Test, validatepathTest, utf8tokenizerTest, 
    utf8escapeTest, utf8unescapeTest, filelistTest]

# Glib utility tests.
if (buildGTools):
    gtestEnv = gtoolsEnv.Clone()
    gtestEnv.Append(LIBS = ['iftools', 'ifgtools'])
    
    gtcpclientTest = gtestEnv.Program('test/bin/gtcpclient',
        ['test/build/gtcpclient.cpp'])
    cairoTest = gtestEnv.Program('test/bin/cairo',
        ['test/build/cairo.cpp'])
    cairopathTest = gtestEnv.Program('test/bin/cairopath',
        ['test/build/cairopath.cpp'])
    
    targetTests += [gtcpclientTest, cairoTest, cairopathTest]

# Python module.
iftoolsWrapper = toolsEnv.SWIGPython(target = [ 'swig/iftools_wrap.cxx', 
        'swig/python/IFTools.py'], 
    source = 'swig/iftools.i')

iftoolsPyModuleEnv = toolsEnv.Clone()
iftoolsPyModuleEnv.Append(LIBS = ['iftools', 'python' + lc.pythonVersion],
    CPPPATH = ['include/ionflux'])

iftoolsPyModule = iftoolsPyModuleEnv.SharedLibrary(
    target = 'swig/python/_IFTools', 
    source = 'swig/iftools_wrap.cxx', SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

allHeaders = toolsHeaders + ['swig/iftools.i']

if (buildGTools):
    allHeaders += [gtoolsHeaders]

installHeaders = toolsEnv.Install(prefix + '/include/ionflux', allHeaders)
installLibs = toolsEnv.Install(prefix + '/lib', targetLibs)
installBins = toolsEnv.Install(prefix + '/bin', targetBins)
if (buildPyModule):
    installPyModule = env.Install(prefix + lc.pythonSitePackagesPath, 
        ['swig/python/IFTools.py', iftoolsPyModule])

allTargets = targetLibs + targetBins + targetTests
if (buildPyModule):
    allTargets += [iftoolsPyModule]

installTargets = [installHeaders, installLibs, installBins]
if (buildPyModule):
    installTargets += [installPyModule]

aliasLibs = Alias('libs', targetLibs)
aliasBins = Alias('programs', targetBins)
aliasTests = Alias('tests', targetTests)
aliasAll = Alias('all', allTargets)
aliasInstall = Alias('install', installTargets)
if (buildPyModule):
    aliasPyModule = Alias('pymodule', iftoolsPyModule)

Default('all')
