============================================================================
Ionflux Tools
Copyright (c) 2004 Joern P. Meier
mail@ionflux.org
----------------------------------------------------------------------------
ifta.txt              Ionflux Tools authenticated message protocol.
============================================================================

This file is part of Ionflux Tools.

Ionflux Tools is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at  your option)
any later version.

Ionflux Tools is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with Ionflux Tools; if not, write to the Free Software Foundation, 
Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

============================================================================

This document describes the Ionflux Tools authenticated message protocol 
(IFTA).

----------------------------------------------------------------------------
I. Overview
----------------------------------------------------------------------------

This protocol uses messages in a binary format as described in 
message-serialization.txt, which in turn use binary node data as described 
in node-serialization.txt. Node derialization allows an arbitrary number of 
named parameters to be transmitted in a message. Thus, each message defined 
for IFTA may contain an arbitrary number of named parameters, as named child 
nodes of the root node.

The root node will usually be named as the default node of a Tree ('<root>'), 
but root node parameters are not relevant for the protocol. However, names of 
child nodes are.

The protocol defines several messages which may be transmitted between client 
or server.

-----+-------------+-----+--------+-----------------------------------------
Auth | Message     | ID  | Type   | Description                             
-----+-------------+-----+--------+-----------------------------------------
-    | HELLO       | 101 | Client | Client announces connection request.    
-    | WELCOME     | 201 | Server | Server acknowledges connection request. 
yes  | AUTH        | 102 | Client | Client attempts to authenticate.
-    | AUTH_OK     | 202 | Server | Server acknowledges authentication.
-    | AUTH_FAILED | 401 | Client | Server rejects authentication.
-----+-------------+-----+--------+-----------------------------------------

The column 'Auth' specifies whether authentication data is to be used for 
the message. If yes, the full set of authentication data is used (i.e. 
username, password, session secret). This is handled transparently by the 
message serialization facility. See message-serialization.txt for details.

The protocol conversation begins with the client sending its username in a 
HELLO message. The server replies with a WELCOME message containing the 
session key. The client then sends an AUTH message using the authentication 
facility provided by the raw message protocol. If this message is verified 
by the server, it replies with an AUTH_OK message, otherwise the attempt 
fails with the server sending an AUTH_FAILED message. No more communication 
must be attempted after an AUTH_FAILED message has been sent.

----------------------------------------------------------------------------
II. Messages
----------------------------------------------------------------------------

101 HELLO
---------

Sent by the client to initiate an authentication request. After the server 
receives the username, it can obtain the user secret (password) from a 
local authentication facility.

Parameters:

----------------+-----------------------------------------------------------
Name            | Description
----------------+-----------------------------------------------------------
user            | The username.
----------------+-----------------------------------------------------------

201 WELCOME
-----------

Sent by the server in reply to the HELLO message. The WELCOME message 
contains a session secret which is randomly generated by the server on 
the beginning of each session or connection. It should not be reused on 
subsequent sessions or for multiple clients.

Parameters:

----------------+-----------------------------------------------------------
Name            | Description
----------------+-----------------------------------------------------------
sessionSecret   | A random sequence of bytes. *1
----------------+-----------------------------------------------------------

1) The default implementation uses a session secret of 20 randomly 
   generated bytes.

102 AUTH
--------

This message is sent by the client in reply to the AUTH message. It has no 
parameters, but must use the authentication facility of the message 
protocol, i.e. set the username, user secret (password) and session secret.
The server will then attempt to verify this message using the known values 
of the username, user secret and session secret.

202 AUTH_OK
-----------

Sent by the server if an AUTH message could be verified by the 
authentication facility using the known values of the username, password 
and session key. This message has an optional parameter 'status' which 
contains a human-readable welcome message.

----------------+-----------------------------------------------------------
Name            | Description
----------------+-----------------------------------------------------------
status          | Human-readable message.
----------------+-----------------------------------------------------------

401 AUTH_FAILED
---------------

Sent by the server if an AUTH message could not be verified. This message 
has an optional parameter 'status' which contains a human readable message 
telling the user what happened. An AUTH_FAILED message must not be sent 
unless the client has announced a connection request using the HELLO 
message.

----------------+-----------------------------------------------------------
Name            | Description
----------------+-----------------------------------------------------------
status          | Human-readable message.
----------------+-----------------------------------------------------------

After an AUTH_OK message has been received by a client, it can initiate 
normal, authenticated message communication. Otherwise, no more messages 
must be sent as part of the conversation.
