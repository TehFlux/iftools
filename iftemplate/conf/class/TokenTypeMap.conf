# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TokenTypeMap.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'Ionflux::ObjectBase::isOneOf'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"iftemplate/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<sstream>'
        '<cstdlib>'
        '"ifobject/utils.hpp"'
        '"iftemplate/constants.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TokenTypeMap
	shortDesc = Token type lookup map
	title = Token type lookup map
	longDesc = A lookup map for mapping bytes to token types.
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
}

# Member variables.
variable.protected[] = {
	type = Ionflux::Template::TokenType**
	name = typeMap
	desc = Token type lookup map
}
variable.protected[] = {
	type = Ionflux::Template::TokenTypePtrVector
	name = types
	desc = Token types
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = TYPE_MAP_SIZE
    desc = Size of token type lookup map
    value = 256
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = typeMap
        value = 0
    }
    impl = typeMap = new TokenType*[TYPE_MAP_SIZE];\
for (unsigned int i = 0; i < TYPE_MAP_SIZE; i++)\
    typeMap[i] = 0;
}

# Destructor.
destructor.impl = clear();\
if (typeMap != 0)\
    delete[] typeMap;\
typeMap = 0;

# Protected member functions.

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = void
	name = addTokenType
	shortDesc = Add token type
	longDesc = Add a token type to the map.
	param[] = {
	    type = const Ionflux::Template::TokenType&
	    name = newTokenType
	    desc = Token type to be added
	}
	impl = TokenType *newType = new TokenType;\
*newType = newTokenType;\
types.push_back(newType);\
unsigned char currentChar;\
if (!newType->invert)\
\{\
    // Add normal token to map.\
    for (unsigned int i = 0; i < newType->validChars.size(); i++)\
    \{\
        currentChar = newType->validChars[i];\
        if (typeMap[currentChar] != 0)\
        \{\
            // <---- DEBUG ----- //\
            cerr << "[TokenTypeMap::addTokenType] WARNING: "\
                "Possible conflict between token types "\
                << newType->typeID << " and " \
                << typeMap[currentChar]->typeID << " (char: '" \
                << currentChar << "')." << endl;\
            // ----- DEBUG ----> */\
        \}\
        typeMap[currentChar] = newType;\
    \}\
\} else\
\{\
    // Add inverted token to map.\
    for (unsigned int i = 0; i < TYPE_MAP_SIZE; i++)\
    \{\
        currentChar = static_cast<unsigned char>(i);\
        if ((typeMap[i] == 0)\
            && !isOneOf(currentChar, newType->validChars))\
            typeMap[i] = newType;\
    \}\
\}
}
function.public[] = {
	spec = virtual
	type = void
	name = removeTokenType
	shortDesc = Remove token type
	longDesc = Remove a token type from the map.
	param[] = {
	    type = const Ionflux::Template::TokenType&
	    name = removeTokenType
	    desc = Token type to be removed
	}
	impl = TokenType *trashType = 0;\
unsigned int trashIndex = 0;\
while ((trashType == 0) && (trashIndex < types.size()))\
\{\
    if ((types[trashIndex] != 0) \
        && (types[trashIndex]->typeID == removeTokenType.typeID))\
    \{\
        trashType = types[trashIndex];\
    \} else\
        trashIndex++;\
\}\
if (trashType == 0)\
    return;\
unsigned char currentChar;\
if (!(*trashType).invert)\
\{\
    // Remove normal token type from map.\
    for (unsigned int i = 0; i < trashType->validChars.size(); i++)\
    \{\
        currentChar = trashType->validChars[i];\
        typeMap[currentChar] = 0;\
    \}\
\} else\
\{\
    // Remove inverted token type from map.\
    for (unsigned int i = 0; i < TYPE_MAP_SIZE; i++)\
        if (typeMap[i] == trashType)\
            typeMap[i] = 0;\
\}\
delete types[trashIndex];\
types[trashIndex] = 0;\
types.erase(types.begin() + trashIndex);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::TokenType
	name = getTokenType
	const = true
	shortDesc = Get token type
	longDesc = Perform a token type lookup for the specified character.
	param[] = {
	    type = unsigned char
	    name = testChar
	    desc = Character to look up
	}
	impl = if (typeMap[testChar] == 0)\
    return TT_INVALID;
	return = {
	    value = *typeMap[testChar]
	    desc = The token type \c testChar belongs to, or TT_INVALID if \c testChar is not part of any valid token.
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = addTokenTypeAnything
	shortDesc = Add special token type 'anything'
	longDesc = Add special token type 'anything' to the map. The 'anything' token type matches any character that is not matched by another token in the current setup.\
\
\note If you have already added a token type 'anything', calling this function again will have no effect. In order to change the 'anything' token type, you will either have to remove the one you have added previously (by calling removeTokenType()) or clear the entire map (by calling clear()).
	param[] = {
	    type = const Ionflux::Template::TokenType&
	    name = newTokenType
	    desc = Token type to be added as special type 'anything'.
	}
	impl = TokenType *newType = new TokenType;\
*newType = newTokenType;\
/* Set 'invert' to 'true' to make sure the token type can be properly \
   removed. */\
newType->invert = true;\
types.push_back(newType);\
for (unsigned int i = 0; i < TYPE_MAP_SIZE; i++)\
    if (typeMap[i] == 0)\
        typeMap[i] = newType;
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear map
	longDesc = Clears all entries from the token type map.
	impl = if (typeMap != 0)\
    for (unsigned int i = 0; i < TYPE_MAP_SIZE; i++)\
        typeMap[i] = 0;\
for (unsigned int i = 0; i < types.size(); i++)\
{\
    if (types[i] != 0)\
        delete types[i];\
    types[i] = 0;\
}\
types.clear();
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumTokenTypes
	const = true
	shortDesc = Get number of token types
	longDesc = Get number of token types in the type map.
	impl = 
	return = {
	    value = types.size()
	    desc = Number of token types in the type map
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object.
	impl = ostringstream state;\
state << "TokenTypeMap";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

