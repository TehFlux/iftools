# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# StringManipulator.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = Template
namespace[].name = StringManipulator

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = StringManipulator
	shortDesc = String manipulator
	title = String manipulator
	longDesc = This is an abstract base class to encapsulate an object that manipulates byte strings (i.e. generates one string from another string). String manipulators can thus be used as function objects for constructing string filters.\
\
Each string manipulator should have an unique name by which it can be identified in a set of string manipulators. This name can be obtained with the getName() function.
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = std::string
	name = process
	shortDesc = Process byte string
	longDesc = Process a byte string.
	param[] = {
        type = const std::string&
        name = bytes
        desc = input bytes
	}
	param[] = {
        type = Ionflux::ObjectBase::StringVector*
        name = args
        desc = arguments
        default = 0
	}
	impl = 
	return = {
	    value = bytes
	    desc = Result of applying the string manipulator to the input bytes
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = operator()
	shortDesc = Process byte string
	longDesc = Process a byte string.
	param[] = {
        type = const std::string&
        name = bytes
        desc = input bytes
	}
	param[] = {
        type = Ionflux::ObjectBase::StringVector*
        name = args
        desc = arguments
        default = 0
	}
	impl = 
	return = {
	    value = process(bytes, args)
	    desc = Result of applying the string manipulator to the input bytes
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getManipName
	shortDesc = Get string manipulator name
	longDesc = Get the name of the string manipulator.
	impl = 
	return = {
	   value = "<unnamed>"
	   desc = Name of the string manipulator
	}
}

# Pure virtual member functions.

# operations

