# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Tokenizer.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'Ionflux::ObjectBase::isOneOf'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"iftemplate/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<sstream>'
        '<cstdlib>'
        '"ifobject/utils.hpp"'
        '"iftemplate/constants.hpp"'
        '"iftemplate/TokenTypeMap.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
    'class TokenTypeMap'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Tokenizer
	shortDesc = Tokenizer
	title = Tokenizer
	longDesc = A generic tokenizer for parsing byte strings. To set up a tokenizer, first create a Tokenizer object. This will be set up using the default token  types TT_WHITESPACE, TT_LINETERM and  TT_IDENTIFIER. You may then add your own custom token types and  optionally set up the TT_ANYTHING token type (which will match  anything not matched by previously defined token types). To enable  extraction of quoted strings and escaped characters, call  Tokenizer::setExtractQuoted() with \c true as an argument.\n To get a token from the token stream, call Tokenizer::getNextToken(). Make  sure your code handles the TT_NONE and TT_INVALID  special token types (which cannot be disabled). Tokenizer::getNextToken()  will always return TT_NONE at the end of the token stream and  TT_INVALID if an invalid token is encountered.
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
}

# Member variables.
variable.public[] = {
	type = Ionflux::Template::TokenType
	name = TT_ANYTHING
	desc = Token type: Anything (special)
}
variable.protected[] = {
	type = std::string
	name = theInput
	desc = The input string to be parsed
}
variable.protected[] = {
	type = Ionflux::Template::Token
	name = currentToken
	desc = Current token
}
variable.protected[] = {
	type = bool
	name = extractQuoted
	desc = Extract quoted strings flag
}
variable.protected[] = {
	type = bool
	name = extractEscaped
	desc = Extract escaped characters flag
}
variable.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = currentPos
	desc = Current parsing position in the input string
}
variable.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = currentTokenPos
	desc = Position of current token in the input string
}
variable.protected[] = {
	type = char
	setFromType = char
	name = currentQuoteChar
	desc = Quote character
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Template::TokenTypeMap*
	setFromType = Ionflux::Template::TokenTypeMap*
	name = typeMap
	desc = Token type map
	managed = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = theInput
        value = ""
    }
    initializer[] = {
        name = currentToken
        value = TOK_NONE
    }
    initializer[] = {
        name = extractQuoted
        value = false
    }
    initializer[] = {
        name = extractEscaped
        value = false
    }
    initializer[] = {
        name = currentPos
        value = 0
    }
    initializer[] = {
        name = currentTokenPos
        value = 0
    }
    initializer[] = {
        name = currentQuoteChar
        value = 0
    }
    initializer[] = {
        name = typeMap
        value = 0
    }
    impl = setTypeMap(TokenTypeMap::create());\
useDefaultTokenTypes();
}
constructor.public[] = {
    initializer[] = {
        name = theInput
        value = initInput
    }
    initializer[] = {
        name = currentToken
        value = TOK_NONE
    }
    initializer[] = {
        name = extractQuoted
        value = false
    }
    initializer[] = {
        name = extractEscaped
        value = false
    }
    initializer[] = {
        name = currentPos
        value = 0
    }
    initializer[] = {
        name = currentTokenPos
        value = 0
    }
    initializer[] = {
        name = currentQuoteChar
        value = 0
    }
    initializer[] = {
        name = typeMap
        value = 0
    }
    param[] = {
        type = const std::string&
        name = initInput
        desc = input string to be parsed
    }
    impl = setTypeMap(TokenTypeMap::create());\
useDefaultTokenTypes();
}
constructor.public[] = {
    initializer[] = {
        name = theInput
        value = ""
    }
    initializer[] = {
        name = currentToken
        value = TOK_NONE
    }
    initializer[] = {
        name = extractQuoted
        value = false
    }
    initializer[] = {
        name = extractEscaped
        value = false
    }
    initializer[] = {
        name = currentPos
        value = 0
    }
    initializer[] = {
        name = currentTokenPos
        value = 0
    }
    initializer[] = {
        name = currentQuoteChar
        value = 0
    }
    initializer[] = {
        name = typeMap
        value = 0
    }
    param[] = {
        type = const Ionflux::Template::TokenTypeVector&
        name = initTokenTypes
        desc = token types to be recognized by the tokenizer
    }
    impl = setTypeMap(TokenTypeMap::create());\
setTokenTypes(initTokenTypes);
}
constructor.public[] = {
    initializer[] = {
        name = theInput
        value = initInput
    }
    initializer[] = {
        name = currentToken
        value = TOK_NONE
    }
    initializer[] = {
        name = extractQuoted
        value = false
    }
    initializer[] = {
        name = extractEscaped
        value = false
    }
    initializer[] = {
        name = currentPos
        value = 0
    }
    initializer[] = {
        name = currentTokenPos
        value = 0
    }
    initializer[] = {
        name = currentQuoteChar
        value = 0
    }
    initializer[] = {
        name = typeMap
        value = 0
    }
    param[] = {
        type = const Ionflux::Template::TokenTypeVector&
        name = initTokenTypes
        desc = token types to be recognized by the tokenizer
    }
    param[] = {
        type = const std::string&
        name = initInput
        desc = input string to be parsed
    }
    impl = setTypeMap(TokenTypeMap::create());\
setTokenTypes(initTokenTypes);
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = if (this == &other)\
    return *this;\
reset();\
setTypeMap(other.typeMap);\
setInput(other.theInput);\
setExtractQuoted(other.extractQuoted);\
setExtractEscaped(other.extractEscaped);
function.public[] = {
	spec = virtual
	type = void
	name = clearTokenTypes
	shortDesc = Clear token types
	longDesc = Removes all token types from the set of recognized token types.\
\
\note Special token types will still be available to the tokenizer. You can always restore the default set of token types with useDefaultTokenTypes().\
\
\sa useDefaultTokenTypes()
	impl = if (typeMap == 0)\
    throw IFTemplateError("[Tokenizer::clearTokenTypes] "\
        "Token type map is null.");\
typeMap->clear();
}
function.public[] = {
	spec = virtual
	type = void
	name = useDefaultTokenTypes
	shortDesc = Use default token types
	longDesc = Initializes the set of recognized token types with the default token types.
	impl = if (typeMap == 0)\
    throw IFTemplateError("[Tokenizer::useDefaultTokenTypes] "\
        "Token type map is null.");\
typeMap->clear();\
typeMap->addTokenType(TT_WHITESPACE);\
typeMap->addTokenType(TT_LINETERM);\
typeMap->addTokenType(TT_IDENTIFIER);
}
function.public[] = {
	spec = virtual
	type = void
	name = setTokenTypes
	shortDesc = Set token types
	longDesc = Set the set of token types recognized by this tokenizer.\
\
\note The special token types are always available, regardless of whether they are added or not.
    param[] = {
        type = const Ionflux::Template::TokenTypeVector&
        name = newTokenTypes
        desc = token types to be recognized by the tokenizer
    }
	impl = typeMap->clear();\
addTokenTypes(newTokenTypes);
}
function.public[] = {
	spec = virtual
	type = void
	name = addTokenType
	shortDesc = Add a token type
	longDesc = Adds a token type (possibly user defined) to the set of token types recognized by this tokenizer.
    param[] = {
        type = const Ionflux::Template::TokenType&
        name = newTokenType
        desc = token type to be added
    }
	impl = typeMap->addTokenType(newTokenType);
}
function.public[] = {
	spec = virtual
	type = void
	name = addTokenTypes
	shortDesc = Add token types
	longDesc = Adds token types (possibly user defined) to the set of token types recognized by the tokenizer.
    param[] = {
        type = const Ionflux::Template::TokenTypeVector&
        name = newTokenTypes
        desc = token types to be recognized by the tokenizer
    }
	impl = for(TokenTypeVector::const_iterator i = newTokenTypes.begin();\
    i != newTokenTypes.end(); i++)\
        addTokenType(*i);
}
function.public[] = {
	spec = virtual
	type = void
	name = setInput
	shortDesc = Set input
	longDesc = Sets the input string to be parsed.
    param[] = {
        type = const std::string&
        name = newInput
        desc = input string to be parsed
    }
	impl = theInput = newInput;\
reset();
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::Token
	name = getNextToken
	shortDesc = Get next token
	longDesc = Parse the input string and get the next token.
    param[] = {
        type = const Ionflux::Template::TokenTypeMap&
        name = otherMap
        desc = token type map to be used for extracting the next token
    }
	impl = if ((currentPos >= theInput.size()) || (otherMap.getNumTokenTypes() == 0))\
    return TOK_NONE;\
unsigned int maxChars;\
unsigned int tokenChars;\
currentToken = TOK_INVALID;\
TokenType currentTokenType = TT_INVALID;\
char quoteChar = 0;\
currentQuoteChar = 0;\
if (extractEscaped && (theInput[currentPos] == ESCAPE_CHAR))\
\{\
    // Extract escaped characters.\
    currentPos++;\
    if (currentPos < theInput.size())\
        // Append quoted character.\
        currentToken.value.append(1, theInput[currentPos]);\
    currentToken.typeID = TT_ESCAPED.typeID;\
    currentPos++;\
    return currentToken;\
\}\
if (extractQuoted)\
\{\
    // Extract quoted strings.\
    while((currentPos < theInput.size())\
        && ((theInput[currentPos] == ESCAPE_CHAR)\
            || isOneOf(theInput[currentPos], QUOTE_CHARS, false)\
            || (quoteChar != 0)))\
    \{\
        if (theInput[currentPos] == ESCAPE_CHAR)\
        \{\
            currentPos++;\
            if (currentPos < theInput.size())\
            \{\
                /* Append quoted character.\
                   TODO: Expansion of quoted characters should be \
                   C++-compatible. This should be implemented more \
                   elegantly as well. */\
                if (theInput[currentPos] == 'n')\
                    currentToken.value.append(1, '\n');\
                else\
                if (theInput[currentPos] == 't')\
                    currentToken.value.append(1, '\t');\
                else\
                if (theInput[currentPos] == 'v')\
                    currentToken.value.append(1, '\v');\
                else\
                if (theInput[currentPos] == 'b')\
                    currentToken.value.append(1, '\b');\
                else\
                if (theInput[currentPos] == 'r')\
                    currentToken.value.append(1, '\r');\
                else\
                if (theInput[currentPos] == 'f')\
                    currentToken.value.append(1, '\f');\
                else\
                if (theInput[currentPos] == 'a')\
                    currentToken.value.append(1, '\a');\
                else\
                    currentToken.value.append(1, theInput[currentPos]);\
            \}\
            if (quoteChar == 0)\
            \{\
                // Escaped character outside of quoted string.\
                currentToken.typeID = TT_ESCAPED.typeID;\
                currentPos++;\
                return currentToken;\
            \}\
        \} else\
        if (isOneOf(theInput[currentPos], QUOTE_CHARS, false))\
        \{\
            if (quoteChar == 0)\
            \{\
                // Open quoted string.\
                quoteChar = theInput[currentPos];\
                currentQuoteChar = quoteChar;\
            \} else\
            if (theInput[currentPos] == quoteChar)\
            \{\
                // Close quoted string.\
                quoteChar = 0;\
                currentToken.typeID = TT_QUOTED.typeID;\
                currentPos++;\
                return currentToken;\
            \} else\
                // Append mismatched quote.\
                currentToken.value.append(1, theInput[currentPos]);\
        \} else\
        \{\
            // Append anything else.\
            currentToken.value.append(1, theInput[currentPos]);\
        \}\
        currentPos++;\
    \}\
    if (quoteChar != 0)\
    \{\
        // Closing quote missing.\
        currentQuoteChar = 0;\
        return TOK_INVALID;\
    \}\
\}\
// Extract other tokens.\
if (currentPos >= theInput.size())\
    return TOK_NONE;\
currentTokenType = otherMap.getTokenType(theInput[currentPos]);\
if (currentTokenType.typeID != TT_INVALID.typeID)\
\{\
    currentTokenPos = currentPos;\
    currentToken.typeID = currentTokenType.typeID;\
    if (currentTokenType.maxChars > 0)\
        maxChars = currentTokenType.maxChars;\
    else\
        maxChars = theInput.size();\
    tokenChars = 0;\
    while((currentPos < theInput.size()) \
        && (otherMap.getTokenType(theInput[currentPos]).typeID \
            == currentTokenType.typeID)\
        && (tokenChars < maxChars)\
        && (!extractQuoted \
            || !isOneOf(theInput[currentPos], QUOTE_CHARS, false))\
        && (!extractEscaped\
            || (theInput[currentPos] != ESCAPE_CHAR)))\
    \{\
        currentToken.value.append(1, theInput[currentPos]);\
        currentPos++;\
        tokenChars++;\
    \}\
\}
	return = {
	    value = currentToken
	    desc = the next token from the current input
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::Token
	name = getNextToken
	shortDesc = Get next token
	longDesc = Parse the input string and get the next token.
	impl = 
	return = {
	    value = getNextToken(*typeMap)
	    desc = the next token from the current input
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::Token
	name = getCurrentToken
	shortDesc = Get current token
	longDesc = Get the current token.
	impl = 
	return = {
	    value = currentToken
	    desc = the current token
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::TokenTypeID
	name = getCurrentTokenType
	shortDesc = Get type of current token
	longDesc = Get the type of the current token.
	impl = 
	return = {
	    value = currentToken.typeID
	    desc = the type of the current token
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = reset
	shortDesc = Reset the parser
	longDesc = Reset the parser so the input can be parsed again from the beginning.
	impl = currentPos = 0;\
currentTokenPos = 0;\
currentQuoteChar = 0;\
currentToken = TOK_NONE;
}
function.public[] = {
	spec = virtual
	type = void
	name = setTokenTypeAnything
	shortDesc = Set special token type TT_ANYTHING
	longDesc = This sets up a special token type TT_ANYTHING that will match any characters not matched by any of the previously defined token types.\
\
\note You may call this again to update TT_ANYTHING if you add further token types after a call to setTokenTypeAnything().
	impl = TT_ANYTHING.typeID = TT_ID_ANYTHING;\
TT_ANYTHING.validChars = "";\
TT_ANYTHING.invert = true;\
TT_ANYTHING.maxChars = 0;\
typeMap->removeTokenType(TT_ANYTHING);\
typeMap->addTokenTypeAnything(TT_ANYTHING);
}
function.public[] = {
	spec = virtual
	type = void
	name = setExtractQuoted
	shortDesc = Set quoted string extraction flag
	longDesc = Pass \c true to this function to enable extraction of quoted strings (and escaped characters), or disable this feature by passing \c false.\
\
\note If you enable extraction of quoted strings, you should make sure that your code handles the TT_QUOTED and TT_ESCAPED special token types.
    param[] = {
        type = bool
        name = newExtractQuoted
        desc = Whether to extract quoted strings
    }
	impl = extractQuoted = newExtractQuoted;
}
function.public[] = {
	spec = virtual
	type = void
	name = setExtractEscaped
	shortDesc = Set escaped character extraction flag
	longDesc = Pass \c true to this function to enable extraction of escaped characters, or disable this feature by passing \c false.\
\
\note If you enable extraction of escaped characters, you should make sure that your code handles the TT_ESCAPED special token type. If you have enabled quoted string extraction, escaped character extraction will also be enabled by default (and cannot be disabled).
    param[] = {
        type = bool
        name = newExtractEscaped
        desc = Whether to extract escaped characters
    }
	impl = extractEscaped = newExtractEscaped;
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getCurrentPos
	shortDesc = Get current position
	longDesc = Get the current parsing position relative to the first character of the input string.
	impl = 
	return = {
	    value = currentPos
	    desc = current parsing position
	}
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getCurrentTokenPos
	shortDesc = Get position of current token
	longDesc = Get the position of the current token relative to the first character of the input string.
	impl = 
	return = {
	    value = currentTokenPos
	    desc = position of current token
	}
}
function.public[] = {
	spec = virtual
	type = char
	name = getQuoteChar
	shortDesc = Get quote character
	longDesc = Get the quote character of a quoted string.
	impl = 
	return = {
	    value = currentQuoteChar
	    desc = Quote character of the current token if this token is a quoted string, or 0, if the current token is not a quoted string
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object.
	impl = ostringstream state;\
state << "Tokenizer";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

