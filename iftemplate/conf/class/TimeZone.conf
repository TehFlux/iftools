# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TimeZone.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '"iftemplate/constants.hpp"'
	    '"iftemplate/types.hpp"'
	    '"iftemplate/DateTime.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '<fstream>'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TimeZone
	shortDesc = Time zone
	title = Time zone
	longDesc = <<<
Provides information required for the time zone transformation of datetimes, such as UTC offset and DST switching rules.
>>>
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
    create = {
        extendedCreate = true
        allocationError = IFTemplateError("Could not allocate object.")
    }
}

# Member variables.
variable.protected[] = {
    type = bool
    name = useDST
    desc = DST flag (true if DST rules are defined)
}
variable.protected[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = toDST
    desc = Rule for switching to DST
}
variable.protected[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = toNormal
    desc = Rule for switching to normal time
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = int
    setFromType = int
    name = offset
    desc = UTC offset (minutes)
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = nameNormal
    desc = Name of the time zone (normal time)
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = nameDST
    desc = Name of the time zone (DST)
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = shortNameNormal
    desc = Short name of the time zone (normal time)
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = shortNameDST
    desc = Short name of the time zone (DST)
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = aliases
    desc = Alias names for the time zone
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_DST_EUROPE_WESTERN
    desc = DST switching rule: Europe/Western (to DST)
    value = \{\
	Ionflux::Template::DSTSwitchingRule::DSR_TYPE_TO_DST, \
        3, 0, 5, 1, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_NORMAL_EUROPE_WESTERN
    desc = DST switching rule: Europe/Western (to normal)
    value = \{\
	Ionflux::Template::DSTSwitchingRule::DSR_TYPE_TO_NORMAL, \
	    10, 0, 5, 2, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_DST_EUROPE_CENTRAL
    desc = DST switching rule: Europe/central (to DST)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_DST, \
	    3, 0, 5, 2, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_NORMAL_EUROPE_CENTRAL
    desc = DST switching rule: Europe/central (to normal)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_NORMAL, \
	    10, 0, 5, 3, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_DST_EUROPE_EASTERN
    desc = DST switching rule: Europe/eastern (to DST)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_DST, \
	    3, 0, 5, 3, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_NORMAL_EUROPE_EASTERN
    desc = DST switching rule: Europe/eastern (to normal)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_NORMAL, \
	    10, 0, 5, 4, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_DST_USA
    desc = DST switching rule: USA (to DST)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_DST, \
	    3, 0, 2, 2, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_NORMAL_USA
    desc = DST switching rule: USA (to normal)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_NORMAL, \
	    11, 0, 1, 2, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_DST_EGYPT
    desc = DST switching rule: Egypt (to DST)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_DST, \
	    4, 5, 5, 0, 0, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::DSTSwitchingRule
    name = DSR_TO_NORMAL_EGYPT
    desc = DST switching rule: Egypt (to normal)
    value = \{\
	DSTSwitchingRule::DSR_TYPE_TO_NORMAL, \
	    10, 5, 1, 0, 0, 0 \}
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = useDST
        value = false
    }
     initializer[] = {
        name = offset
        value = 0
    }
   impl = 
}
constructor.public[] = {
    initializer[] = {
        name = useDST
        value = false
    }
     initializer[] = {
        name = offset
        value = initOffset
    }
    param[] = {
        type = int
        name = initOffset
        desc = offset
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = useDST
        value = true
    }
    initializer[] = {
        name = toDST
        value = initToDST
    }
    initializer[] = {
        name = toNormal
        value = initToNormal
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    param[] = {
        type = int
        name = initOffset
        desc = offset
    }
    param[] = {
        type = const Ionflux::Template::DSTSwitchingRule&
        name = initToDST
        desc = switching rule (to DST)
    }
    param[] = {
        type = const Ionflux::Template::DSTSwitchingRule&
        name = initToNormal
        desc = switching rule (to normal time)
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = useDST
        value = true
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = nameNormal
        value = initNameNormal
    }
    initializer[] = {
        name = nameDST
        value = initNameDST
    }
    initializer[] = {
        name = shortNameNormal
        value = initShortNameNormal
    }
    initializer[] = {
        name = shortNameDST
        value = initShortNameDST
    }
    initializer[] = {
        name = aliases
        value = initAliases
    }
    param[] = {
        type = int
        name = initOffset
        desc = offset
    }
    param[] = {
        type = const std::string&
        name = initNameNormal
        desc = time zone name (normal time)
    }
    param[] = {
        type = const std::string&
        name = initNameDST
        desc = time zone name (DST)
    }
    param[] = {
        type = const std::string&
        name = initShortNameNormal
        desc = time zone short name (normal time)
    }
    param[] = {
        type = const std::string&
        name = initShortNameDST
        desc = time zone short name (DST)
    }
    param[] = {
        type = const std::string&
        name = initAliases
        desc = time zone alias names
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = useDST
        value = true
    }
    initializer[] = {
        name = toDST
        value = initToDST
    }
    initializer[] = {
        name = toNormal
        value = initToNormal
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = nameNormal
        value = initNameNormal
    }
    initializer[] = {
        name = nameDST
        value = initNameDST
    }
    initializer[] = {
        name = shortNameNormal
        value = initShortNameNormal
    }
    initializer[] = {
        name = shortNameDST
        value = initShortNameDST
    }
    initializer[] = {
        name = aliases
        value = initAliases
    }
    param[] = {
        type = int
        name = initOffset
        desc = offset
    }
    param[] = {
        type = const Ionflux::Template::DSTSwitchingRule&
        name = initToDST
        desc = switching rule (to DST)
    }
    param[] = {
        type = const Ionflux::Template::DSTSwitchingRule&
        name = initToNormal
        desc = switching rule (to normal time)
    }
    param[] = {
        type = const std::string&
        name = initNameNormal
        desc = time zone name (normal time)
    }
    param[] = {
        type = const std::string&
        name = initNameDST
        desc = time zone name (DST)
    }
    param[] = {
        type = const std::string&
        name = initShortNameNormal
        desc = time zone short name (normal time)
    }
    param[] = {
        type = const std::string&
        name = initShortNameDST
        desc = time zone short name (DST)
    }
    param[] = {
        type = const std::string&
        name = initAliases
        desc = time zone alias names
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
useDST = other.useDST;
toDST = other.toDST;
toNormal = other.toNormal;
offset = other.offset;
nameNormal = other.nameNormal;
nameDST = other.nameDST;
shortNameNormal = other.shortNameNormal;
shortNameDST = other.shortNameDST;
aliases = other.aliases;
>>>
function.public[] = {
    spec = virtual
    type = void
    name = setDSTRules
	shortDesc = Set DST switching rules
	longDesc = Sets the daylight saving time switching rules.
	param[] = {
	    type = const Ionflux::Template::DSTSwitchingRule&
	    name = newToDST
	    desc = Rule for switching to DST
	}
	param[] = {
	    type = const Ionflux::Template::DSTSwitchingRule&
	    name = newToNormal
	    desc = Rule for switching to normal time
	}
	impl = <<<
toDST = newToDST;
toNormal = newToNormal;
useDST = true;
>>>
}
function.public[] = {
    spec = virtual
    type = bool
    name = isDST
    const = true
	shortDesc = Get current DST state (UTC)
	longDesc = <<<
Get current DST state of an UTC datetime in this time zone.

\note This function is meant for time zone conversion only. If you require this function for a local time instead of UTC, you should use the function DateTime::isDST() instead.
>>>
	param[] = {
	    type = const Ionflux::Template::DateTime&
	    name = utcDT
	    desc = datetime object
	}
	impl = <<<
if (useDST)
{
    DateTime toDstDT = getSwitchDT(utcDT.getYear(), toDST);
    DateTime toNormalDT = getSwitchDT(utcDT.getYear(), toNormal);
    if ((utcDT >= toDstDT) && (utcDT < toNormalDT))
        return true;
}
>>>
	return = {
	    value = false
	    desc = \c true if the specified UTC datetime represents daylight saving time in this time zone, \c false otherwise
	}
}
function.public[] = {
    spec = virtual
    type = bool
    name = localIsDST
    const = true
	shortDesc = Get current DST state (local time)
	longDesc = <<<
Get current DST state of a local datetime in this time zone.

\note DST state for local time is ambiguous during one hour of the year, i.e. when switching from DST to normal time occurs. This function will prefer normal time to DST in this case. Likewise, there is one hour during the year that is skipped, i.e. when switching from normal time to DST occurs. Datetimes in the range of this hour are not valid. If an invalid datetime is specified, the behavior is undefined. Also note that the timezone of \c localDT, if set at all, will be ignored. Whatever time is stored in \c localDT will be treated as local time in the time zone of the TimeZone object.
>>>
	param[] = {
	    type = const Ionflux::Template::DateTime&
	    name = localDT
	    desc = datetime object
	}
	impl = <<<
DateTime toDstDT = getSwitchDT(localDT.getYear(), toDST);
DateTime toNormalDT = getSwitchDT(localDT.getYear(), toNormal);
// Calculate the UTC datetimes for both possible cases.
DateTime utcNormal = localDT - static_cast<TimeTicks>(offset * 60);
DateTime utcDST = localDT - static_cast<TimeTicks>((offset + 1) * 60);
/* The idea goes as follows: If utcDST is greater than or equal to 
   toDstDT, utcNormal will be greater as well. Likewise, if utcNormal is 
   less than toNormalDT, utcDST will be less as well. So, if the condition 
   evaluates to 'true', we can safely assume that the local datetime 
   represents DST. (However, in the case of the one local hour that occurs 
   as normal time as well as as DST, the second subcondition will always 
   evaluate to 'false', thus normal time is preferred over DST in that 
   case.) */
if ((utcDST >= toDstDT) && (utcNormal < toNormalDT))
    return true;
>>>
	return = {
	    value = false
	    desc = \c true if the specified local datetime represents daylight saving time in this time zone, \c false otherwise
	}
}
function.public[] = {
    spec = virtual
    type = int
    name = getCurrentOffset
    const = true
	shortDesc = Get current UTC offset
	longDesc = <<<
Get the UTC offset, in minutes, corrected for DST, for the local time corresponding to the specified UTC DateTime.

\note This function is meant for time zone conversion only. If you require this function for a local time instead of UTC, you should use the function DateTime::getUTCOffset() instead.
>>>
	param[] = {
	    type = const Ionflux::Template::DateTime&
	    name = utcDT
	    desc = datetime object
	}
	impl = <<<
int currentOffset = offset;
if (useDST)
{
    DateTime toDstDT = getSwitchDT(utcDT.getYear(), toDST);
    DateTime toNormalDT = getSwitchDT(utcDT.getYear(), toNormal);
    if ((utcDT >= toDstDT) && (utcDT < toNormalDT))
        currentOffset += 60;
}
>>>
	return = {
	    value = currentOffset
	    desc = The current UTC offset, in minutes
	}
}
function.public[] = {
    spec = virtual
    type = const Ionflux::Template::DSTSwitchingRule*
    name = getDSTRule
    const = true
	shortDesc = Get DST rule
	longDesc = <<<
Return one of the DST rules for this time zone.
>>>
	param[] = {
	    type = bool
	    name = ruleFlag
	    desc = Which rule to return
	}
	impl = <<<
if (useDST)
{
    if (ruleFlag)
        return &toDST;
    else
        return &toNormal;
}
>>>
	return = {
	    value = 0
	    desc = The rule for switching to DST if \c true is passed, the rule for switching to normal time if \c false is passed and 0 if no rules are defined
	}
}
function.public[] = {
    spec = virtual
    type = Ionflux::Template::DateTime
    name = getSwitchDT
    const = true
	shortDesc = Get switch date
	longDesc = <<<
Creates an exact switch date (UTC) from a DST switching rule for the specified year.
>>>
	param[] = {
	    type = Ionflux::Template::Year
	    name = year
	    desc = The year which to apply the DST switching rule to
	}
	param[] = {
	    type = const Ionflux::Template::DSTSwitchingRule&
	    name = rule
	    desc = The DST switching rule to apply
	}
	impl = <<<
DateTime result(DateTime::getNth(year, rule.month, rule.weekDay, 
    rule.week));
int currentOffset = offset;
if (rule.type == DSTSwitchingRule::DSR_TYPE_TO_NORMAL)
    currentOffset += 60;
result += ((rule.hour * 60 + rule.minute - currentOffset) * 60 
    + rule.second);
>>>
	return = {
	    value = result
	    desc = Datetime where the switching from or to DST occurs
	}
}
function.public[] = {
    spec = virtual
    type = bool
    name = hasAlias
    const = true
	shortDesc = Check alias name
	longDesc = <<<
Checks whether this time zone has a specified alias name.
>>>
	param[] = {
	    type = const std::string&
	    name = checkAlias
	    desc = alias name
	}
	impl = <<<
string tmpAliases(":");
string tmpCheckAlias(":");
tmpAliases.append(aliases + ":");
tmpCheckAlias.append(checkAlias + ":");
if (tmpAliases.find(tmpCheckAlias) != string::npos)
    return true;
>>>
	return = {
	    value = false
	    desc = \c true if this time zone has the specified alias name, \c false otherwise
	}
}
function.public[] = {
    spec = virtual
    type = void
    name = enableDST
	shortDesc = Enable or disable DST
	longDesc = <<<
Sets whether to apply daylight saving time switching rules. Passing \c true enables DST (if rules are defined), passing \c false disables DST.
>>>
	param[] = {
	    type = bool
	    name = enableFlag
	    desc = New DST state
	}
	impl = useDST = enableFlag;
}

# Pure virtual member functions.

# static member functions

