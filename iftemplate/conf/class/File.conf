# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# File.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '<sys/stat.h>'
	    '"iftemplate/constants.hpp"'
	    '"iftemplate/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '<fstream>'
        '"ifobject/utils.hpp"'
        '"iftemplate/utils.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = File
	shortDesc = File
	title = File
	longDesc = <<<
A file on a filesystem.
>>>
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
    create = {
        extendedCreate = true
        allocationError = IFTemplateError("Could not allocate object.")
    }
}

# Member variables.
variable.protected[] = {
    type = struct stat
    name = statInfo
    desc = Information returned by stat
}
variable.protected[] = {
    type = bool
    name = valid
    desc = Validity flag
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::ObjectBase::UInt64
    setFromType = Ionflux::ObjectBase::UInt64
    name = fileSize
    desc = File size
    readOnly = true
}
property.protected[] = {
    type = time_t
    setFromType = time_t
    name = accessTime
    desc = Time of last access
    readOnly = true
}
property.protected[] = {
    type = time_t
    setFromType = time_t
    name = modTime
    desc = Time of last modification
    readOnly = true
}
property.protected[] = {
    type = time_t
    setFromType = time_t
    name = changeTime
    desc = Time of last change
    readOnly = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = name
    desc = File name
    impl.set = <<<
name = newName;
fullName = "";
update();
>>>
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = path
    desc = File path
    impl.set = <<<
path = newPath;
fullName = "";
update();
>>>
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = fullName
    desc = Full name of file (including path)
    impl.set = <<<
fullName = newFullName;
name = "";
path = "";
update();
>>>
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = baseName
    desc = Base name
    readOnly = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = extension
    desc = File name extension
    readOnly = true
}
property.protected[] = {
    style = vector
    name = children
    desc = Child file vector
    element = {
        type = Ionflux::Template::File*
        name = File
        #plural = Files
        managed = true
        createExpr = create();
    }
    protectedWrite = true
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = valid
        value = false
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = valid
        value = false
    }
    param[] = {
        type = const std::string&
        name = initFullName
        desc = Full name of file (including path)
    }
    impl = setFullName(initFullName);
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.copy.impl = <<<
if (this == &other)
    return;
setFullName(other.fullName);
>>>
function.protected[] = {
	spec = virtual
	type = bool
	name = updateStatInfo
	shortDesc = Update stat information
	longDesc = <<<
Update the file information obtained from \c stat.
>>>
	impl = <<<
fileSize = 0;
accessTime = 0;
modTime = 0;
changeTime = 0;
statInfo.st_size = 0;
statInfo.st_atime = 0;
statInfo.st_mtime = 0;
statInfo.st_ctime = 0;
if (fullName.size() == 0)
    throw IFTemplateError(getErrorString(
        "File name not set", "updateStatInfo"));
int result = stat(fullName.c_str(), &statInfo);
if (result == -1)
{
    /* ----- DEBUG ----- //
    cerr << "[File::updateStatInfo] DEBUG: Stat failed for '" 
        << fullName << "'." << endl;
    // ----- DEBUG ----- */
    valid = false;
    return false;
}
fileSize = statInfo.st_size;
accessTime = statInfo.st_atime;
modTime = statInfo.st_mtime;
changeTime = statInfo.st_ctime;
valid = true;
>>>
	return = {
	    value = true
	    desc = \c true on success, \c false otherwise
	}
}

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update file information
	longDesc = Update the information record for this file.
	impl = <<<
if ((fullName.size() == 0) 
    && (name.size() == 0) 
    && (path.size() == 0))
    return;
std::string dirSep;
if (fullName.size() == 0)
{
    // Set full name from name and path.
    if (path.size() == 0)
    {
        fullName = name;
        path = ".";
    } else
    {
        if (path[path.size() - 1] != DIR_SEPARATOR)
            dirSep = DIR_SEPARATOR;
        else
        {
            path = path.substr(0, path.size() - 1);
            dirSep = "";
        }
        fullName = path + dirSep + name;
    }
} else
{
    // Set name and path from full name.
    unsigned int sepPos = fullName.size() - 1;
    while ((sepPos > 0) 
        && (fullName[sepPos] != DIR_SEPARATOR))
        sepPos--;
    if (sepPos == 0)
    {
        name = fullName;
        path = ".";
    } else
    {
        int nameSize = fullName.size() - sepPos - 1;
        int pathSize = sepPos;
        if (nameSize > 0)
            name = fullName.substr(sepPos + 1, nameSize);
        else
            name = "";
        path = fullName.substr(0, pathSize);
    }
}
// Update base name and extension.
if (name.size() == 0)
    throw IFTemplateError(getErrorString(
        "File name size is zero.", "update"));
int sepPos = name.size() - 1;
while ((sepPos >= 0) 
    && (name[sepPos] != FILE_EXT_SEPARATOR))
    sepPos--;
if (sepPos < 0)
{
    baseName = name;
    extension = "";
} else
{
    int baseNameSize = sepPos;
    int extSize = name.size() - sepPos;
    if (baseNameSize > 0)
        baseName = name.substr(0, sepPos);
    else
        baseName = "";
    extension = name.substr(sepPos, extSize);
}
updateStatInfo();
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = isValid
	const = true
	shortDesc = Check validity
	longDesc = Check whether the file is valid.
	impl = 
	return = {
	    value = valid
	    desc = \c true if the file is valid, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isDir
	const = true
	shortDesc = Get directory status
	longDesc = Check whether the file is a directory.
	impl = if (isValid() && S_ISDIR(statInfo.st_mode))\
    return true;
	return = {
	    value = false
	    desc = \c true if the file is a directory, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = readDir
	shortDesc = Read directory
	longDesc = If this file is a directory, read the directory contents. This adds one child file per contained file to the file object. If \c recursive is set to \c true, a hierarchy of files is generated. The \c maxDepth parameter can be used to limit the recursion depth.
	param[] = {
	    type = bool
	    name = recursive
	    desc = read directories recursively
	    default = false
	}
	param[] = {
	    type = unsigned int
	    name = maxDepth
	    desc = maximum recursion depth
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = depth
	    desc = current depth
	    default = 0
	}
	impl = <<<
if (!isDir())
    return;
if (recursive 
    && (maxDepth > 0) 
    && (depth > maxDepth))
    return;
Ionflux::ObjectBase::StringVector entries;
if (!Ionflux::Template::readDir(fullName, entries, true, false))
{
    std::ostringstream status;
    status << "Could not read directory: " << fullName;
    throw IFTemplateError(getErrorString(status.str(), "readDir"));
}
clearFiles();
for (Ionflux::ObjectBase::StringVector::iterator i = entries.begin(); 
    i != entries.end(); i++)
{
    File* cf0 = addFile();
    cf0->setFullName(*i);
    if (recursive && cf0->isDir())
        cf0->readDir(true, maxDepth, depth + 1);
}
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
if (fullName.size() == 0)
    status << "<empty>";
else
status << "'" << fullName << "'";
if (isDir())
    status << "(dir)";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# static member functions

