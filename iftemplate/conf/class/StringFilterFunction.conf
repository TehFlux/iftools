# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# StringFilterFunction.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
        '"iftemplate/StringManipulator.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = StringFilterFunction
	shortDesc = String filter function
	title = String filter function
	longDesc = A string filter function that is part of a string filter.
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
	create = {
	    extendedCreate = true
	    allocationError = IFTemplateError("Could not allocate object.")
	}
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = func
    desc = name of the filter function
}
property.protected[] = {
    style = vector
    name = args
    desc = Arguments
    element = {
        type = std::string
        addType = const std::string&
        removeType = const std::string&
        findType = const std::string&
        name = Argument
        defaultValue = ""
        createExpr = std::string()
    }
    extendedAddFuncs = true
}
property.protected[] = {
    type = Ionflux::Template::StringManipulator::StringManipulator*
    setFromType = Ionflux::Template::StringManipulator::StringManipulator*
    name = manip
    desc = string manipulator
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = ""
    }
    initializer[] = {
        name = manip
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = initFunc
    }
    initializer[] = {
        name = manip
        value = 0
    }
    param[] = {
        type = const std::string&
        name = initFunc
        desc = name of the filter function
    }
    param[] = {
        type = Ionflux::Template::StringManipulator::StringManipulator*
        name = initManip
        desc = string manipulator
        default = 0
    }
    param[] = {
        type = Ionflux::ObjectBase::StringVector*
        name = initArgs
        desc = arguments
        default = 0
    }
    impl = <<<
if (initManip != 0)
    setManip(initManip);
if (initArgs != 0)
    addArguments(*initArgs);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = 
function.public[] = {
    spec = virtual
    type = void
    name = setArgument
    shortDesc = Set argument
    longDesc = Set the argument with the specified index.
    param[] = {
        type = unsigned int
        name = index
        desc = index
    }
    param[] = {
        type = const std::string&
        name = newArg
        desc = argument
    }
    impl = <<<
if (index > args.size())
{
    std::ostringstream status;
    status << "[StringFilterFunction::setArgument] "
        "Index out of range: " << index;
    throw IFTemplateError(status.str());
}
args[index] = newArg;
>>>
}

# Pure virtual member functions.

# operations

