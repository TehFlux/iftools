# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# StringReplace.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = Template
namespace[].name = StringManipulator

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '<cstdlib>'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = StringReplace
	shortDesc = String manipulator: 
	title = String manipulator: 
	longDesc =  <<<
String manipulator that replaces a substring with another string.

replace(s, r)
s - Substring to be replaced
r - Replacement string
>>>
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
        other[] = {
            name = Ionflux::Template::StringManipulator::StringManipulator
            include = iftemplate/StringManipulator.hpp
            inheritanceType = virtual public
        }
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.
constant.public[] = {
    type = std::string
    name = STRINGMANIP_NAME
    value = "replace"
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = std::string
	name = process
	shortDesc = Process byte string
	longDesc = Process a byte string.
	param[] = {
        type = const std::string&
        name = bytes
        desc = input bytes
	}
	param[] = {
        type = Ionflux::ObjectBase::StringVector*
        name = args
        desc = arguments
        default = 0
	}
	impl = <<<
if ((args == 0) || (args->size() < 2))
    return bytes;
std::string result = bytes;
std::string replaceBytes = (*args)[0];
std::string replaceWith = (*args)[1];
std::string::size_type currentPos;
while ((currentPos = result.find(replaceBytes)) != std::string::npos)
    result.replace(currentPos, replaceBytes.size(), replaceWith);
>>>
	return = {
	    value = result
	    desc = Result of applying the string manipulator to the input bytes
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getManipName
	shortDesc = Get string manipulator name
	longDesc = Get the name of the string manipulator.
	impl = 
	return = {
	   value = STRINGMANIP_NAME
	   desc = Name of the string manipulator
	}
}

# Pure virtual member functions.

# operations

