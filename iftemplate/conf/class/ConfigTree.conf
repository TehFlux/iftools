# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ConfigTree.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '"iftemplate/constants.hpp"'
	    '"iftemplate/configtypes.hpp"'
	    '"iftemplate/Tokenizer.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '<fstream>'
        '"ifobject/utils.hpp"'
        '"iftemplate/utils.hpp"'
        '"iftemplate/Node.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ConfigTree
	shortDesc = Configuration tree
	title = Configuration tree
	longDesc = A tree containing configuration data.
	group.name = iftemplate
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
            name = Ionflux::Template::Tree
            include = iftemplate/Tree.hpp
            inheritanceType = virtual public
        }
        other[] = {
            name = Ionflux::Template::Config
            include = iftemplate/Config.hpp
            inheritanceType = virtual public
        }
        other[] = {
            name = Ionflux::Template::NodeDump
            include = iftemplate/NodeDump.hpp
            inheritanceType = virtual public
        }
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
    create = {
        extendedCreate = true
        allocationError = IFTemplateError("Could not allocate object.")
    }
}

# Member variables.
variable.protected[] = {
    type = std::string
    name = inputFile
    desc = configuration source file
}
variable.protected[] = {
    type = Ionflux::Template::Tokenizer
    name = tok
    desc = tokenizer
}
variable.protected[] = {
    type = Ionflux::Template::ConfigTreeEntryVector
    name = entries
    desc = entries
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_COMMENT
    desc = Token type: comment
    value = \{ TT_ID_USERTYPE + 1, "#", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_ASSIGN
    desc = Token type: assignment operator
    value = \{ TT_ID_USERTYPE + 2, "=", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_MULTILINE
    desc = Token type: multi-line option marker
    value = \{ TT_ID_USERTYPE + 3, "\\\\", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_TREEPATH
    desc = Token type: tree path elements
    value = \{ TT_ID_USERTYPE + 4, ".[]()", false, 0 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_NESTED_OPEN
    desc = Token type: nested configuration (open)
    value = \{ TT_ID_USERTYPE + 5, "\{", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_NESTED_CLOSE
    desc = Token type: nested configuration (close)
    value = \{ TT_ID_USERTYPE + 6, "\}", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_VERBATIM_OPEN
    desc = Token type: verbatim configuration value (open)
    value = \{ TT_ID_USERTYPE + 7, "<", false, 3 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_VERBATIM_CLOSE
    desc = Token type: verbatim configuration value (close)
    value = \{ TT_ID_USERTYPE + 8, ">", false, 3 \}
}
constant.public[] = {
    type = std::string
    name = AUTO_INSERT_MARKER
    desc = Auto-insertion marker
    value = "# ------- Values inserted automatically by the "\
    "configuration system --------"
}
constant.public[] = {
    type = std::string
    name = SPECIAL_VALUE_CHARS
    desc = Special characters in configuration values
    value = "\{\}<>\n"
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = <<<
if (root == 0)
    throw IFTemplateError("[ConfigTree::ConfigTree] Root node is null.");
root->setAutoCreate(true);
root->setIndexMode(Node::INDEX_MODE_NODE);
tok.addTokenType(TT_COMMENT);
tok.addTokenType(TT_ASSIGN);
tok.addTokenType(TT_MULTILINE);
tok.addTokenType(TT_TREEPATH);
tok.addTokenType(TT_NESTED_OPEN);
tok.addTokenType(TT_NESTED_CLOSE);
tok.addTokenType(TT_VERBATIM_OPEN);
tok.addTokenType(TT_VERBATIM_CLOSE);
tok.setTokenTypeAnything();
tok.setExtractQuoted(true);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = int
	name = findFirstLine
	shortDesc = Find configuration line
	longDesc = Searches for the first line in the configuration file that defines the specified node. Returns -1 if the node is not found.
	param[] = {
	    type = Ionflux::Template::Node*
	    name = searchNode
	    desc = node to search for
	}
	impl = <<<
if (searchNode == 0)
    return -1;
int result = -1;
unsigned int i = 0;
bool found = false;
while (!found && (i < entries.size()))
{
    if ((entries[i].line.type == ConfigLine::CL_OPTION)
        && (entries[i].data.node == searchNode))
        found = true;
    else
        i++;
}
if (found)
    result = i;
>>>
	return = {
	    value = result
	    desc = Line number where the specified node is first defined, or -1, if the node is not found
	}
}
function.protected[] = {
	spec = virtual
	type = int
	name = findLastLine
	shortDesc = Find configuration line
	longDesc = Searches for the last line in the configuration file that defines the specified node. Returns -1 if the node is not found.
	param[] = {
	    type = Ionflux::Template::Node*
	    name = searchNode
	    desc = node to search for
	}
	impl = <<<
if (searchNode == 0)
		return -1;
	int result = -1;
	for (unsigned int i = 0; i < entries.size(); i++)
		if ((entries[i].line.type == ConfigLine::CL_OPTION)
			&& (entries[i].data.node == searchNode))
			result = i;
>>>
	return = {
	    value = result
	    desc = Line number where the specified node is last defined, or -1, if the node is not found
	}
}
function.protected[] = {
	spec = virtual
	type = int
	name = getAutoInsertPos
	shortDesc = Get auto-insert position
	longDesc = Fetch the correct line for auto-insertion of values.
	impl = <<<
int result = -1;
for (unsigned int i = 0; i < entries.size(); i++)
    if ((entries[i].line.type == ConfigLine::CL_COMMENT)
        && (entries[i].line.option.value == AUTO_INSERT_MARKER))
        result = i;
if (result == -1)
{
    // Auto-insertion marker missing; add it after a blank line.
    ConfigTreeEntry newEntry;
    newEntry.line.type = ConfigLine::CL_BLANK;
    newEntry.line.option.key = "<blank>";
    newEntry.line.option.value = "";
    newEntry.data.node = 0;
    newEntry.data.index = 0;
    entries.push_back(newEntry);
    newEntry.line.type = ConfigLine::CL_COMMENT;
    newEntry.line.option.key = "<comment>";
    newEntry.line.option.value = AUTO_INSERT_MARKER;
    entries.push_back(newEntry);
    result = entries.size() - 1;
}
>>>
	return = {
	    value = result
	    desc = Line number where new values should be auto-inserted
	}
}

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the configuration data.
	impl = <<<
inputFile = "";
entries.clear();
root->removeAllChildren(true);
root->clearData(false);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = parseConfig
	shortDesc = Parse configuration data
	longDesc = Parse configuration data, with syntax as specified for ConfigTree.
    param[] = {
        type = const std::string&
        name = configData
        desc = configuration data
    }
    param[] = {
        type = unsigned int
        name = lineOffset
        desc = line offset
        default = 0
    }
	impl = <<<
std::ostringstream status;
ConfigTreeEntry currentEntry;
tok.setInput(configData);
Token currentToken = tok.getNextToken();
bool error = false;
bool lineError = false;
unsigned int lineCount = 1;
unsigned int nestingLevel = 0;
unsigned int nestedLines = 0;
ConfigTree *nestedTree = 0;
Node *nestedRoot = 0;
// Node *currentChild = 0;
while (isNonEmpty(currentToken) && !error)
{
    /* ----- DEBUG ----- //
    status.str("");
    status << "[ConfigTree::parseConfigLine] DEBUG: Parsing line "
        << lineCount << ".";
    log.msg(status.str(), log.VL_DEBUG_INSANE);
    // ----- DEBUG ----- */
    // Skip leading whitespace.
    while (currentToken.typeID == TT_WHITESPACE.typeID)
        currentToken = tok.getNextToken();
    // Check token type.
    if (currentToken.typeID == TT_LINETERM.typeID)
    {
        // Blank line.
        if (currentToken.value[0] == '\r')
            // File has peculiar line terminators, so we skip a token.
            currentToken = tok.getNextToken();
        if ((currentToken.typeID == TT_LINETERM.typeID)
            && currentToken.value[0] == '\n')
            currentToken = tok.getNextToken();
        currentEntry.line.type = ConfigLine::CL_BLANK;
        currentEntry.line.option.key = "<blank>";
        currentEntry.line.option.value = "";
        currentEntry.data.node = 0;
        currentEntry.data.index = 0;
        /* <---- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: (Line " 
            << lineCount << ") type: CL_BLANK.";
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----> */
        lineCount++;
    } else
    if (currentToken.typeID == TT_COMMENT.typeID)
    {
        // Extract comment.
        currentEntry.line.type = ConfigLine::CL_COMMENT;
        currentEntry.line.option.key = "<comment>";
        currentEntry.line.option.value = "";
        currentEntry.data.node = 0;
        currentEntry.data.index = 0;
        tok.setExtractQuoted(false);
        while ((currentToken.typeID != TT_NONE.typeID)
            && (currentToken.typeID != TT_INVALID.typeID)
            && (currentToken.typeID != TT_LINETERM.typeID))
        {
            /* ----- DEBUG ----- //
            status.str("");
            status << "[ConfigTree::parseConfigLine] DEBUG: typeID = "
                << currentToken.typeID 
                << ", value = '" << currentToken.value << "'";
            log.msg(status.str(), log.VL_DEBUG_INSANE);
            // ----- DEBUG ----- */
            currentEntry.line.option.value.append(currentToken.value);
            currentToken = tok.getNextToken();
        }
        /* ----- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: comment = "
            << currentEntry.line.option.value;
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----- */
        tok.setExtractQuoted(true);
        /* <---- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: (Line " 
            << lineCount << ") type: CL_COMMENT.";
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----> */
    } else
    if (currentToken.typeID == TT_QUOTED.typeID)
    {
        // Extract root data.
        currentEntry.line.type = ConfigLine::CL_ROOT_DATA;
        currentEntry.line.option.key = "";
        currentEntry.line.option.value = "";
        currentEntry.data.node = 0;
        currentEntry.data.index = 0;
        while (currentToken.typeID == TT_QUOTED.typeID)
        {
            currentEntry.line.option.value.append(currentToken.value);
            currentToken = tok.getNextToken();
            // Ignore inline whitespace.
            while (currentToken.typeID == TT_WHITESPACE.typeID)
                currentToken = tok.getNextToken();
        }
        /* <---- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: (Line " 
            << lineCount << ") type: CL_ROOT_DATA.";
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----> */
    } else
    if ((currentToken.typeID == TT_TREEPATH.typeID)
        || (currentToken.typeID == TT_IDENTIFIER.typeID)
        || (currentToken.typeID == TT_ESCAPED.typeID))
    {
        // Extract option.
        currentEntry.line.type = ConfigLine::CL_OPTION;
        currentEntry.line.option.key = "";
        currentEntry.line.option.value = "";
        currentEntry.data.node = 0;
        currentEntry.data.index = 0;
        // Extract key.
        /* <---- DEBUG ----- //
        log.msg("[ConfigTree::parseConfigLine] DEBUG: Extracting key.", 
            log.VL_DEBUG_INSANE);
        // ----- DEBUG ----> */
        char quoteChar = 0;
        while ((currentToken.typeID == TT_TREEPATH.typeID)
            || (currentToken.typeID == TT_IDENTIFIER.typeID)
            || (currentToken.typeID == TT_QUOTED.typeID)
            || (currentToken.typeID == TT_ESCAPED.typeID))
        {
            quoteChar = tok.getQuoteChar();
            if (quoteChar != 0)
                // Preserve quoted strings.
                currentEntry.line.option.key.append(1, quoteChar);
            currentEntry.line.option.key.append(currentToken.value);
            if (quoteChar != 0)
                currentEntry.line.option.key.append(1, quoteChar);
            currentToken = tok.getNextToken();
        }
        /* ----- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: key = "
            << currentEntry.line.option.key;
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----- */
        while (currentToken.typeID == TT_WHITESPACE.typeID)
            currentToken = tok.getNextToken();
        // If assignment operator is present, extract value.
        if (currentToken.typeID != TT_ASSIGN.typeID)
            lineError = true;
        else 
        {
            /* Disable quoted string extraction since we want the 
               option value verbatim. Enable escaped character extraction 
               so nesting operators or newlines may be escaped. */
            tok.setExtractQuoted(false);
            tok.setExtractEscaped(true);
            currentToken = tok.getNextToken();
            while (currentToken.typeID == TT_WHITESPACE.typeID)
                currentToken = tok.getNextToken();
            // Extract value.
            /* <---- DEBUG ----- //
            log.msg("[ConfigTree::parseConfigLine] DEBUG: Extracting "
                "value.", log.VL_DEBUG_INSANE);
            // ----- DEBUG ----> */
            if (currentToken.typeID == TT_NESTED_OPEN.typeID)
            {
                // Extract nested configuration.
                currentEntry.line.type = ConfigLine::CL_NESTED;
                nestingLevel = 1;
                /* Disable escaped character extraction since we need 
                   everything inside the nesting block verbatim. */
                //tok.setExtractEscaped(false);
                currentToken = tok.getNextToken();
                while (isNonEmpty(currentToken) 
                    && (nestingLevel > 0))
                {
                    if (currentToken.typeID == TT_NESTED_CLOSE.typeID)
                        nestingLevel--;
                    else
                    if (currentToken.typeID == TT_NESTED_OPEN.typeID)
                        nestingLevel++;
                    else
                    if ((currentToken.typeID == TT_LINETERM.typeID) 
                        && (currentToken.value[0] == '\n'))
                        nestedLines++;
                    if (currentToken.typeID == TT_ESCAPED.typeID)
                        currentEntry.line.option.value.append(
                            1, ESCAPE_CHAR);
                    if (nestingLevel != 0)
                        currentEntry.line.option.value.append(
                            currentToken.value);
                    currentToken = tok.getNextToken();
                }
                if (nestingLevel != 0)
                {
                    error = true;
                    status.str("");
                    status << "[ConfigTree::parseConfigLine] "
                        "Parse error in line " << (lineCount + lineOffset)
                        << ": Mismatched nesting quotes.";
                    throw IFTemplateError(status.str());
                }
                /* <---- DEBUG ----- //
                status.str("");
                status << "[ConfigTree::parseConfigLine] DEBUG: (Line " 
                    << lineCount << ") type: CL_NESTED.";
                log.msg(status.str(), log.VL_DEBUG_INSANE);
                // ----- DEBUG ----> */
            } else
            {
                // Extract option value.
                /* verbatim state
                   0 - none
                   1 - open
                   2 - closed
                 */
                int verbatim = 0;
                while ((currentToken.typeID != TT_NONE.typeID)
                    && (currentToken.typeID != TT_INVALID.typeID)
                    && ((verbatim == 1) 
                        || (currentToken.typeID 
                            != TT_LINETERM.typeID))
                    && (verbatim < 2))
                {
                    if (currentToken.typeID == TT_ESCAPED.typeID)
                    {
                        if ((currentToken.value.size() > 0)
                            && (currentToken.value[0] == '\r'))
                        {
                            /* We have a peculiar line terminator, so we 
                               skip a token. */
                            currentEntry.line.option.value.append(
                                currentToken.value);
                            currentToken = tok.getNextToken();
                        } else
                        if (((currentToken.value.size() > 0)
                                && (currentToken.value[0] != '\n')
                                && (currentToken.value[0] 
                                    != TT_NESTED_OPEN.validChars[0])
                                && (currentToken.value[0] 
                                    != TT_NESTED_CLOSE.validChars[0])
                                && (currentToken.value[0] 
                                    != TT_VERBATIM_OPEN.validChars[0])
                                && (currentToken.value[0] 
                                    != TT_VERBATIM_CLOSE.validChars[0])
                                && (currentToken.value[0] 
                                    != ESCAPE_CHAR))
                            || (currentToken.value.size() == 0))
                        {
                            /* Append the escape character, since it does 
                               not initiate a valid escape sequence (this 
                               is somehow inconsistent, but I'll leave it 
                               for now, since all of this is going to be 
                               rewritten). */
                            currentEntry.line.option.value.append(1, 
                                ESCAPE_CHAR);
                        }
                    } else
                    if ((currentToken.typeID == TT_VERBATIM_OPEN.typeID) 
                        && (currentToken.value.size() == 3))
                    {
                        // Extract verbatim token value.
                        verbatim = 1;
                        currentToken = tok.getNextToken();
                        if (currentToken.typeID == 
                            TT_LINETERM.typeID)
                            // Skip the first lineterm.
                            currentToken = tok.getNextToken();
                    } else
                    if (verbatim 
                        && (currentToken.typeID 
                            == TT_VERBATIM_CLOSE.typeID) 
                        && (currentToken.value.size() == 3))
                    {
                        // End of verbatim token value.
                        verbatim = 2;
                    }
                    if (verbatim < 2)
                        currentEntry.line.option.value.append(
                            currentToken.value);
                    currentToken = tok.getNextToken();
                }
                /* <---- DEBUG ----- //
                status.str("");
                status << "[ConfigTree::parseConfigLine] DEBUG: (Line " 
                    << lineCount << ") type: CL_OPTION.";
                log.msg(status.str(), log.VL_DEBUG_INSANE);
                // ----- DEBUG ----> */
            }
            // Reset quoting and escaping.
            tok.setExtractQuoted(true);
            tok.setExtractEscaped(false);
        }
        // Strip leading and trailing whitespace.
        currentEntry.line.option.value = 
            Ionflux::ObjectBase::trim(currentEntry.line.option.value, 0);
        /* ----- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: value = "
            << currentEntry.line.option.value;
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----- */
    } else
    {
        error = true;
        status.str("");
        status << "[ConfigTree::parseConfigLine] Parse error in "
            "line " << (lineCount + lineOffset) << ": Unexpected token '" 
            << currentToken.value << "'.";
        throw IFTemplateError(status.str());
    }
    if (lineError || (currentToken.typeID == TT_INVALID.typeID))
    {
        /* <---- DEBUG ----- //
        status.str("");
        status << "[ConfigTree::parseConfigLine] DEBUG: (Line " 
            << lineCount << ") type: CL_INVALID.";
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----> */
    } else
    if (currentEntry.line.type == ConfigLine::CL_OPTION)
    {
        // Resolve and set data entry.
        currentEntry.data = resolve(currentEntry.line.option.key, false);
        if (currentEntry.data.node == 0)
        {
            status.str("");
            status << "[ConfigTree::parseConfigLine] "
                "Could not resolve node '" << currentEntry.line.option.key;
            throw IFTemplateError(status.str());
        }
        currentEntry.data.node->setData(currentEntry.data.index, 
            currentEntry.line.option.value);
        entries.push_back(currentEntry);
    } else
    if (currentEntry.line.type == ConfigLine::CL_NESTED)
    {
        // Resolve nested configuration.
        currentEntry.data = resolve(currentEntry.line.option.key, 
            false, true);
        if (currentEntry.data.node == 0)
        {
            status.str("");
            status << "[ConfigTree::parseConfigLine] "
                "Could not resolve node '" 
                << currentEntry.line.option.key;
            throw IFTemplateError(status.str());
        }
        /* <---- TESTING ----- //
        if (currentEntry.data.subscript)
        {
            // ----- DEBUG ----- //
            cout << "[ConfigTree::parseConfigLine] DEBUG: "
                "Nested configuration subscript = " 
                << currentEntry.data.index << endl;
            // ----- DEBUG ----- //
            // We need a child node for nested configuration, 
            // even if the reference contains a subscript.
            currentChild = currentEntry.data.node->findChild(
                currentEntry.data.index, false);
            if (log.assert(currentEntry.data.node != 0, 
                "[ConfigTree::parseConfigLine] Could not "
                "resolve nested configuration node!"))
            {
                currentEntry.data.node = currentChild;
                currentEntry.data.index = false;
            }
        }
        // ----- TESTING ----> */
        nestedTree = ConfigTree::create(this);
        nestedTree->parseConfig(currentEntry.line.option.value, 
            lineCount - 1);
        nestedRoot = nestedTree->getRoot();
        /* <---- DEBUG ----- //
        std::cerr << "[ConfigTree::parseConfigLine] DEBUG: "
            "Created nested tree " << nestedTree << " (root = " 
            << nestedRoot << ")" << std::endl;
        // ----- DEBUG ----- */
        if (nestedRoot == 0)
            throw IFTemplateError(getErrorString(
                "Nested tree root node pointer is null.", 
                    "parseConfigLine"));
        *currentEntry.data.node = *nestedRoot;
        entries.push_back(currentEntry);
        /* <---- DEBUG ----- //
        std::cerr << "[ConfigTree::parseConfigLine] DEBUG: "
            "Deleting nested tree " << nestedTree 
            << std::endl;
        // ----- DEBUG ----- */
        removeLocalRef(nestedTree);
        /* <---- DEBUG ----- //
        std::cerr << "[ConfigTree::parseConfigLine] DEBUG: "
            "Deleted nested tree." << std::endl;
        // ----- DEBUG ----- */
        lineCount += nestedLines;
        nestedLines = 0;
    } else
    if (currentEntry.line.type == ConfigLine::CL_ROOT_DATA)
    {
        // Add root data.
        root->addData(currentEntry.line.option.value);
        entries.push_back(currentEntry);
    } else
    if ((currentEntry.line.type == ConfigLine::CL_COMMENT)
        || (currentEntry.line.type == ConfigLine::CL_BLANK))
    {
        entries.push_back(currentEntry);
    } else
        throw IFTemplateError("[ConfigTree::parseConfigLine] "
            "Invalid line type.");
    // Skip line terminator.
    if (currentToken.typeID == TT_LINETERM.typeID)
    {
        if (currentToken.value[0] == '\r')
            // File has peculiar line terminators, so we skip a token.
            currentToken = tok.getNextToken();
        if ((currentToken.typeID == TT_LINETERM.typeID)
            && (currentToken.value[0] == '\n'))
            currentToken = tok.getNextToken();
        lineCount++;
    }
}
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = readConfig
	shortDesc = Read configuration from a file
	longDesc = Read data from a configuration file and store it in the configuration object.
    param[] = {
        type = const std::string&
        name = configFile
        desc = name of configuration file
    }
	impl = <<<
if (configFile == "")
    throw IFTemplateError("[ConfigTree::readConfig] "
        "File name is an empty string.");
std::string inputFileData;
Ionflux::ObjectBase::readFile(configFile, inputFileData);
if (inputFileData == "")
{
    std::ostringstream status;
    status << "[ConfigTree::readConfig] "
        "Could not read from file '" << configFile << "', or file "
        "does not contain any data!";
    throw IFTemplateError(status.str());
}
clear();
inputFile = configFile;
parseConfig(inputFileData);
>>>
	return = {
	   value = true
	   desc = \c true on success, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = writeConfig
	shortDesc = Write configuration to a file
	longDesc = Writes configuration data stored in the Config object to a file.
    param[] = {
        type = const std::string&
        name = configFile
        desc = name of configuration file
    }
	impl = <<<
std::ostringstream status;
std::ofstream configFileStream(configFile.c_str());
if (!configFileStream)
{
    status.str("");
    status << "[ConfigTree::writeConfig] Could write to file '" 
        << configFile << "'";
    throw IFTemplateError(status.str());
}
// Update the configuration table.
root->traverse(this, Node::TRAVERSAL_PREORDER);
/* Write configuration table to file.
   TODO: Handle nested configuration and root data entries. */
ConfigTreeEntryVector::const_iterator i;
for (i = entries.begin(); i != entries.end(); i++)
{
    if (((*i).line.type == ConfigLine::CL_COMMENT)
        || ((*i).line.type == ConfigLine::CL_BLANK))
    {
        configFileStream << (*i).line.option.value << endl;
    } else
    if ((*i).line.type == ConfigLine::CL_OPTION)
    {
        configFileStream << (*i).line.option.key << " = " 
            << (*i).line.option.value << endl;
    }
}
configFileStream.flush();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = writeConfig
	shortDesc = Write configuration to a file
	longDesc = Writes configuration data stored in the Config object to the same file it was read from.
	impl = if (inputFile != "")\
    writeConfig(inputFile);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = get
	shortDesc = Get configuration value
	longDesc = Fetches the value of a configuration option from the configuration object.
    param[] = {
        type = const std::string&
        name = key
        desc = key identifying the configuration value
    }
	impl = <<<
std::ostringstream status;
DataEntry result = resolve(key, false);
if (result.node == 0)
{
    status.str("");
    status << "[ConfigTree::parseConfigLine] Could not resolve "
        "node '" << key << "'! (This shouldn't happen!)";
    throw IFTemplateError(status.str());
}
>>>
	return = {
	   value = result.node->getData(result.index)
	   desc = Value of the specified configuration option, or an empty string if the option is not set for that key
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = set
	shortDesc = Set configuration value
	longDesc = Sets the configuration option denoted by key to value.
    param[] = {
        type = const std::string&
        name = key
        desc = key of the configuration option to be set
    }
    param[] = {
        type = const std::string&
        name = value
        desc = value the option should be set to
    }
	impl = <<<
DataEntry result = resolve(key, false);
if (result.node == 0)
{
    std::ostringstream status;
    status << "[ConfigTree::parseConfigLine] "
        "Could not resolve node '" + key + "'!";
    throw IFTemplateError(status.str());
}
result.node->setData(result.index, value);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = dump
	shortDesc = Dump node
	longDesc = Pass a node to the object for processing.
    param[] = {
        type = Ionflux::Template::Node*
        name = node
        desc = node to be processed
    }
	impl = <<<
if (node == 0)
    return;
int first = findFirstLine(node);
int last = findLastLine(node);
vector<ConfigTreeEntry>::iterator insertPos;
if (last != -1)
{
    // Node exists in file; remove all entries for this node.
    entries.erase(entries.begin() + first, entries.begin() + last + 1);
    insertPos = entries.begin() + first;
} else
{
    /* Node doesn't exist in file; find a suitable position for 
       insertion of this node (i.e. the last line of the parent node). */
    Node *currentNode = node->getParent();
    while ((currentNode != 0) && (last == -1))
    {
        last = findLastLine(currentNode);
        currentNode = currentNode->getParent();
    }
    if (last == -1)
        last = getAutoInsertPos();
    insertPos = entries.begin() + last + 1;
}
int numData = node->getNumData();
ConfigTreeEntry currentEntry;
currentEntry.line.type = ConfigLine::CL_OPTION;
if (numData == 1)
{
    // Insert a single data entry.
    currentEntry.line.option.key = node->getPath();
    currentEntry.line.option.value = escapeValue(node->getData());
    currentEntry.data.node = node;
    currentEntry.data.index = 0;
    entries.insert(insertPos, currentEntry);
} else
{
    // Insert all data entries.
    ostringstream currentKey;
    string currentData;
    for (int i = numData; i >= 0; i--)
    {
        currentData = escapeValue(node->getData(i));
        if (currentData.size() > 0)
        {
            currentKey.str("");
            currentKey << node->getPath() << "[" << i << "]";
            currentEntry.line.option.key = currentKey.str();
            currentEntry.line.option.value = currentData;
            currentEntry.data.node = node;
            currentEntry.data.index = i;
            insertPos = entries.insert(insertPos, currentEntry);
        }
    }
}
>>>
}

# Pure virtual member functions.

# static member functions
function.public[] = {
	spec = static
	type = std::string
	name = escapeValue
	shortDesc = Escape configuration value
	longDesc = Escapes special characters in a configuration value, making the value suitable for a configuration file.
    param[] = {
        type = const std::string&
        name = value
        desc = configuration value
    }
	impl = 
	return = {
	    value = Ionflux::ObjectBase::escape(value, SPECIAL_VALUE_CHARS)
	    desc = escaped configuration value
	}
}

