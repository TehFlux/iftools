# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# StringFilter.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '"iftemplate/types.hpp"'
	    '"iftemplate/Tokenizer.hpp"'
        '"iftemplate/StringManipulator.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '"ifobject/utils.hpp"'
	    '"iftemplate/constants.hpp"'
	    '"iftemplate/utils.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
        '"iftemplate/StringFilterFunction.hpp"'
        '"iftemplate/StringUppercase.hpp"'
        '"iftemplate/StringLowercase.hpp"'
        '"iftemplate/StringTrim.hpp"'
        '"iftemplate/StringSWrap.hpp"'
        '"iftemplate/StringErase.hpp"'
        '"iftemplate/StringAppend.hpp"'
        '"iftemplate/StringInsert.hpp"'
        '"iftemplate/StringNumFormat.hpp"'
        '"iftemplate/StringTranslate.hpp"'
        '"iftemplate/StringReplace.hpp"'
        '"iftemplate/StringSubstr.hpp"'
        '"iftemplate/StringRPad.hpp"'
        '"iftemplate/StringLPad.hpp"'
        '"iftemplate/StringXMLEscape.hpp"'
        '"iftemplate/StringURLEncode.hpp"'
    }
}

# forward declarations
forward = {
    'class StringFilterFunction'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = StringFilter
	shortDesc = String filter
	title = String filter
	longDesc = <<<
A string filter is a set of functions (manipulators) that can be applied to a string to yield another string. String manipulators may take one or more arguments, and they can be stacked. An example of a string filter expression would be:

<tt>uppercase|remove(' ')</tt>

This filter would first change the string to uppercase and then remove all spaces.

The general format of a string manipulator is:

<tt>&lt;function&gt; [ '(' [  (&lt;identifier&gt; | (&lt;quote char&gt; &lt;argument&gt; &lt;quote char&gt;)) [',' | &lt;linear whitespace&gt;]+ ]+ ')' ]+</tt>

Where <tt>&lt;quote char&gt;</tt> is either ' or ". String arguments should always be enclosed in quotes and multiple arguments should be separated by ','.
>>>
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
	create = {
	    extendedCreate = true
	    allocationError = IFTemplateError("Could not allocate object.")
	}
}

# Member variables.
variable.protected[] = {
    type = Ionflux::Template::Tokenizer
    name = tok
    desc = tokenizer
}
variable.protected[] = {
    type = Ionflux::Template::StringManipulatorNameMap
    name = manipByName
    desc = string manipulator index
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = filter
    desc = filter expression
    impl.set = filter = newFilter;\
parse();
}
property.protected[] = {
    style = vector
    name = functions
    desc = String filter functions
    element = {
        type = Ionflux::Template::StringFilterFunction*
        name = Function
        managed = true
    }
}
property.protected[] = {
    style = vector
    name = manipulators
    desc = String manipulators
    element = {
        type = Ionflux::Template::StringManipulator::StringManipulator*
        name = Manipulator
        managed = true
    }
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_FUNC_SEP
    desc = Token type: function separator
    value = \{ TT_ID_USERTYPE + 1, "|", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_FUNC_BRACKET_LEFT
    desc = Token type: function bracket (left)
    value = \{ TT_ID_USERTYPE + 2, "(", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_FUNC_BRACKET_RIGHT
    desc = Token type: function bracket (right)
    value = \{ TT_ID_USERTYPE + 3, ")", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_FUNC_ARG_SEP
    desc = Token type: argument separator
    value = \{ TT_ID_USERTYPE + 4, ",", false, 1 \}
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = initTokenTypes();\
addDefaultManipulators();
}
constructor.public[] = {
    param[] = {
        type = const std::string&
        name = initFilter
        desc = string filter expression
    }
    impl = initTokenTypes();\
addDefaultManipulators();\
setFilter(initFilter);
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = initTokenTypes
	shortDesc = Initialize token types
	longDesc = Initialize the token types.
	impl = <<<
tok.addTokenType(TT_FUNC_SEP);
tok.addTokenType(TT_FUNC_BRACKET_LEFT);
tok.addTokenType(TT_FUNC_BRACKET_RIGHT);
tok.addTokenType(TT_FUNC_ARG_SEP);
tok.setExtractQuoted(true);
>>>
}
function.protected[] = {
	spec = virtual
	type = void
	name = parse
	shortDesc = Parse filter expression
	longDesc = Parse the current filter expression.
	impl = <<<
std::ostringstream status;
bool error = false;
string errorReason;
StringFilterFunction* currentFunc = 0;
clearFunctions();
tok.setInput(filter);
Token currentToken = tok.getNextToken();
while (isNonEmpty(currentToken)
    && !error)
{
    if (hasType(currentToken, TT_IDENTIFIER.typeID))
    {
        // Extract function name.
        currentFunc = StringFilterFunction::create();
        currentFunc->setFunc(currentToken.value);
        currentFunc->setManip(
            Ionflux::ObjectBase::nullPointerCheck(
                getManipulatorByName(currentToken.value), 
                "StringFilter::parse", "String manipulator"));
        currentToken = tok.getNextToken();
        if (hasType(currentToken, TT_FUNC_BRACKET_LEFT.typeID))
        {
            // Extract arguments.
            currentToken = tok.getNextToken();
            // Skip leading whitespace.
            while (hasType(currentToken, TT_WHITESPACE.typeID))
                currentToken = tok.getNextToken();
            while (!error
                && (hasType(currentToken, TT_IDENTIFIER.typeID)
                    || hasType(currentToken, TT_QUOTED.typeID)))
            {
                currentFunc->addArgument(currentToken.value);
                currentToken = tok.getNextToken();
                // Skip trailing whitespace.
                while (hasType(currentToken, 
                    TT_WHITESPACE.typeID))
                    currentToken = tok.getNextToken();
                if (hasType(currentToken, TT_FUNC_ARG_SEP.typeID))
                {
                    // Skip argument separator.
                    currentToken = tok.getNextToken();
                    // Skip trailing whitespace.
                    while (hasType(currentToken, 
                        TT_WHITESPACE.typeID))
                        currentToken = tok.getNextToken();
                } else
                if (!hasType(currentToken, TT_FUNC_BRACKET_RIGHT.typeID))
                {
                    error = true;
                    errorReason = "Closing function bracket expected.";
                }
            }
            if (hasType(currentToken, TT_FUNC_BRACKET_RIGHT.typeID))
                // Skip closing bracket.
                currentToken = tok.getNextToken();
            else
            {
                error = true;
                errorReason = "Closing function bracket expected.";
            }
        }
        if (hasType(currentToken, TT_NONE.typeID)
            || hasType(currentToken, TT_FUNC_SEP.typeID))
        {
            addFunction(currentFunc);
            currentFunc = 0;
        } else
        {
            error = true;
            errorReason = "Function separator expected.";
        }
    }
    if (!error)
        /* Skip function separator. (If this is the last function, 
           this doesn't really do anything.) */
        currentToken = tok.getNextToken();
}
if (hasType(currentToken, TT_INVALID.typeID))
{
    error = true;
    errorReason = "Invalid token.";
}
if (error)
{
    string ws("");
    int errPos = tok.getCurrentTokenPos();
    if (errPos > 0)
        ws.append(errPos, ' ');
    status.str("");
    status << "[StringFilter::parse] Parse error at position " 
        << errPos << ":" << endl << filter << endl << ws << "^" << endl
        << "(" << errorReason << ")";
    if (currentFunc != 0)
        delete currentFunc;
    clearFunctions();
    throw IFTemplateError(status.str());
} else
if (currentFunc != 0)
{
    functions.push_back(currentFunc);
    currentFunc = 0;
}
>>>
}
function.protected[] = {
	spec = virtual
	type = Ionflux::Template::StringManipulator::StringManipulator*
	name = getManipulatorByName
	shortDesc = Get string manipulator by name
	longDesc = Get a string manipulator by name.
    param[] = {
        type = const std::string&
        name = manipName
        desc = string manipulator name
    }
	impl = <<<
StringManipulatorNameMap::iterator i = manipByName.find(manipName);
if (i != manipByName.end())
    return (*i).second;
>>>
	return = {
	    value = 0
	    desc = string manipulator, or 0 if no manipulator with the specified name exists
	}
}

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = void
	name = addDefaultManipulators
	shortDesc = Add default string manipulators
	longDesc = Add the default string manipulators.
	impl = <<<
// TODO: Add default manipulators.
addManipulator(StringManipulator::StringTrim::create());
addManipulator(StringManipulator::StringSWrap::create());
addManipulator(StringManipulator::StringUppercase::create());
addManipulator(StringManipulator::StringLowercase::create());
addManipulator(StringManipulator::StringErase::create());
addManipulator(StringManipulator::StringAppend::create());
addManipulator(StringManipulator::StringInsert::create());
addManipulator(StringManipulator::StringNumFormat::create());
addManipulator(StringManipulator::StringTranslate::create());
addManipulator(StringManipulator::StringReplace::create());
addManipulator(StringManipulator::StringSubstr::create());
addManipulator(StringManipulator::StringRPad::create());
addManipulator(StringManipulator::StringLPad::create());
addManipulator(StringManipulator::StringXMLEscape::create());
addManipulator(StringManipulator::StringURLEncode::create());
updateIndices();
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = apply
	shortDesc = Apply
	longDesc = Apply the string filter to a byte string.
    param[] = {
        type = const std::string&
        name = bytes
        desc = bytes
    }
	impl = <<<
string result = bytes;
StringFilterFunctionVector::iterator i;
StringFilterFunction* currentFunc = 0;
for (i = functions.begin(); i != functions.end(); i++)
{
    currentFunc = *i;
    StringManipulator::StringManipulator* m0 = currentFunc->getManip();
    if (m0 != 0)
        result = m0->process(result, &(currentFunc->getArguments()));
    else
    {
        // <---- DEBUG ----- //
        std::cout << "[StringFilter::apply] WARNING: "
            "Skipping manipulator '" + currentFunc->getFunc() 
            + "' (implementation not available).";
        // ----- DEBUG ----> */
    }
}
>>>
	return = {
	    value = result
	    desc = the result of applying the string filter
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = updateIndices
	shortDesc = Update indices
	longDesc = Update the string manipulator indices.
	impl = <<<
manipByName.clear();
for (StringManipulatorVector::iterator i = manipulators.begin(); 
    i != manipulators.end(); i++)
{
    StringManipulator::StringManipulator* m0 = *i;
    if (m0 != 0)
    {
        std::string mName = m0->getManipName();
        StringManipulator::StringManipulator* m1 = 
            getManipulatorByName(mName);
        if (m1 != 0)
        {
            std::ostringstream status;
            status << "[StringFilter::updateIndices] "
                "Duplicate index entry for '" << mName << "'.";
            throw IFTemplateError(status.str());
        }
        manipByName[mName] = m0;
    }
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = printDebugInfo
	shortDesc = Print debug information
	longDesc = Print debug information.
	impl = <<<
std::cout << "[StringFilter] Functions:" << std::endl;
StringFilterFunctionVector::const_iterator i;
StringFilterFunction* currentFunc;
for (i = functions.begin(); i != functions.end(); i++)
{
    currentFunc = *i;
    std::cout << currentFunc->getFunc() << ":" << std::endl;
    if (currentFunc->getManip() != 0)
        std::cout << "    manipulator: (available)" << std::endl;
    else
        std::cout << "    manipulator: (not available)" << std::endl;
    std::cout << "    arguments:" << std::endl;
    if (currentFunc->getNumArguments() > 0)
        for (unsigned int k = 0; 
            k < currentFunc->getNumArguments(); k++)
            std::cout << "        '" << currentFunc->getArgument(k) 
                << "'" << std::endl;
    else
        std::cout << "        (no arguments)" << std::endl;
}
>>>
}

