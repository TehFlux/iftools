# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CLArgs.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '"iftemplate/constants.hpp"'
	    '"iftemplate/types.hpp"'
	    '"iftemplate/Tokenizer.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '<fstream>'
        '"ifobject/utils.hpp"'
        '"iftemplate/utils.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = CLArgs
	shortDesc = Command line argument parser
	title = Command line argument parser
	longDesc = <<<
A command line argument parser which recognizes the following types of options and parameters:

\c -o Single-character option (switch)
\c --option Multi-character option (switch)
\c -o \c &lt;value&gt; Single-character option with value
\c --option \c &lt;value&gt; Multi-character option with value
\c -abc Concatenated single-character options (multiple switches)
\c -abc \c &lt;value&gt; Concatenated single-character options with value
\c option=&lt;value&gt; Assignment option
\c &lt;parameter&gt; Command line parameter
>>>
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
}

# Member variables.
variable.protected[] = {
    type = Ionflux::ObjectBase::StringVector
    name = args
    desc = Command line arguments
}
variable.protected[] = {
    type = Ionflux::Template::CLOptionVector
    name = options
    desc = Command line options
}
variable.protected[] = {
    type = Ionflux::Template::CLParams
    name = params
    desc = Command line parameters
}
variable.protected[] = {
    type = Ionflux::Template::CLAcceptableOptionVector
    name = acceptable
    desc = Acceptable command line options
}
variable.protected[] = {
    type = Ionflux::ObjectBase::StringVector
    name = invalidOptions
    desc = Invalid options
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = bool
    setFromType = bool
    name = checkOptions
    desc = Check options flag
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_OPTION
    desc = Token type: option marker
    value = \{ TT_ID_USERTYPE + 1, "-", false, 2 \}
}
constant.public[] = {
    type = Ionflux::Template::TokenType
    name = TT_ASSIGN
    desc = Token type: assignment operator
    value = \{ TT_ID_USERTYPE + 2, "=", false, 1 \}
}
constant.public[] = {
    type = Ionflux::Template::CLOption
    name = OPTION_NOT_SET
    desc = Option: Not set.
    value = \{ "", "", false \}
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = checkOptions
        value = false
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = checkOptions
        value = false
    }
    param[] = {
        type = int
        name = argc
        desc = number of arguments
    }
    param[] = {
        type = char**
        name = argv
        desc = argument vector
    }
    impl = setArgs(argc, argv);
}

# Destructor.
destructor.impl = clearAcceptableOptions();\
clearOptions();

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = bool
	name = addOption
	shortDesc = Add option
	longDesc = <<<
Adds an option if it is acceptable.

\note If the option cannot be added, it will be deleted. You should therefore not use the pointer again if addOption() returns \c false.
>>>
	param[] = {
	    type = Ionflux::Template::CLOption*
	    name = newOption
	    desc = command line option
	}
	impl = <<<
std::ostringstream status;
if (newOption == 0)
    throw IFTemplateError("[CLArgs::addOption] "
        "Attempt to add null option.");
// Split option if possible.
if (newOption->splittable && (newOption->option.size() > 1))
{
    /* Option is splittable. Create additional options for each 
       character of the option identifier. */
    CLOption *splitOption;
    unsigned int optionSize = newOption->option.size();
    for (unsigned int i = 0; i < optionSize; i++)
    {
        /* <---- DEBUG ----- //
        status.str("");
        status << "[CLArgs::addOption] DEBUG: Adding split option: '"
            << newOption->option[i] << "'.";
        log.msg(status.str(), log.VL_DEBUG_INSANE);
        // ----- DEBUG ----> */
        splitOption = Ionflux::ObjectBase::create<CLOption>(
            "CLArgs::addOption", "option");
        splitOption->option.append(1, newOption->option[i]);
        /* Make sure the last option specified retains its value, or at
           least the value gets added as a parameter if the last option 
           does not accept a value. */
        if (i < (optionSize - 1))
            splitOption->value = "";
        else
            splitOption->value = newOption->value;
        addOption(splitOption);
        splitOption = 0;
    }
    delete newOption;
    return false;
}
// Add option if option checking is disabled.
if (!checkOptions)
{
    options.push_back(newOption);
    return true;
}
// Option checking enabled. Check whether option is acceptable.
CLAcceptableOption *acceptableOption = getAcceptableOption(
    newOption->option);
if (acceptableOption != 0)
{
    // Create new parameter if option does not accept a value.
    if (!acceptableOption->acceptValue && (newOption->value != ""))
    {
        params.push_back(newOption->value);
        newOption->value = "";
    }
    options.push_back(newOption);
} else
{
    // Invalid option.
    /* <---- DEBUG ----- //
    status.str("");
    status << "[CLArgs::addOption] DEBUG: Command line option '" 
        << newOption->option << "' not recognized.";
    log.msg(status.str(), log.VL_DEBUG_OPT);
    // ----- DEBUG ----> */
    invalidOptions.push_back(newOption->option);
    // There might still be a parameter which we should extract.
    if (newOption->value.size() > 0)
        params.push_back(newOption->value);
    delete newOption;
    return false;
}
>>>
	return = {
	    value = true
	    desc = \c true if the option was added successfully, \c false ifthe opt ion could not be added and has been deleted.
	}
}
function.protected[] = {
	spec = virtual
	type = void
	name = parse
	shortDesc = Parse command line arguments
	longDesc = Parse command line arguments.
	impl = <<<
if (args.size() == 0)
    return;
options.clear();
params.clear();
unsigned int currentArg = 0;
CLOption* currentOption = 0;
Tokenizer tok;
tok.addTokenType(TT_OPTION);
tok.addTokenType(TT_ASSIGN);
tok.setExtractQuoted(true);
tok.setTokenTypeAnything();
Token currentToken;
string optionMarker;
bool optionOpen = false;
bool error = false;
std::ostringstream status;
while (currentArg < args.size())
{
    tok.setInput(args[currentArg]);
    currentToken = tok.getNextToken();
    if (hasType(currentToken, TT_OPTION.typeID))
    {
        // Handle option marker.
        if (currentOption != 0)
        {
            // Add open option.
            addOption(currentOption);
            currentOption = 0;
        }
        optionMarker = currentToken.value;
        currentToken = tok.getNextToken();
        currentOption = new CLOption();
        if (hasType(currentToken, TT_IDENTIFIER.typeID))
        {
            if ((optionMarker == "--") || (optionMarker == "-"))
            {
                // Extract option identifier.
                currentOption->option = currentToken.value;
                currentOption->value = "";
                if (optionMarker == "--")
                    currentOption->splittable = false;
                else
                    currentOption->splittable = true;
            } else
            {
                status.str("");
                status << "Invalid option marker: '" << optionMarker 
                    << "'";
                if (currentOption != 0)
                    delete currentOption;
                throw IFTemplateError(getErrorString(status.str(), 
                    "parse"));
            }
        }
        currentToken = tok.getNextToken();
        optionOpen = true;
    }
    if (optionOpen 
        && !hasType(currentToken, TT_NONE.typeID))
    {
        // Extract rest of option value.
        if (currentOption == 0)
            throw IFTemplateError(getErrorString("Current option "
                "is null.", "parse"));
        while ((currentToken.typeID != TT_NONE.typeID)
            && (currentToken.typeID != TT_INVALID.typeID))
        {
            currentOption->value.append(currentToken.value);
            currentToken = tok.getNextToken();
        }
        addOption(currentOption);
        currentOption = 0;
        optionOpen = false;
    } else
    if (!hasType(currentToken, TT_NONE.typeID))
    {
        // Option not open, but further tokens available.
        if (currentOption != 0)
            throw IFTemplateError(getErrorString("Option not "
                "open, but current option not null.", "parse"));
        error = false;
        if (hasType(currentToken, TT_IDENTIFIER.typeID))
        {
            // Check for assignment style option.
            currentOption = new CLOption();
            currentOption->option = currentToken.value;
            currentOption->value = "";
            currentOption->splittable = false;
            currentToken = tok.getNextToken();
            if (hasType(currentToken, TT_ASSIGN.typeID))
            {
                // Append option value.
                currentToken = tok.getNextToken();
                while (isNonEmpty(currentToken))
                {
                    currentOption->value.append(currentToken.value);
                    currentToken = tok.getNextToken();
                }
                addOption(currentOption);
                currentOption = 0;
            } else
            {
                // Not an assignment option. Create a parameter.
                currentOption->option.append(currentToken.value);
                currentToken = tok.getNextToken();
                while (isNonEmpty(currentToken))
                {
                    currentOption->option.append(currentToken.value);
                    currentToken = tok.getNextToken();
                }
                params.push_back(currentOption->option);
                delete currentOption;
                currentOption = 0;
            }
        } else
        {
            // Not an identifier. Create a parameter.
            // TODO: Remove code duplicates
            currentOption = new CLOption();
            currentOption->option = currentToken.value;
            currentOption->value = "";
            currentOption->splittable = false;
            currentToken = tok.getNextToken();
            while (isNonEmpty(currentToken))
            {
                currentOption->option.append(currentToken.value);
                currentToken = tok.getNextToken();
            }
            params.push_back(currentOption->option);
            delete currentOption;
            currentOption = 0;
        }
        if (error)
        {
            status.str("");
            status << "Parse error at token '" << currentToken.value 
                << "'.";
            if (currentOption != 0)
                delete currentOption;
            throw IFTemplateError(getErrorString(status.str(), "parse"));
        }
    } else
    if (currentArg == (args.size() - 1))
    {
        // Option open, but no further tokens or arguments available.
        addOption(currentOption);
        currentOption = 0;
        optionOpen = false;
    }
    currentArg++;
}
>>>
}

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = void
	name = clearAcceptableOptions
	shortDesc = Clear acceptable options
	longDesc = Clear the list of acceptable command line options.
	impl = <<<
for (unsigned int i = 0; i < acceptable.size(); i++)
{
    if (acceptable[i] != 0)
        delete acceptable[i];
    acceptable[i] = 0;
}
acceptable.clear();
checkOptions = false;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearOptions
	shortDesc = Clear options
	longDesc = Clear the list of command line options.
	impl = <<<
for (unsigned int i = 0; i < options.size(); i++)
{
    if (options[i] != 0)
        delete options[i];
    options[i] = 0;
}
options.clear();
invalidOptions.clear();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearParams
	shortDesc = Clear params
	longDesc = Clear the list of command line parameters.
	impl = params.clear();
}
function.public[] = {
	spec = virtual
	type = void
	name = setArgs
	shortDesc = Set command line arguments
	longDesc = Set the command line arguments in the standard format.
    param[] = {
        type = int
        name = argc
        desc = number of arguments
    }
    param[] = {
        type = char**
        name = argv
        desc = argument vector
    }
	impl = <<<
clearOptions();
for (int i = 1; i < argc; i++)
    args.push_back(argv[i]);
parse();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setArgs
	shortDesc = Set command line arguments
	longDesc = Set the command line arguments from a string vector.
    param[] = {
        type = const Ionflux::ObjectBase::StringVector&
        name = newArgs
        desc = command line arguments
    }
	impl = <<<
clearOptions();
for (int i = 1; i < newArgs.size(); i++)
    args.push_back(newArgs[i]);
parse();
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::CLOption*
	name = getOption
	shortDesc = Get option
	longDesc = <<<
Get an option.

\note The option is managed by the CLArgs object.
>>>
    param[] = {
        type = const std::string&
        name = searchOption
        desc = option to be returned
    }
	impl = <<<
CLOption *result = 0;
unsigned int currentOption = 0;
bool found = false;
while (!found && (currentOption < options.size()))
{
    if (options[currentOption]->option == searchOption)
        found = true;
    else
        currentOption++;
}
if (found)
    result = options[currentOption];
>>>
	return = {
	    value = result
	    desc = Pointer to an option, or 0 if the specified option is not set
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isSet
	shortDesc = Check whether an option is set
	longDesc = Check whether an option is set.
    param[] = {
        type = const std::string&
        name = checkOption
        desc = option to be checked
    }
	impl = <<<
unsigned int currentOption = 0;
bool found = false;
while (!found 
    && (currentOption < options.size()))
{
    if (options[currentOption]->option == checkOption)
        found = true;
    else
        currentOption++;
}
>>>
	return = {
	    value = found
	    desc = \c true if the specified option is set, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = getParams
	shortDesc = Get parameters
	longDesc = Get command line parameters (values passed on the command line that do not qualify as options).
    param[] = {
        type = Ionflux::Template::CLParams&
        name = target
        desc = where to store the command line parameters
    }
	impl = <<<
target.clear();
for (unsigned int i = 0; i < params.size(); i++)
    target.push_back(params[i]);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = addAcceptableOption
	shortDesc = Add acceptable option
	longDesc = <<<
Adds an option to the list of options accepted by the command line parser.

\note You must set acceptable options before handing the command line arguments to the parser, i.e. call addAcceptableOption() for each acceptable option before calling setArgs().
>>>
    param[] = {
        type = const std::string&
        name = newOption
        desc = option identifier
    }
    param[] = {
        type = bool
        name = newAcceptValue
        desc = whether the option can accept a value
    }
	impl = <<<
checkOptions = true;
CLAcceptableOption* newAcceptableOption = new CLAcceptableOption();
newAcceptableOption->option = newOption;
newAcceptableOption->acceptValue = newAcceptValue;
acceptable.push_back(newAcceptableOption);
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::Template::CLAcceptableOption*
	name = getAcceptableOption
	shortDesc = Get acceptable option
	longDesc = Get an acceptable option record.
    param[] = {
        type = const std::string&
        name = searchOption
        desc = option identifier
    }
	impl = <<<
CLAcceptableOption *result = 0;
unsigned int currentOption = 0;
bool found = false;
while (!found && (currentOption < acceptable.size()))
{
    if (acceptable[currentOption]->option == searchOption)
        found = true;
    else
        currentOption++;
}
if (found)
    result = acceptable[currentOption];
>>>
	return = {
	    value = result
	    desc = pointer to an acceptable option record, or 0 if the specified option is not found
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isAcceptable
	shortDesc = Check for acceptable option
	longDesc = Checks whether an option should be accepted by the parser.
    param[] = {
        type = const std::string&
        name = checkOption
        desc = option to be checked
    }
	impl = <<<
if (!checkOptions)
    return true;
CLAcceptableOption *result = getAcceptableOption(checkOption);
if (result == 0)
    return false;
>>>
	return = {
	    value = true
	    desc = \c true if the specified option is acceptable, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = acceptsValue
	shortDesc = Check for acceptable option value
	longDesc = Checks whether an option accepts a value.
    param[] = {
        type = const std::string&
        name = checkOption
        desc = option to be checked
    }
	impl = <<<
if (!checkOptions)
    return true;
CLAcceptableOption *result = getAcceptableOption(checkOption);
if (result == 0)
    return false;
>>>
	return = {
	    value = result->acceptValue
	    desc = \c true if the specified option accepts a value, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::StringVector&
	name = getInvalidOptions
	shortDesc = Get invalid options
	longDesc = Get the invalid options that have been encountered by the parser.
	impl = 
	return = {
	    value = invalidOptions
	    desc = reference to the vector of invalid option identifiers
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = optionsOK
	shortDesc = Get option validation status
	longDesc = <<<
Check whether all options are acceptable.

\sa getInvalidOptions()
>>>
	impl = if (invalidOptions.size() > 0)\
    return false;
	return = {
	    value = true
	    desc = \c true if all options are acceptable, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = printDebugInfo
	shortDesc = Print debug information
	longDesc = Print debug information.
	impl = <<<
std::cout << "Number of command line options: " << options.size() << std::endl;
for (unsigned int i = 0; i < options.size(); i++)
{
    std::cout << "Option [" << i << "]: ";
    if (options[i] == 0)
        std::cout << "(null)" << std::endl;
    else
    {
        std::cout << std::endl 
            << "    option = " << options[i]->option << std::endl
            << "    value  = " << options[i]->value << std::endl;
    }
}
std::cout << "Number of command line parameters: " << params.size() << std::endl;
for (unsigned int i = 0; i < params.size(); i++)
{
    std::cout << "Parameter [" << i << "]: '" << params[i] << "'" << std::endl;
}
std::cout << "Check for acceptable command line options: ";
if (checkOptions)
    std::cout << "yes";
else
    std::cout << "no";
std::cout << std::endl;
std::cout << "Number of acceptable command line options: " 
    << acceptable.size() << std::endl;
for (unsigned int i = 0; i < acceptable.size(); i++)
{
    std::cout << "Option [" << i << "]: ";
    if (acceptable[i] == 0)
        std::cout << "(null)" << std::endl;
    else
    {
        std::cout << std::endl 
            << "    option       = " << acceptable[i]->option << std::endl
            << "    acceptValue  = " << acceptable[i]->acceptValue << std::endl;
    }
}
>>>
}

# Pure virtual member functions.

# static member functions

