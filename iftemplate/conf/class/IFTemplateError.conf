# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFTemplateError.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '<string>'
        '<exception>'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<sstream>'
        '<cstdlib>'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = IFTemplateError
	shortDesc = IFTemplate error
	title = IFTemplate error
	longDesc = Exception to be used for errors if no more specific exception class exists.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
            name = std::exception
            include = <none>
        }
	}
    # Features.
    features = {
        # Enable automatic generation of copy/assignment functions.
        'copy'
    }
}

# Public constructors.
constructor.public[] = {
    initializer[] = {
        name = reason
        value = initReason
    }
	param[] = {
		type = const std::string&
		name = initReason
		desc = Initial reason
	}
    impl = 
}

# Destructor.
destructor.throw = <none>

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    copy = true
	type = std::string
	setFromType = const std::string&
	name = reason
	desc = Reason
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object.
	impl = ostringstream state;\
state << "IFTemplateError[" << reason << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = const char*
	name = what
	const = true
    throw = <none>
	shortDesc = Get exception information
	longDesc = Get information on what happened.
	impl = 
    return = {
        value = reason.c_str()
        desc = Exception information
    }
}

# Pure virtual member functions.

# operations

