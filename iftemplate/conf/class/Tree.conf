# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Tree.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '"iftemplate/types.hpp"'
	    '"iftemplate/treetypes.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '<vector>'
        '"ifobject/utils.hpp"'
        '"iftemplate/constants.hpp"'
        '"iftemplate/utils.hpp"'
        '"iftemplate/Node.hpp"'
        '"iftemplate/TreeResolver.hpp"'
        '"iftemplate/TreeEval.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
    }
}

# forward declarations
forward = {
    'class Node'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Tree
	shortDesc = Tree
	title = Tree
	longDesc = Tree type data structure. This behaves almost like a Node, but maintains a special node (the root node) as well as providing some convenience functions for I/O.
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    #    'memdebug'
    }
    #memDebug = {
    #    autoEnable = true
    #}
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Template::Node*
    setFromType = Ionflux::Template::Node*
    name = root
    desc = root node
    managed = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = root
        value = 0
    }
    impl = initRoot();
}
constructor.public[] = {
    initializer[] = {
        name = root
        value = 0
    }
    param[] = {
        type = Ionflux::Template::Node*
        name = initRoot0
        desc = root node
    }
    impl = <<<
if (initRoot0 != 0)
    setRoot(initRoot0);
else
    initRoot();
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.public[] = {
    spec = virtual
    type = void
    name = initRoot
    shortDesc = Initialize root node
    longDesc = Initialize the root node.
    impl = <<<
Node* root0 = Node::create();
/* <---- DEBUG ----- //
root0->setID("root");
// ----- DEBUG ----- */
root0->setNodeName("<root>");
root0->setNodeID(root0->getUID(true));
root0->setDataType(Node::DATA_BLOB);
root0->setUidMode(Node::UID_MODE_NONE);
root0->setLogTarget(this);
/* <---- DEBUG ----- //
std::cerr << "[Tree::initRoot] DEBUG: Created root node " << root0 
    << std::endl;
// ----- DEBUG ----- */
setRoot(root0);
>>>
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
if (other.root != 0)
    setRoot(other.root->copy());
else
    initRoot();
>>>
function.public[] = {
    spec = virtual
    type = void
    name = clear
    shortDesc = Clear
    longDesc = Clear all nodes from the tree.
    impl = if (root != 0)\
    root->clear();
}
function.public[] = {
    spec = virtual
    type = unsigned int
    name = getNumNodes
    shortDesc = Get number of nodes
    longDesc = Number of nodes in the tree.
    impl = if (root == 0)\
    return 0;
    return = {
        value = root->getNumChildren() + 1
        desc = number of nodes in the tree
    }
}
function.public[] = {
    spec = virtual
    type = Ionflux::Template::Node*
    name = findNode
    shortDesc = Find node
    longDesc = Searches the tree for a node with the specified ID.
    param[] = {
        type = int
        name = nodeID
        desc = ID of the node to be returned
    }
    impl = if (root == 0)\
    return 0;
    return = {
        value = root->findChild(nodeID, true)
        desc = Node, or 0 if node with the specified ID was not found
    }
}
function.public[] = {
    spec = virtual
    type = Ionflux::Template::Node*
    name = findNode
    shortDesc = Find node
    longDesc = Searches the tree for a node with the specified ID.
    param[] = {
        type = const std::string&
        name = nodeName
        desc = name of the node to be returned
    }
    impl = if (root == 0)\
    return 0;
    return = {
        value = root->findChild(nodeName, true)
        desc = Node, or 0 if node with the specified name was not found
    }
}
function.public[] = {
    spec = virtual
    type = Ionflux::Template::DataEntry
    name = resolve
    shortDesc = Resolve fully qualified tree path
    longDesc = Resolve a fully qualified tree path. Pass \c true to \c createPath to create a tree path on the fly if it does not already exist.
    param[] = {
        type = const std::string&
        name = treePathExpr
        desc = fully qualified tree path
    }
    param[] = {
        type = bool
        name = createPath
        desc = whether to create the path if it does not already exist
        default = false
    }
    param[] = {
        type = bool
        name = nodesOnly
        desc = whether subscripts should be treated as child node references by default
        default = false
    }
    impl = <<<
DataEntry result;
result.node = 0;
result.index = 0;
result.subscript = false;
vector<NodeReference> nodeRefs;
TreePath treePath;
if (!TreeResolver::parseTreePath(treePathExpr, nodeRefs))
    return result;
if (!TreeResolver::createTreePath(this, nodeRefs, treePath, createPath, 
    nodesOnly))
    return result;
result.node = treePath.nodes[treePath.nodes.size() - 1];
result.index = treePath.subscript;
result.subscript = treePath.explicitSubscript;
>>>
    return = {
        value = result
        desc = The data entry referenced by the specified tree path. If the specified node is not found (and cannot be auto-created), the corresponding field in the data entry will be set to 0.
    }
}
function.public[] = {
    spec = virtual
    type = bool
    name = eval
    shortDesc = Evaluate tree expression
    longDesc = Evaluates a tree expression using nodes from the tree as variables. Pass \c true to \c createPath to create tree paths on the fly if it they do not already exist.
    param[] = {
        type = const std::string&
        name = treeExpr
        desc = tree expression
    }
    param[] = {
        type = Ionflux::Template::Node&
        name = result
        desc = where to store the result of the evaluation
    }
    param[] = {
        type = bool
        name = createPath
        desc = whether to create a path if it does not already exist
    }
    impl = TreeExprElementVector elements;\
if (TreeEval::parseTreeExpr(treeExpr, elements))\
    return TreeEval::eval(this, elements, result, createPath);
    return = {
        value = false
        desc = \c true on success, \c false if there was an error
    }
}
function.public[] = {
    spec = virtual
    type = Ionflux::Template::Node&
    name = operator[]
    shortDesc = Find child node
    longDesc = Return a child of the root node by numerical ID. Returns the first child node with the specified ID.\
\
\\note This will always create non-existent nodes, even with auto-create turned off. If you do not want this, you should not use subscripting, but findChild() instead. Also be aware that you cannot use subscription operators to access data fields in your code, while this is possible if you use subscripting in tree path expressions which are parsed at run-time. Use getData() or parsed tree paths if you want to access data entries in your source.\
\
\\sa Ionflux::Tools::Node::findChild()
    param[] = {
        type = int
        name = searchID
        desc = ID of the node to be returned
    }
    impl = if (root == 0)\
    initRoot();
    return = {
        value = (*root)[searchID]
        desc = First child node with specified ID, or a newly created node with that ID
    }
}
function.public[] = {
    spec = virtual
    type = Ionflux::Template::Node&
    name = operator[]
    shortDesc = Find child node
    longDesc = Return a child of the root node by numerical ID. Returns the first child node with the specified name.\
\
\\note This will always create non-existent nodes, even with auto-create turned off. If you do not want this, you should not use subscripting, but findChild() instead. Also be aware that you cannot use subscription operators to access data fields in your code, while this is possible if you use subscripting in tree path expressions which are parsed at run-time. Use getData() or parsed tree paths if you want to access data entries in your source.\
\
\\sa Ionflux::Tools::Node::findChild()
    param[] = {
        type = const std::string&
        name = searchName
        desc = name of the child node to be returned
    }
    impl = if (root == 0)\
    initRoot();
    return = {
        value = (*root)[searchName]
        desc = First child node with specified name, or a newly created node with that name
    }
}
function.public[] = {
    spec = virtual
    type = void
    name = writeToFile
    shortDesc = Write tree to file
    longDesc = Writes the tree to a binary file.
    param[] = {
        type = const std::string&
        name = fileName
        desc = name of the output file
    }
    impl = <<<
if (root == 0)
    throw IFTemplateError("[Tree::writeToFile] "
        "Cannot write to file: Root node is null.");
string serializedTree;
root->serialize(serializedTree);
Ionflux::ObjectBase::writeFile(fileName, serializedTree, 'w');
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = readFromFile
    shortDesc = Read tree from file
    longDesc = Reads tree data from a binary file.
    param[] = {
        type = const std::string&
        name = fileName
        desc = name of the input file
    }
    impl = <<<
if (root == 0)
    initRoot();
string fileInput;
Ionflux::ObjectBase::readFile(fileName, fileInput);
if (fileInput.size() == 0)
    throw IFTemplateError("[Tree::readFromFile] "
        "File contains no data.");
root->unpack(fileInput, 0, 0);
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = printDebugInfo
    shortDesc = Print debug information
    longDesc = Prints debug information for the tree.
    impl = <<<
if (root == 0)
{
    cout << "This tree is empty." << endl;
    return;
}
int currentLevel = 0;
while(root->printDebugInfo(currentLevel))
    currentLevel++;
>>>
}

# Pure virtual member functions.

# operations

