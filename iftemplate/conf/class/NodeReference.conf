# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# NodeReference.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	    '"iftemplate/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '"ifobject/utils.hpp"'
        '"iftemplate/utils.hpp"'
        '"iftemplate/TreeResolver.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeReference
	shortDesc = Node reference
	title = Node reference
	longDesc = A node reference specifies a tree node, relative to its parent node, in human readable form. A tree node reference may be generated from a child node ID, a node name, or a fully qualified tree path (i.e. a data entry).
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = value
    desc = Value
}
property.protected[] = {
    type = Ionflux::Template::NodeRefTypeID
    setFromType = Ionflux::Template::NodeRefTypeID
    name = type
    desc = Type
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = subscript
    desc = Subscript flag
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Template::NodeRefTypeID
    name = TYPE_INVALID
    desc = Reference type: invalid
    value = 0
}
constant.public[] = {
    type = Ionflux::Template::NodeRefTypeID
    name = TYPE_NAME
    desc = Reference type: name
    value = 1
}
constant.public[] = {
    type = Ionflux::Template::NodeRefTypeID
    name = TYPE_ID
    desc = Reference type: ID
    value = 2
}
constant.public[] = {
    type = Ionflux::Template::NodeRefTypeID
    name = TYPE_PATH
    desc = Reference type: path
    value = 3
}
constant.public[] = {
    type = Ionflux::Template::NodeRefTypeID
    name = TYPE_EMPTY
    desc = Reference type: empty
    value = 4
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = value
        value = ""
    }
    initializer[] = {
        name = type
        value = TYPE_INVALID
    }
    initializer[] = {
        name = subscript
        value = false
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = value
        value = ""
    }
    initializer[] = {
        name = type
        value = TYPE_INVALID
    }
    initializer[] = {
        name = subscript
        value = false
    }
    param[] = {
        type = const std::string&
        name = refExpr
        desc = reference expression
    }
    impl = setFromRef(refExpr);
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = if (this == &other)\
    return *this;\
value = other.value;\
type = other.type;\
subscript = other.subscript;
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the reference data.
	impl = setValue("");\
setType(TYPE_INVALID);\
setSubscript(false);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFromRef
	shortDesc = Initialize from reference
	longDesc = Initializes the node reference from a reference expression. This may be either a child node ID, a node name, or a fully qualified tree path (i.e. data entry).\
\
\\note This function does not initialize the subscript flag.
    param[] = {
        type = const std::string&
        name = refExpr
        desc = reference expression
    }
	impl = <<<
setValue(refExpr);
if (refExpr.size() == 0)
    setType(TYPE_EMPTY);
else
if (Ionflux::ObjectBase::isInteger(refExpr))
    setType(TYPE_ID);
else
if (refExpr[0] == TreeResolver::TT_RES_OPERATOR.validChars[0])
    setType(TYPE_PATH);
else
    // Allow arbitrary characters to reference a node by name.
    setType(TYPE_NAME);
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	const = true
	name = isSubscript
	shortDesc = Get subscript flag
	longDesc = Get the subscript flag.
	impl = 
	return = {
	    value = subscript
	    desc = \c true if the reference is a subscript, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
if (value.size() == 0)
    status << "<empty>";
else
status << "'" << value << "', " << nodeRefTypeToString(type) << ", " 
    << subscript;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
    spec = virtual
    type = void
    const = true
    name = printDebugInfo
    shortDesc = Print debug information
    longDesc = Prints debug information for the node reference.
    impl = <<<
std::cout << "[NodeReference] DEBUG Info: " << std::endl
    << "    value     = " << getValue() << std::endl
    << "    type      = " << getType() << std::endl
    << "    subscript = " << isSubscript() << std::endl;
>>>
}
# Pure virtual member functions.

# operations

