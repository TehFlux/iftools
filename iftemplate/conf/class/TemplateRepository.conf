# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TemplateRepository.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"iftemplate/templatetypes.hpp"'
        '"iftemplate/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
        '"ifobject/utils.hpp"'
        '"iftemplate/Node.hpp"'
        '"iftemplate/File.hpp"'
        '"iftemplate/IFTemplateError.hpp"'
        '"iftemplate/utils.hpp"'
    }
}

# forward declarations
forward = {
    'class Node'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TemplateRepository
	shortDesc = Template repository
	title = Template repository
	longDesc = A repository of templates. A template can be requested from the repository by a qualified name, consisting of a sequence of identifiers separated by dots. Templates can be fetched either from a set of template paths or directly added to the repository.
	group.name = iftemplate
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#	inheritanceType = virtual public
		#}
        other[] = {
            name = Ionflux::Template::Tree
            include = iftemplate/Tree.hpp
        }
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = templatePaths
    desc = Template path vector
    element = {
        type = std::string
        findType = const std::string&
        addType = const std::string&
        deleteType = const std::string&
        name = TemplatePath
        defaultValue = ""
    }
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Template::RepositoryEntryTypeID
    name = ENTRY_TYPE_FILE
    desc = Entry type: file
    value = 0
}
constant.public[] = {
    type = Ionflux::Template::RepositoryEntryTypeID
    name = ENTRY_TYPE_DATA
    desc = Entry type: data
    value = 1
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = root->setIndexMode(Node::INDEX_MODE_NODE);
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
if (root == 0)
    initRoot();
*root = *other.root;
templatePaths = other.templatePaths;
update();
>>>
function.public[] = {
    spec = virtual
    type = void
    name = addTemplatePaths
    shortDesc = Add template paths
    longDesc = Add template paths from a vector of strings.
    param[] = {
        type = const Ionflux::ObjectBase::StringVector&
        name = newPaths
        desc = template paths
    }
    impl = <<<
for (Ionflux::ObjectBase::StringVector::const_iterator i = 
    newPaths.begin(); i != newPaths.end(); i++)
    templatePaths.push_back(*i);
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = addTemplatePaths
    shortDesc = Add template paths
    longDesc = Add template paths from a string.
    param[] = {
        type = const std::string&
        name = newPaths
        desc = template paths
    }
    param[] = {
        type = const std::string&
        name = separator
        desc = template path separator
        default = DEFAULT_TEMPLATE_PATH_SEP
    }
    impl = <<<
Ionflux::ObjectBase::StringVector parts;
Ionflux::ObjectBase::explode(newPaths, separator, parts);
addTemplatePaths(parts);
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = addModule
    shortDesc = Add module
    longDesc = Add a template module at the specified path.
    param[] = {
        type = const std::string&
        name = modulePath
        desc = module path
    }
    param[] = {
        type = Ionflux::Template::RepositoryEntryTypeID
        name = typeID
        desc = entry type ID
    }
    param[] = {
        type = const std::string&
        name = data
        desc = module data
    }
    impl = <<<
Ionflux::Template::DataEntry d = resolve(modulePath, true);
if (d.node == 0)
{
    std::ostringstream status;
    status << "Could not resolve module path: '" << modulePath << "'";
    throw IFTemplateError(getErrorString(status.str(), "addModule"));
}
d.node->setAutoCreate(true);
Node* tn = d.node->findChild("type");
nullPointerCheck(tn, this, "addModule", "Type node");
tn->setDataType(Node::DATA_INT);
tn->setData(typeID);
Node* dn = d.node->findChild("data");
nullPointerCheck(dn, this, "addModule", "Data node");
dn->setDataType(Node::DATA_BLOB);
dn->setData(data);
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = scanFile
    shortDesc = Scan file
    longDesc = Scan a file for templates and add them to the repository. If the file is a template file, it will be added to the repository at the appropriate module path. If the file is a directory, its child files will be scanned recursively for template files.
    param[] = {
        type = Ionflux::Template::File&
        name = file
        desc = file
    }
    param[] = {
        type = const std::string&
        name = modulePrefix
        desc = module prefix
        default = ""
    }
    param[] = {
        type = bool
        name = addRootModule
        desc = whether to add a module for the root directory
        default = false
    }
    impl = <<<
if (file.isDir())
{
    std::string moduleName = file.getName();
    if (Ionflux::ObjectBase::isIdentifier(moduleName))
    {
        // Scan template directory.
        std::string mp;
        if (addRootModule)
            mp = getModulePath(modulePrefix, moduleName);
        else
            mp = modulePrefix;
        /* <---- DEBUG ----- //
        std::cerr << "[TemplateRepository::scanFile] DEBUG: "
            "Processing directory: '" << file.getFullName() 
            << "' (modulePath = " << mp << ")." << std::endl;
        // ----- DEBUG ----> */
        file.readDir(false);
        unsigned int numFiles = file.getNumFiles();
        for (unsigned int i = 0; i < numFiles; i++)
        {
            File* cf = file.getFile(i);
            scanFile(*cf, mp, true);
        }
    }
} else
{
    if (file.getExtension() == TEMPLATE_FILE_EXT)
    {
        std::string moduleName = file.getBaseName();
        if (Ionflux::ObjectBase::isIdentifier(moduleName))
        {
            // Add template file.
            std::string mp = getModulePath(modulePrefix, moduleName);
            /* <---- DEBUG ----- //
            std::cerr << "[TemplateRepository::scanFile] DEBUG: "
                "Processing file: '" << file.getFullName() 
                << "' (modulePath = " << mp << ")." << std::endl;
            // ----- DEBUG ----> */
            addModule(mp, ENTRY_TYPE_FILE, file.getFullName());
        }
    }
}
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = scanPath
    shortDesc = Scan path
    longDesc = Recursively scan a directory path for templates and add them to the repository.
    param[] = {
        type = const std::string&
        name = dirPath
        desc = directory path
    }
    impl = <<<
File cd(dirPath);
std::ostringstream status;
if (!cd.isDir())
{
    status << "Invalid template directory path: '" << dirPath << "'";
    throw IFTemplateError(getErrorString(status.str(), "scanDirectory"));
}
scanFile(cd);
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = update
    shortDesc = Update
    longDesc = Update the template repository. This scans all template directories and adds any templates that are found to the repository.
    impl = <<<
for (Ionflux::ObjectBase::StringVector::const_iterator i = 
    templatePaths.begin(); i != templatePaths.end(); i++)
{
    /* <---- DEBUG ----- //
    std::cerr << "[TemplateRepository::update] DEBUG: "
        "Adding template path: '" << (*i) << "'." << std::endl;
    // ----- DEBUG ----> */
    scanPath(*i);
}
>>>
}
function.public[] = {
    spec = virtual
    type = void
    name = addTemplateData
    shortDesc = Add template data
    longDesc = Add template data at the specified module path.
    param[] = {
        type = const std::string&
        name = modulePath
        desc = module path
    }
    param[] = {
        type = const std::string&
        name = templateData
        desc = templateData
    }
    impl = addModule(modulePath, ENTRY_TYPE_DATA, templateData);
}
function.public[] = {
    spec = virtual
    type = std::string
    name = getTemplateData
    shortDesc = getTemplateData
    longDesc = Get template data for the specified module path.
    param[] = {
        type = const std::string&
        name = modulePath
        desc = module path
    }
    param[] = {
        type = bool
        name = removeTrailingNewLine
        desc = remove trailing newlines on template file data
        default = true
    }
    impl = <<<
Ionflux::Template::DataEntry d = resolve(modulePath);
if (d.node == 0)
{
    std::ostringstream status;
    status << "Could not resolve module path: '" << modulePath << "'";
    throw IFTemplateError(getErrorString(status.str(), 
        "getTemplateData"));
}
Node* tn = d.node->findChild("type");
nullPointerCheck(tn, this, "getTemplateData", "Type node");
RepositoryEntryTypeID et = tn->getInt();
Node* dn = d.node->findChild("data");
nullPointerCheck(dn, this, "getTemplateData", "Data node");
std::string ed = dn->getData();
if (et == ENTRY_TYPE_DATA)
    return ed;
std::string result;
Ionflux::ObjectBase::readFile(ed, result);
if (removeTrailingNewLine 
    && (result.size() > 0) 
    && (result[result.size() - 1] == '\n'))
    return result.substr(0, result.size() - 1);
>>>
    return = {
        value = result
        desc = template data
    }
}

# Static member functions.
function.public[] = {
    spec = static
    type = std::string
    name = getModulePath
    shortDesc = Get module path
    longDesc = Get a module path that consists of the path prefix, a module path separator and the module name.
    param[] = {
        type = const std::string&
        name = modulePrefix
        desc = module prefix
    }
    param[] = {
        type = const std::string&
        name = moduleName
        desc = module name
    }
    impl = <<<
if (modulePrefix.size() == 0)
    return moduleName;
std::ostringstream mp;
mp << modulePrefix << TEMPLATE_MODULE_SEP << moduleName;
>>>
    return = {
        value = mp.str()
        desc = module path
    }
}

# Pure virtual member functions.

# operations

