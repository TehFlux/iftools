# ==========================================================================
# IFTemplate - Ionflux Template Processor
# Copyright © 2012-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Config.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFTemplate - Ionflux Template Processor.
# 
# IFTemplate - Ionflux Template Processor is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFTemplate - Ionflux Template Processor is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<string>'
	}
    # these includes will be added in the implementation file
    impl = {
        '<iostream>'
        '<iomanip>'
        '<sstream>'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Config
	shortDesc = Configuration
	title = Configuration
	longDesc = Encapsulates configuration data as a set of key/value pairs.
	group.name = iftemplate
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
        #other[] = {
        #    name = 
        #    include = 
        #}
	}
    # Features.
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = 
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the configuration data.
	impl = 
}
function.public[] = {
	spec = virtual
	type = bool
	name = readConfig
	shortDesc = Read configuration from a file
	longDesc = Read data from a configuration file and store it in the configuration object.
    param[] = {
        type = const std::string&
        name = configFile
        desc = name of configuration file
    }
	impl = 
	return = {
	   value = false
	   desc = \c true on success, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = writeConfig
	shortDesc = Write configuration to a file
	longDesc = Writes configuration data stored in the Config object to a file.
    param[] = {
        type = const std::string&
        name = configFile
        desc = name of configuration file
    }
	impl = 
}
function.public[] = {
	spec = virtual
	type = void
	name = writeConfig
	shortDesc = Write configuration to a file
	longDesc = Writes configuration data stored in the Config object to the same file it was read from.
	impl = 
}
function.public[] = {
	spec = virtual
	type = std::string
	name = get
	shortDesc = Get configuration value
	longDesc = Fetches the value of a configuration option from the configuration object.
    param[] = {
        type = const std::string&
        name = key
        desc = key identifying the configuration value
    }
	impl = 
	return = {
	   value = ""
	   desc = Value of the specified configuration option, or an empty string if the option is not set for that key
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = set
	shortDesc = Set configuration value
	longDesc = Sets the configuration option denoted by key to value.
    param[] = {
        type = const std::string&
        name = key
        desc = key of the configuration option to be set
    }
    param[] = {
        type = const std::string&
        name = value
        desc = value the option should be set to
    }
	impl = 
}

# Pure virtual member functions.

# operations

