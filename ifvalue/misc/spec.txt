================================================================================
Ionflux Value
Copyright © 2006 Joern P. Meier
mail@ionflux.org
--------------------------------------------------------------------------------
Specification
================================================================================

The Ionflux Value library shall provide at least the following features:

• Simple types which conform to the basic behavior that can be expected from 
  those types (such as initialization, evaluation of operations):
  
  ▪ IFNil
    This type returns itself for any operation in which it occurs as an 
	operand.
  ▪ IFBool
    Boolean type (can be either 'true' or 'false').
  ▪ IFInt
    Integer type (32 bit).
  ▪ IFBigInt
    Integer type (64 bit).
  ▪ IFFloat
    Floating-point type (single precision).
  ▪ IFDouble
    Floating-point type (double precision).
  ▪ IFString
    Byte string type.

• IFIndexedVector, an indexed vector type which is used to hold references to 
  other objects identified locally by name and numerical ID. References may be 
  hard (local reference present) or soft (no local reference present).

• IFValue, a type used to construct arbitrarily complex objects from IFObject 
  based types. IFValue is based on IFIndexedVector. It also provides 
  operations, which are carried out either element-wise (for basic operations) 
  or on the IFValue itself (for special operations, like subscript and 
  reference assignment).

• Operators defined for simple and complex types:
  
  Operator                         simple    IFValue
  Unary operators:
    
    .   subscript                    -         ◆
    […]  subscript (alternative)     -         ◆
    (…)  operation call              -         ◆
    ++  increment                    ◆         ◆
    --  decrement                    ◆         ◆
    ~   bitwise complement           ◆         ◆
    !   not                          ◆         ◆
    -   unary minus                  ◆         ◆
    +   unary plus                   ◆         ◆
  
  Binary operators:
    
    *   multiply                     ◆         ◆
	/   divide                       ◆         ◆
	%   modulo                       ◆         ◆
	+   add                          ◆         ◆
	-   subtract                     ◆         ◆
	<<  shift left                   ◆         ◆
	>>  shift right                  ◆         ◆
	<   less than                    ◆         ◆
	<=  less than or equal           ◆         ◆
	>   greater than                 ◆         ◆
	>=  greater than or equal        ◆         ◆
    ==  equal                        ◆         ◆
	!=  not equal                    ◆         ◆
    &   bitwise AND                  ◆         ◆
	^   bitwise exclusive OR         ◆         ◆
	|   bitwise inclusive OR         ◆         ◆
	&&  locical AND                  ◆         ◆
	||  logical inclusive OR         ◆         ◆
	=   copy assignment              ◆         ◆
	<-  reference assignment         -         ◆

• Evaluation of expressions.
  
  ▪ Expressions are delimited by newlines or the ';' and ',' characters. 
    They can be continued on the next line by 'escaping the newline' 
	using '\'.
  
  ▪ Quoting characters are '"' and '''. The escape character is '\'.
  
  ▪ Expressions consist of literals, names, operators and subgroups.
  
  ▪ The result of an expression is an IFValue.
  
  ▪ (…) evaluates any expressions found inside and stores the result of each 
    expression at the current index. If the sequence operator ',' is 
	encountered, the current index is incremented by one.
	
  ▪ {…} evaluates any expressions found inside and returns the complete 
    context created while evaluating the expressions within the group.
	
  ▪ Object IDs identifying objects in the current context can be either 
    quoted UTF-8 strings, identifiers (alphanumeric, underscore) or integers. 
	Identifiers and quoted strings specify object IDs, integers specify 
	numerical object IDs.
  
  ▪ Literals can occur as basic type literals or object literals. Object
    literals are preceded by the object literal prefix (%%).

  ▪ A literal is converted to an object ID if an operator is encountered which 
    requires an object ID on the left hand side. This is done by a lookup in 
	the current context (i.e., the current root IFValue). These operators are:
	subscript ('.', '[…]'), operation call ('(…)') and assignment ('=', '<-').
	To convert an IFValue to an object ID, only the first entry is considered.
	
  ▪ (…) is treated as the operation call operator only if an operator is 
    expected. If an operand is expected, it is treated as an expression group.

