#!/usr/bin/python
# -*- coding: utf-8 -*-
# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2010 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SConscript                  SCons build script
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================
import os, subprocess, shutil, shlex, string, copy, re

# Create a default local configuration file if it does not exist.
if (not os.path.isfile('site_scons/local_config.py')):
    shutil.copy('site_scons/local_config.py.default', 
        'site_scons/local_config.py')

import local_config as lc
from sources import *
from builders import buildSource, buildClassInterface, buildInterface
from builders import buildClassXMLFactory

Help("""
Type 'scons' to build the default targets.
Type 'scons install' to install to default location.
Type 'scons <target>' to build a specific target.

You can add local configuration to site_scons/local_config.py.

Targets:
  (default)                    Everything.
  all                          Everything
  libs                         Shared libraries.
  programs                     Programs.
  tests                        Test programs.
  sources                      Source files (requires ifclassgen).
  interfaces                   SWIG interface declarations (requires iftpl).
  pymodule                     Python module.
  install                      Install headers, libraries and programs.
  bootstrap                    Install into bootstrap directory

Options:
  prefix=<target directory>    Installation prefix
                               (default: /usr/local)
  debug=<yes|no>               Whether to use debug compiler flags 
                               (default: yes)
""")

env0 = os.environ
env0['PATH'] += (':' + lc.PATH)

env = Environment(ENV = env0, 
    CPPPATH = ['include'] + lc.CPPPATH, 
    LIBPATH = ['lib'] + lc.LIBPATH)
env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2'])

if (hasattr(lc, 'debug') and lc.debug):
    debugDefault = 'yes'
else:
    debugDefault = 'no'
if (ARGUMENTS.get('debug', debugDefault) == 'yes'):
    env.Append(CCFLAGS = '-g')

if (hasattr(lc, 'prefix')):
    defaultPrefix = lc.prefix
else:
    defaultPrefix = '/usr/local'
prefix = ARGUMENTS.get('prefix', defaultPrefix)

bootstrap = False
if ('bootstrap' in COMMAND_LINE_TARGETS):
    print "***********************"
    print "Bootstrap build enabled"
    print "***********************"
    bootstrap = True

env.VariantDir('build', 'src')
env.VariantDir('test/build', 'test')
env.VariantDir('swig/wrapper/build', 'swig/wrapper')

def checkProgram(ctx, cmd):
    """Check for installed program."""
    ctx.Message('Checking for ' + cmd + '... ')
    try:
        subprocess.call(cmd, stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT)
        result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

def checkPkgConfig(ctx, pkg):
    """Check for package using pkg-config."""
    ctx.Message('Checking for ' + pkg + '... ')
    cmd = "pkg-config --cflags " + pkg
    try:
        p0 = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT)
        d = p0.stdout.read()
        if (d.find('was not found') != -1):
            result = 0
        else:
            ctx.sconf.env.MergeFlags('!' + cmd)
            result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

config = env.Configure(custom_tests = {
    "CheckProgram" : checkProgram, 
    "CheckPkgConfig" : checkPkgConfig })

missingDeps = []
if (not config.CheckPkgConfig("sigc++-2.0")):
    missingDeps += ['sigc++']
else:
    env.MergeFlags(['!pkg-config --cflags --libs sigc++-2.0'])
if (not config.CheckLib("pthread")):
    missingDeps += ['pthread']
if (not config.CheckLibWithHeader("tinyxml", "tinyxml/tinyxml.h", 
    'C++', autoadd = 0)):
    missingDeps += ['tinyxml']

if (len(missingDeps) > 0):
    print "******************************************************"
    print "Ionflux Object Base System cannot be built because the "
    print "following dependencies were not found:"
    print " "
    for it in missingDeps:
        print "  " + it
    print " "
    print "******************************************************"
    Exit(1)

buildPyModule = True
if (not config.CheckLibWithHeader("python" + lc.pythonVersion, 
    "Python.h", 'C', autoadd = 0)):
    print "***************************************************"
    print "Python not found - Python module will NOT be built!"
    print "***************************************************"
    buildPyModule = False

haveIFClassgen = True
if (not config.CheckProgram("ifclassgen")):
    haveIFClassgen = False
haveIFTpl = True
if (not config.CheckProgram("iftpl")):
    haveIFTpl = False
haveIFClassgen0 = True
if (not config.CheckProgram("ifclassgen0")):
    haveIFClassgen0 = False
haveIFTpl0 = True
if (not config.CheckProgram("iftpl0")):
    haveIFTpl0 = False
haveSWIG = True
if (not config.CheckProgram("swig")):
    print "*************************************************"
    print "SWIG not found - Python module will NOT be built!"
    print "*************************************************"
    haveSWIG = False
    buildPyModule = False

env = config.Finish()

env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2'])

# configure builders
sourceBuilder = Builder(action = buildSource)
classInterfaceBuilder = Builder(action = buildClassInterface)
interfaceBuilder = Builder(action = buildInterface)
swigPythonBuilder = Builder(action = "swig -c++ -python "
    + "-outdir swig/python -o $TARGET $SOURCE")
classXMLFactoryBuilder = Builder(action = buildClassXMLFactory)

env.Append(BUILDERS = { 
    'Source' : sourceBuilder, 
    'ClassInterface' : classInterfaceBuilder, 
    'Interface' : interfaceBuilder, 
    'SWIGPython' : swigPythonBuilder, 
    'ClassXMLFactory' : classXMLFactoryBuilder
})

allTargets = []

if (not bootstrap):
    # Source files.
    if (haveIFClassgen0):
        sources = []
        for it in ifobjectLibClasses:
            sources += [ 
                env.Source(target = [
                        'include/ifobject/' + it + '.hpp', 
                        'src/' + it + '.cpp'], 
                    source = ['conf/class/' + it + '.conf'])
            ]
        allTargets += sources
    else:
        print "**********************************************************"
        print "ifclassgen not found - source files will NOT be generated!"
        print "**********************************************************"
    # Interface declarations.
    if (haveIFTpl0):
        classInterfaces = []
        interfaceTargets = []
        for it in ifobjectLibClasses:
            t0 = 'swig/classes/' + it + '.i'
            interfaceTargets += [t0]
            classInterfaces += [ 
                env.ClassInterface(target = [ t0 ], 
                    source = ['conf/class/' + it + '.conf'])
            ]
        interfaces = env.Interface(target = lc.swigInterfaceFile[0], 
            source = interfaceTargets + [lc.swigInterfaceTemplateFile[0]])
        allTargets += (classInterfaces + [interfaces])
    else:
        print "*****************************************************************"
        print "iftpl0 not found -  Interface declarations will NOT be generated!"
        print "*****************************************************************"

else:
    print "*****************************************************************"
    print "Not generating source files and interface declarations, bootstrap"
    print "mode enabled."
    print "*****************************************************************"

# ifobject shared library
ifobjectLibEnv = env.Clone()
ifobjectLibEnv.Append(LIBS = ['tinyxml'])
ifobjectLib = ifobjectLibEnv.SharedLibrary(target = "lib/ifobject", 
    source = ifobjectLibSources)

targetLibs = [ifobjectLib]

# programs.
targetBins = []

# tests
testEnv = env.Clone()
testEnv.Append(LIBS = ['ifobject'], CPPPATH = ['test/include', '.'])

ifclassinfotestBin = testEnv.Program('test/bin/ifclassinfotest', 
	['test/build/ifclassinfotest.cpp'])
ifobjecttestBin = testEnv.Program('test/bin/ifobjecttest', 
	['test/build/ifobjecttest.cpp'])
ifthreadtestBin = testEnv.Program('test/bin/ifthreadtest', 
	['test/build/ifthreadtest.cpp'])
packtestBin = testEnv.Program('test/bin/packtest', 
	['test/build/packtest.cpp'])
ifexampleclasstestBin = testEnv.Program('test/bin/ifexampleclasstest',
	['test/build/IFExampleClass.cpp', 
		'test/build/IFExampleEvent.cpp',
		'test/build/IFExampleSignalProxy.cpp', 
		'test/build/ifexampleclasstest.cpp'])

targetTests = [ifclassinfotestBin, ifobjecttestBin, ifthreadtestBin, 
    packtestBin, ifexampleclasstestBin]

# Python module.
ifobjectWrapper = env.SWIGPython(target = [ 
        'swig/wrapper/ifobject_wrap.cxx', 'swig/python/IFObjectBase.py'], 
    source = lc.swigInterfaceFile[0])

ifobjectPyModuleEnv = env.Clone()
ifobjectPyModuleEnv.Append(LIBS = ['ifobject', 'python' + lc.pythonVersion])

ifobjectPyModule = ifobjectPyModuleEnv.SharedLibrary(
    target = 'swig/python/_IFObjectBase', 
    source = 'swig/wrapper/ifobject_wrap.cxx', 
    SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

allHeaders = ifobjectLibHeaders + [ lc.swigInterfaceFile[0] ]
allSources = ifobjectLibSources

# install targets
installBinTargets = [targetBins]

installHeaders = env.Install(prefix + '/include/' + lc.baseName, allHeaders)
installLibs = env.Install(prefix + '/lib', targetLibs)
installBins = env.Install(prefix + '/bin', installBinTargets)
if (buildPyModule):
    installPyModule = env.Install(prefix + lc.pythonSitePackagesPath, 
        ['swig/python/IFObjectBase.py', ifobjectPyModule])

installTargets = [installHeaders, installLibs, installBins]
if (buildPyModule):
    installTargets += [installPyModule]

# bootstrap install targets
bootstrapInstallHeaders = env.Install('bootstrap/include/' + lc.baseName, 
    allHeaders)
bootstrapInstallSources = env.Install('bootstrap/src', allSources)
bootstrapInstallLibs = env.Install('bootstrap/lib', targetLibs)
bootstrapInstallBins = env.Install('bootstrap/bin', installBinTargets)

bootstrapInstallTargets = [
    bootstrapInstallHeaders, bootstrapInstallLibs, bootstrapInstallBins, 
    bootstrapInstallSources
]

allTargets += (targetLibs + targetBins + targetTests)
if (buildPyModule):
    allTargets += [ifobjectPyModule]

aliasLibs = Alias('libs', targetLibs)
aliasBins = Alias('programs', targetBins)
aliasTests = Alias('tests', targetTests)
aliasAll = Alias('all', allTargets)
aliasInstall = Alias('install', installTargets)
aliasBootstrap = Alias('bootstrap', bootstrapInstallTargets)
if (not bootstrap):
    if (haveIFClassgen0):
        aliasSources = Alias('sources', sources)
    if (haveIFTpl0):
        aliasInterfaces = Alias('interfaces', classInterfaces + [interfaces])
if (buildPyModule):
    aliasPyModule = Alias('pymodule', ifobjectPyModule)

Default('all')
