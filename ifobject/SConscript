#!/usr/bin/python
# -*- coding: utf-8 -*-
# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2010 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SConscript                  SCons build script
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================
import os

env = Environment(ENV = os.environ)

env.VariantDir('build', 'src')

config = env.Configure()
if (not config.CheckLib("pthread")):
    print "pthread not found!"
    Exit(1)
if (not config.CheckLib("iftools")):
    print "iftools not found!"
    Exit(1)
env = config.Finish()

env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2', '-Iinclude', '-Llib'
    '!/opt/local/bin/pkg-config --cflags --libs sigc++-2.0'])

ifobjectLibSources = ['build/libb64.cpp',
	'build/log.cpp',
	'build/utf8.cpp',
	'build/serialize.cpp',
	'build/utility.cpp',
	'build/IFClassInfo.cpp',
	'build/IFObject.cpp',
	'build/IFObjectEvent.cpp',
	'build/IFObjectSignalProxy.cpp',
	'build/IFMutex.cpp',
	'build/IFGuard.cpp',
	'build/IFSignal.cpp',
	'build/IFLogMessage.cpp',
	'build/IFThread.cpp',
	'build/IFThreadEvent.cpp',
	'build/IFThreadSignalProxy.cpp']

ifobjectLib = env.SharedLibrary(target = "lib/ifobject", 
    source = ifobjectLibSources)

ifclassgenBin = env.Program('bin/ifclassgen', 
	['build/ifclassgen.cpp'], 
	LIBS = ['iftools'])

allTargets = [ifobjectLib, ifclassgenBin]

targetAll = Alias('all', allTargets)

Default('all')
