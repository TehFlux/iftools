#!/usr/bin/python
# -*- coding: utf-8 -*-
# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2010 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SConscript                  SCons build script
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================
import os, subprocess, shutil, shlex, string, copy

# Create a default local configuration file if it does not exist.
if (not os.path.isfile('site_scons/local_config.py')):
    shutil.copy('site_scons/local_config.py.default', 
        'site_scons/local_config.py')

import local_config as lc

Help("""
Type 'scons' to build the default targets.
Type 'scons install' to install to default location.
Type 'scons <target>' to build a specific target.

You can add local configuration to site_scons/local_config.py.

Targets:
  (default)                    Everything.
  all                          Everything
  libs                         Shared libraries.
  programs                     Programs.
  tests                        Test programs.
  sources                      Source files (requires ifclassgen).
  interfaces                   SWIG interface declarations (requires iftpl).
  pymodule                     Python module.
  install                      Install headers, libraries and programs.

Options:
  prefix=<target directory>    Installation prefix
                               (default: /usr/local)
  debug=<yes|no>               Whether to use debug compiler flags 
                               (default: yes)
""")

env0 = os.environ
env0['PATH'] += (':' + lc.PATH)

env = Environment(ENV = env0, 
    CPPPATH = ['include'] + lc.CPPPATH, 
    LIBPATH = ['lib'] + lc.LIBPATH)

if (ARGUMENTS.get('debug', 'no') == 'yes'):
    env.Append(CCFLAGS = '-g')

prefix = ARGUMENTS.get('prefix', '/usr/local')

env.VariantDir('build', 'src')
env.VariantDir('test/build', 'test')

def checkProgram(ctx, cmd):
    """Check for installed program."""
    ctx.Message('Checking for ' + cmd + '... ')
    try:
        subprocess.call(cmd, stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT)
        result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

config = env.Configure(custom_tests = { "CheckProgram" : checkProgram })

if (not config.CheckLib("pthread")):
    print "pthread not found!"
    Exit(1)

buildPyModule = True
if (not config.CheckLibWithHeader("python" + lc.pythonVersion, 
    "Python.h", 'C', autoadd = 0)):
    print "***************************************************"
    print "Python not found - Python module will NOT be built!"
    print "***************************************************"
    buildPyModule = False

buildIFClassgen = True
if (not config.CheckLib("iftools", language = 'C++', autoadd = 0)):
    print "*************************************************"
    print "iftools not found - ifclassgen will NOT be built!"
    print "*************************************************"
    buildIFClassgen = False
else:
    missingDeps = []
    if (not config.CheckLib("pcre")):
        missingDeps += ['pcre']
    
    if (len(missingDeps) > 0):
        print "*************************************************************"
        print "ifclassgen cannot be built because the following dependencies"
        print "were not found:"
        print " "
        for it in missingDeps:
            print "  " + it
        print " "
        print "*************************************************************"
        buildIFClassgen = False
    else:
        env.Append(LIBS = ['pcre'])


haveIFClassgen = True
if (not config.CheckProgram("ifclassgen")):
    haveIFClassgen = False
haveIFTpl = True
if (not config.CheckProgram("iftpl")):
    haveIFTpl = False
haveSWIG = True
if (not config.CheckProgram("swig")):
    print "*************************************************"
    print "SWIG not found - Python module will NOT be built!"
    print "*************************************************"
    haveSWIG = False
    buildPyModule = False

env = config.Finish()

env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2', 
    '!pkg-config --cflags --libs sigc++-2.0'])

def buildSource(source, target, env):
    """Builder function to build source files from class configuration."""
    classNames = []
    for it in source:
        cn, ext = os.path.splitext(os.path.basename(it.path))
        if (ext == '.conf'):
            classNames += [cn]
    for cn in classNames:
        c0 = ("ifclassgen -t template/class -c conf/class "
            "-m conf/main.conf -i include/" + lc.baseName + " -s src " + cn)
        print c0
        sp0 = subprocess.call(shlex.split(c0))

def buildClassInterface(source, target, env):
    """Builder function to build SWIG interface files from class 
       configuration."""
    classNames = []
    for it in source:
        cn, ext = os.path.splitext(os.path.basename(it.path))
        if (ext == '.conf'):
            classNames += [cn]
    for cn in classNames:
        c0 = ("iftpl template/interface.i.tpl conf/class/"
            + cn + ".conf conf/main.conf")
        print c0
        f0 = open("swig/classes/" + cn + ".i", 'w')
        sp0 = subprocess.call(shlex.split(c0), stdout = f0)
        f0.close()

def buildInterface(source, target, env):
    """Builder function to build a SWIG interface declaration."""
    classNames = []
    for it in source:
        cn, ext = os.path.splitext(os.path.basename(it.path))
        if (ext == '.i'):
            classNames += [cn]
    tplData = {}
    tplStr = open(lc.swigInterfaceTemplateFile).read()
    tpl = string.Template(tplStr)
    for cn in classNames:
        tplData[cn] = open('swig/classes/' + cn + '.i').read()
    for it in target:
        f0 = open(it.path, 'w')
        f0.write(tpl.substitute(tplData))
        f0.close()

sourceBuilder = Builder(action = buildSource)
classInterfaceBuilder = Builder(action = buildClassInterface)
interfaceBuilder = Builder(action = buildInterface)
swigPythonBuilder = Builder(action = "swig -c++ -python "
    + "-outdir swig/python -o $TARGET $SOURCE")

env.Append(BUILDERS = { 'Source' : sourceBuilder, 
    'ClassInterface' : classInterfaceBuilder, 
    'Interface' : interfaceBuilder, 
    'SWIGPython' : swigPythonBuilder})

ifobjectLibHeaders = ['include/libb64.hpp',
	'include/ifobject/types.hpp',
	'include/ifobject/log.hpp',
	'include/ifobject/utf8.hpp',
	'include/ifobject/serialize.hpp',
	'include/ifobject/utility.hpp',
	'include/ifobject/IFClassInfo.hpp',
	'include/ifobject/IFObject.hpp',
	'include/ifobject/IFObjectEvent.hpp',
	'include/ifobject/IFObjectSignalProxy.hpp',
	'include/ifobject/IFMutex.hpp',
	'include/ifobject/IFGuard.hpp',
	'include/ifobject/IFSignal.hpp',
	'include/ifobject/IFLogMessage.hpp',
	'include/ifobject/IFThread.hpp',
	'include/ifobject/IFThreadEvent.hpp',
	'include/ifobject/IFObjectSignalProxy.hpp']

ifobjectLibSources = ['build/libb64.cpp',
	'build/log.cpp',
	'build/utf8.cpp',
	'build/serialize.cpp',
	'build/utility.cpp',
	'build/IFClassInfo.cpp',
	'build/IFObject.cpp',
	'build/IFObjectEvent.cpp',
	'build/IFObjectSignalProxy.cpp',
	'build/IFMutex.cpp',
	'build/IFGuard.cpp',
	'build/IFSignal.cpp',
	'build/IFLogMessage.cpp',
	'build/IFThread.cpp',
	'build/IFThreadEvent.cpp',
	'build/IFThreadSignalProxy.cpp']

ifobjectLibClasses = [
    'IFClassInfo', 
    'IFExampleClass', 
    'IFGuard', 
    'IFLogMessage', 
    'IFMutex', 
    'IFObject', 
    'IFSignal', 
    'IFThread'
]

allTargets = []

# ifclassgen class generator
ifclassgenBin = env.Program('bin/ifclassgen', 
	['build/ifclassgen.cpp'], 
	LIBS = ['iftools'])

if (buildIFClassgen):
    allTargets += [ifclassgenBin]
    haveIFClassgen = True

# Source files.
if (haveIFClassgen):
    sources = []
    for it in ifobjectLibClasses:
        sources += [ 
            env.Source(target = [
                    'include/ifobject/' + it + '.hpp', 
                    'src/' + it + '.cpp'], 
                source = ['conf/class/' + it + '.conf',
                    'template/class/Class.hpp.tpl', 
                    'template/class/Class.cpp.tpl'])
        ]
    allTargets += sources
else:
    print "**********************************************************"
    print "ifclassgen not found - source files will NOT be generated!"
    print "**********************************************************"

# Interface declarations.
if (haveIFTpl):
    classInterfaces = []
    interfaceTargets = []
    for it in ifobjectLibClasses:
        t0 = 'swig/classes/' + it + '.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            env.ClassInterface(target = [ t0 ], 
                source = ['conf/class/' + it + '.conf',
                    'template/interface.i.tpl'])
        ]
    interfaces = env.Interface(target = lc.swigInterfaceFile, 
        source = interfaceTargets + [lc.swigInterfaceTemplateFile])
    allTargets += (classInterfaces + [interfaces])
else:
    print "****************************************************************"
    print "iftpl not found -  Interface declarations will NOT be generated!"
    print "****************************************************************"

# ifobject shared library
ifobjectLib = env.SharedLibrary(target = "lib/ifobject", 
    source = ifobjectLibSources)

targetLibs = [ifobjectLib]

# programs.
targetBins = []

# tests
testEnv = env.Clone()
testEnv.Append(LIBS = ['ifobject'], CPPPATH = ['test/include', '.'])

ifclassinfotestBin = testEnv.Program('test/bin/ifclassinfotest', 
	['test/build/ifclassinfotest.cpp'])
ifobjecttestBin = testEnv.Program('test/bin/ifobjecttest', 
	['test/build/ifobjecttest.cpp'])
ifthreadtestBin = testEnv.Program('test/bin/ifthreadtest', 
	['test/build/ifthreadtest.cpp'])
packtestBin = testEnv.Program('test/bin/packtest', 
	['test/build/packtest.cpp'])
ifexampleclasstestBin = testEnv.Program('test/bin/ifexampleclasstest',
	['test/build/IFExampleClass.cpp', 
		'test/build/IFExampleEvent.cpp',
		'test/build/IFExampleSignalProxy.cpp', 
		'test/build/ifexampleclasstest.cpp'])

targetTests = [ifclassinfotestBin, ifobjecttestBin, ifthreadtestBin, 
    packtestBin, ifexampleclasstestBin]

# Python module.
ifobjectWrapper = env.SWIGPython(target = [ 'swig/ifobject_wrap.cxx', 
        'swig/python/IFObjectBase.py'], 
    source = 'swig/ifobject.i')

ifobjectPyModuleEnv = env.Clone()
ifobjectPyModuleEnv.Append(LIBS = ['ifobject', 'python' + lc.pythonVersion])

ifobjectPyModule = ifobjectPyModuleEnv.SharedLibrary(
    target = 'swig/python/_IFObjectBase', 
    source = 'swig/ifobject_wrap.cxx', SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

allHeaders = ifobjectLibHeaders + [lc.swigInterfaceFile]

installBinTargets = [targetBins]
if (buildIFClassgen):
    installBinTargets += [ifclassgenBin]

installHeaders = env.Install(prefix + '/include/ifobject', allHeaders)
installLibs = env.Install(prefix + '/lib', targetLibs)
installBins = env.Install(prefix + '/bin', installBinTargets)
if (buildPyModule):
    installPyModule = env.Install(prefix + lc.pythonSitePackagesPath, 
        ['swig/python/IFObjectBase.py', ifobjectPyModule])

allTargets += (targetLibs + targetBins + targetTests)
if (buildPyModule):
    allTargets += [ifobjectPyModule]

installTargets = [installHeaders, installLibs, installBins]
if (buildPyModule):
    installTargets += [installPyModule]

aliasLibs = Alias('libs', targetLibs)
aliasBins = Alias('programs', targetBins)
aliasTests = Alias('tests', targetTests)
aliasAll = Alias('all', allTargets)
aliasInstall = Alias('install', installTargets)
if (haveIFClassgen):
    aliasSources = Alias('sources', sources)
if (haveIFTpl):
    aliasInterfaces = Alias('interfaces', classInterfaces + [interfaces])
if (buildPyModule):
    aliasPyModule = Alias('pymodule', ifobjectPyModule)

Default('all')
