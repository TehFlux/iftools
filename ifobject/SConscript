#!/usr/bin/python
# -*- coding: utf-8 -*-
# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2010 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SConscript                  SCons build script
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================
import os, subprocess, shutil

# Create a default local configuration file if it does not exist.
if (not os.path.isfile('site_scons/local_config.py')):
    shutil.copy('site_scons/local_config.py.default', 
        'site_scons/local_config.py')

import local_config as lc

Help("""
Type 'scons' to build the default targets.
Type 'scons install' to install to default location.
Type 'scons <target>' to build a specific target.

Targets:
  (default)                    Everything.
  all                          Everything
  libs                         Shared libraries.
  programs                     Programs.
  tests                        Test programs.
  install                      Install headers, libraries and programs.

Options:
  prefix=<target directory>    Installation prefix
                               (default: /usr/local)
  debug=<yes|no>               Whether to use debug compiler flags 
                               (default: yes)
""")

env = Environment(ENV = os.environ, 
    CPPPATH = ['include'] + lc.CPPPATH, 
    LIBPATH = ['lib'] + lc.LIBPATH)

if (ARGUMENTS.get('debug', 'no') == 'yes'):
    env.Append(CCFLAGS = '-g')

prefix = ARGUMENTS.get('prefix', '/usr/local')

env.VariantDir('build', 'src')
env.VariantDir('test/build', 'test')

def checkProgram(ctx, cmd):
    """Check for installed program."""
    ctx.Message('Checking for ' + cmd + '... ')
    try:
        subprocess.call(cmd, stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT)
        result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

config = env.Configure(custom_tests = { "CheckProgram" : checkProgram })

if (not config.CheckLib("pthread")):
    print "pthread not found!"
    Exit(1)

buildIFClassgen = True
if (not config.CheckLib("iftools", language = 'C++')):
    print "*************************************************"
    print "iftools not found - ifclassgen will NOT be built!"
    print "*************************************************"
    buildIFClassgen = False
else:
    missingDeps = []
    if (not config.CheckLib("pcre")):
        missingDeps += ['pcre']
    
    if (len(missingDeps) > 0):
        print "*************************************************************"
        print "ifclassgen cannot be built because the following dependencies"
        print "were not found:"
        print " "
        for it in missingDeps:
            print "  " + it
        print " "
        print "*************************************************************"
        buildIFClassgen = False
    else:
        env.Append(LIBS = ['pcre'])


haveIFClassgen = True
if (not config.CheckProgram("ifclassgen")):
    print "**********************************************************"
    print "ifclassgen not found - source files will NOT be generated!"
    print "**********************************************************"
    haveIFClassgen = False

env = config.Finish()

env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2', 
    '!/opt/local/bin/pkg-config --cflags --libs sigc++-2.0'])

# TODO: Create an ifclassgen-based Builder for the source files and add a 
#       'source' target.

ifobjectLibHeaders = ['include/libb64.hpp',
	'include/ifobject/types.hpp',
	'include/ifobject/log.hpp',
	'include/ifobject/utf8.hpp',
	'include/ifobject/serialize.hpp',
	'include/ifobject/utility.hpp',
	'include/ifobject/IFClassInfo.hpp',
	'include/ifobject/IFObject.hpp',
	'include/ifobject/IFObjectEvent.hpp',
	'include/ifobject/IFObjectSignalProxy.hpp',
	'include/ifobject/IFMutex.hpp',
	'include/ifobject/IFGuard.hpp',
	'include/ifobject/IFSignal.hpp',
	'include/ifobject/IFLogMessage.hpp',
	'include/ifobject/IFThread.hpp',
	'include/ifobject/IFThreadEvent.hpp',
	'include/ifobject/IFObjectSignalProxy.hpp']

ifobjectLibSources = ['build/libb64.cpp',
	'build/log.cpp',
	'build/utf8.cpp',
	'build/serialize.cpp',
	'build/utility.cpp',
	'build/IFClassInfo.cpp',
	'build/IFObject.cpp',
	'build/IFObjectEvent.cpp',
	'build/IFObjectSignalProxy.cpp',
	'build/IFMutex.cpp',
	'build/IFGuard.cpp',
	'build/IFSignal.cpp',
	'build/IFLogMessage.cpp',
	'build/IFThread.cpp',
	'build/IFThreadEvent.cpp',
	'build/IFThreadSignalProxy.cpp']

# ifobject shared library
ifobjectLib = env.SharedLibrary(target = "lib/ifobject", 
    source = ifobjectLibSources)

targetLibs = [ifobjectLib]

# ifclassgen class generator
ifclassgenBin = env.Program('bin/ifclassgen', 
	['build/ifclassgen.cpp'], 
	LIBS = ['iftools'])

targetBins = []
if (buildIFClassgen):
    targetBins += [ifclassgenBin]

# tests
testEnv = env.Clone()
testEnv.Append(LIBS = ['ifobject'], CPPPATH = ['test/include', '.'])

ifclassinfotestBin = testEnv.Program('test/bin/ifclassinfotest', 
	['test/build/ifclassinfotest.cpp'])
ifobjecttestBin = testEnv.Program('test/bin/ifobjecttest', 
	['test/build/ifobjecttest.cpp'])
ifthreadtestBin = testEnv.Program('test/bin/ifthreadtest', 
	['test/build/ifthreadtest.cpp'])
packtestBin = testEnv.Program('test/bin/packtest', 
	['test/build/packtest.cpp'])
ifexampleclasstestBin = testEnv.Program('test/bin/ifexampleclasstest',
	['test/build/IFExampleClass.cpp', 
		'test/build/IFExampleEvent.cpp',
		'test/build/IFExampleSignalProxy.cpp', 
		'test/build/ifexampleclasstest.cpp'])

targetTests = [ifclassinfotestBin, ifobjecttestBin, ifthreadtestBin, 
    packtestBin, ifexampleclasstestBin]

allHeaders = ifobjectLibHeaders

installHeaders = env.Install(prefix + '/include/ifobject', allHeaders)
installLibs = env.Install(prefix + '/lib', targetLibs)
installBins = env.Install(prefix + '/bin', targetBins)

allTargets = targetLibs + targetBins + targetTests

aliasLibs = Alias('libs', targetLibs)
aliasBins = Alias('programs', targetBins)
aliasTests = Alias('tests', targetTests)
aliasAll = Alias('all', allTargets)
aliasInstall = Alias('install', [installHeaders, installLibs, installBins])

Default('all')
