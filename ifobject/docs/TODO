================================================================================
Ionflux Object Base System
Copyright Â© 2006-2013 Joern P. Meier
mail@ionflux.org
--------------------------------------------------------------------------------
TODO
================================================================================

Up next
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
New
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
Critical stuff
--------------------------------------------------------------------------------

+ Testing
  > stream versions of pack/unpack functions (serialize.hpp)

+ Fix the variant dirs (all build files should go to 'build')

+ ByteBuffer
  > store an array of bytes and length
  > allocate, resize, append
  > convert to/from string, utf8, hex

+ polymorphic binary serialization/deserialization (just like for XML)
  > serialize/deserialize vectors/maps of objects (xmlutils_private.hpp)
    . need the polymorphic object deserialization
    . store only pointers
    . use pointer/offset map
    . store child objects at end of serialized data block
    . does not make much sense to do it this way for strings since offsets 
      are relative (maybe just handle this case later)
    . there is no need to store the null flag (packObj()) as null objects 
      do not need to be stored at all (just store the pointers)
  > class templates
    . stream versions of serialize/deserialize
    . IFIOContext versions of serialize/deserialize
  > magic words
    . one magic syllable for the namespace and one for the object type
  > figure out how progressive serialization/deserialization of object 
    hirerarchies can be done
    . generic header that stores a pointer to a root object and the 
      pointer/offset map offset
    . leave member object pointers set to zero
    . initialize object from the stream on demand using the 
      pointer/offset maps (deserializeMemberObjects(), 
      deserializeHierarchy(), serializeHierarchy())

+ builders
  > use a list of all class configurations and an arbitrary template
  > include-everything

+ Property system (fmbase)
  > add classes:
    Value, Property, ObjectSet, PropertySet, Callable, 
    Operator, PropertyIndexName, PropertyIndexKeyword
  > support storing object values as an ID (useful for serialization)
    . ObjectRef (stores UUID)
    . ObjectSource (allows fetching objects by UUID)
  > support vectors and dictionaries of values as a value type 
    . ObjectSet and a new ObjectMap type
    . implicitly supported if objects are supported as value types
  > Vector4 and Color are too specialized for ifobject, leave them out 
    for now
  > integrate into the new modular template system

+ Python context (FMViewer)
  > add classes:
    PythonContext, PythonObject, Callable, ObjectSet
  > various functionality defined in pytypes.hpp, pyutils.hpp, 
    pyutils_private.hpp, pyutils.cpp

+ XML I/O
  > use static class info instance in IFXMLObjectFactory::getClassName() 
    instead of hard-coding the class name
  > support adding objects from an object store via ID reference

+ Run-time class information needs to be truly extensible at run-time
  > maintain a class information graph outside the actual class hierarchy
    . get rid of static CLASS_INFO variables, use static class info 
      instances allocated on the heap instead.
    . add functions to query the graph for a class by name
  > register child classes with base class
    . avoid the static initialization order fiasco
  > add createInstance() functions to the class info type that can be used 
    to create instances of the class
  > move getXMLObjectFactory() to the class info

+ use iftemplate instead of iftools
  > testing

+ Class templates
  > output a preprocessor error if a required option is missing
    . even better would be a template error tag (see iftemplate)
  > support C++ templates
  > make sure they work with the new iftpl from iftemplate
  > document features
    . properties
    . create functions
  > generate serialization code for vector/map style properties
  > install using SCons
  > add the proxyTarget feature to other property styles (done for vector)
  > merge changes from Dievas (persistence)
  > handling of null proxy object in clear...() (?)

+ Create memory management event handler for debugging
  > object lifetime statistics
    . total number of allocations
    . average lifetime
  > memory management debugging
    . each object that has been created should be deleted
    . objects should not be deleted more than once

+ Use exceptions for critical errors instead of the logging system.
  > memory management functions

--------------------------------------------------------------------------------
Important stuff
--------------------------------------------------------------------------------

+ Add versions of the template functions from utils.hpp that accept a 
  sourceObj parameter for error reporting in objectutils.hpp.

+ Testing
  > XML I/O
    . polymorphic types
    . maps, custom generator/get functions

+ XML I/O
  > Class templates
    . import statements should be moved to the modules in which the imported 
      functions are actually referenced
  > Template variables should be moved to appropriate nodes:
    haveXMLAttributes -> class.xml.haveAttributes, etc.

+ Add a more generalized serialization framework.
  > binary, XML, JSON
  > Serialization functions for vectors and maps (with string key)

+ Create full python bindings using the files in swig/classes.
  > add support for signals and events

+ Class templates
  > vector style properties: add support for set<Element>(index, value)

+ Merge automatic database binding generation (from XTW)
  > generate accessor functions for relationships automatically
    (see Object/Property in XTW)

+ Class templates
  > generate JavaScript proxy classes automatically

+ Build scripts
  > auto-detect Python

--------------------------------------------------------------------------------
Nice to have
--------------------------------------------------------------------------------

+ Class templates
  > see what parts of the older code in impl_main.tpl and header_main.tpl 
    can be factored out into modules

+ ObjectPool
  > used to reduce allocations for objects with short lifecycle
  > allocate space for a number of object pointers
  > allocate and recycle objects as needed
  > if object pool is too small, increase by a factor

+ Build on Windows
  > support export declarations (fmbase)
  > check dependencies (maybe boost can be used as a replacement?)
    . sigc++
    . pthread

--------------------------------------------------------------------------------
Side-tracks
--------------------------------------------------------------------------------


