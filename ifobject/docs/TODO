================================================================================
Ionflux Object Base System
Copyright Â© 2006-2013 Joern P. Meier
mail@ionflux.org
--------------------------------------------------------------------------------
TODO
================================================================================

Up next
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
New
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
Critical stuff
--------------------------------------------------------------------------------

+ Testing
  > XML I/O
    . polymorphic types
    . maps, custom generator/get functions

+ ifclassgen0 should be moved to iftemplate, since it depends on both 
  ifobject and iftemplate.

+ XML I/O
  > Class templates
    . import statements should be moved to the modules in which the imported 
      functions are actually referenced
  > Integrate new SCons builders into ifobject (from geoutils)
  > Template variables should be moved to appropriate nodes:
    haveXMLAttributes -> class.xml.haveAttributes, etc.

+ Add versions of the template functions from utils.hpp that accept a 
  sourceObj parameter for error reporting in objectutils.hpp.

+ use iftemplate instead of iftools
  > testing

+ Class templates
  > support C++ templates
  > make sure they work with the new iftpl from iftemplate
  > document features
  > generate serialization code for vector/map style properties
  > install using SCons

+ Create memory management event handler for debugging
  > object lifetime statistics
    . total number of allocations
    . average lifetime
  > memory management debugging
    . each object that has been created should be deleted
    . objects should not be deleted more than once

+ Use exceptions for critical errors instead of the logging system.
  > memory management functions

--------------------------------------------------------------------------------
Important stuff
--------------------------------------------------------------------------------

+ Add a more generalized serialization framework.
  > binary, XML, JSON
  > Serialization functions for vectors and maps (with string key)

+ Create full python bindings using the files in swig/classes.
  > add support for signals and events

+ Class templates
  > vector style properties: add support for set<Element>(index, value)

+ Merge features from FMBase
  > property system
    . support storing object values as an ID (useful for serialization)
    . support vectors and dictionaries of values as a value type

+ Merge automatic database binding generation (from XTW)
  > generate accessor functions for relationships automatically
    (see Object/Property in XTW)

+ Class templates
  > generate JavaScript proxy classes automatically

+ Build scripts
  > auto-detect Python

--------------------------------------------------------------------------------
Nice to have
--------------------------------------------------------------------------------

+ Class templates
  > see what parts of the older code in impl_main.tpl and header_main.tpl 
    can be factored out into modules

+ ObjectPool
  > used to reduce allocations for objects with short lifecycle
  > allocate space for a number of object pointers
  > allocate and recycle objects as needed
  > if object pool is too small, increase by a factor

+ Build on windows
  > check dependencies (maybe boost can be used as a replacement?)
    . sigc++
    . pthread

--------------------------------------------------------------------------------
Side-tracks
--------------------------------------------------------------------------------


