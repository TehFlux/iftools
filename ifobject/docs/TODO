================================================================================
Ionflux Object Base System
Copyright Â© 2006-2013 Joern P. Meier
mail@ionflux.org
--------------------------------------------------------------------------------
TODO
================================================================================

Up next
--------------------------------------------------------------------------------

+ Class templates
  > create modular templates
    . class.header, class.impl, event_conf, signal_proxy_conf
    . refactor monolithic templates into modules

--------------------------------------------------------------------------------
New
--------------------------------------------------------------------------------

+ Add a more generalized serialization framework.
  > binary, XML, JSON

--------------------------------------------------------------------------------
Critical stuff
--------------------------------------------------------------------------------

+ use iftemplate instead of iftools
  > testing

+ Class templates
  > make sure they work with the new iftpl from iftemplate
  > document features
  > generate XML serialization code automatically for properties
    . requires getObject0() to be specialized for each serializable 
      class (possibly via get<class name>() method)
  > generate serialization code for vector/map style properties
  > install using SCons
  > support C++ templates

+ Use exceptions for critical errors instead of the logging system.
  > memory management functions

+ Serialization functions for vectors and maps (with string key)
  (see [ifobject]xmlutils.cpp:getXML0(), [fmbase]/xmlutils.cpp:getColorMap())
  > getObjMap(...)
  > getXML0(const std::map<std::string, T>& m, ...)

--------------------------------------------------------------------------------
Important stuff
--------------------------------------------------------------------------------

+ Create memory management event handler for debugging
  > object lifetime statistics
    . total number of allocations
    . average lifetime
  > memory management debugging
    . each object that has been created should be deleted
    . objects should not be deleted more than once

+ Class templates
  > vector style properties: add support for set<Element>(index, value)

+ Merge features from FMBase
  > property system
    . support storing object values as an ID (useful for serialization)
    . support vectors and dictionaries of values as a value type

+ Merge automatic database binding generation (from XTW)
  > generate accessor functions for relationships automatically
    (see Object/Property in XTW)

+ Class templates
  > generate JavaScript proxy classes automatically

+ Build scripts
  > auto-detect Python

--------------------------------------------------------------------------------
Nice to have
--------------------------------------------------------------------------------

+ ObjectPool
  > used to reduce allocations for objects with short lifecycle
  > allocate space for a number of object pointers
  > allocate and recycle objects as needed
  > if object pool is too small, increase by a factor

+ Build on windows
  > check dependencies (maybe boost can be used as a replacement?)
    . sigc++
    . pthread

--------------------------------------------------------------------------------
Side-tracks
--------------------------------------------------------------------------------


