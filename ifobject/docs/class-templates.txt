================================================================================
Ionflux Object Base System
Copyright Â© 2006-2013 Joern P. Meier
mail@ionflux.org
--------------------------------------------------------------------------------
Class templates
================================================================================

This is a reference for the features of the Ionflux Object Base System 
class templates.

The Ionflux Object Base System class templates form a metaprogramming system 
that allows to automatically create C++ header and implementation files and 
SWIG interface files for classes. Each class is configured using a 
configuration file. A template processor is then used to generate the 
implementation of these classes.

The class template is easily extensible by adding new modules consisting 
of templates and configuration options for the class configuration files.

NOTE: This documentation is work in progress and by no means complete at 
      the time of writing. For examples of how to use the class template 
      system, please see the configuration files in this and other 
      projects that use the class templates.

================================================================================
Properties
================================================================================

This module supports class properties. The main purpose of properties is 
to provide accessor functions and automatic memory management. Properties 
are also handled by other modules to provide additional features (such as 
serialization, XML I/O and persistence). These features are documented in 
the sections for the modules that provide these features.

In general, properties have to be protected class members (i.e. defined in 
a property.protected[] block), because many other features depend on this.

--------------------------------------------------------------------------------
Configuration options
--------------------------------------------------------------------------------

property.protected[]
  name          Name of the property.
  type          Type of the property.
  desc          Description
  setFromType   Type the property is set from.
  managed       If set to 'true', memory for this property will be managed 
                automatically by the object.
  impl
    get         Implementation for the property getter.
    set         Implementation for the property setter.
  proxy         The property is a proxy for some other variable
                If set to 'true', all accesses to the property will instead 
                be applied to the specified target variable. No additional 
                class member variable is created for this property.
    target      Proxy target variable.
    nullError   The exception to be thrown if the target variable is null.
  style         Style of the property.
                If set to 'vector', the property is a vector property.
                If set to 'map', the property is a map property.
  [style = 'vector' or 'map']
  extendedAddFuncs
                If set to 'true' extended element add functions will be 
                created for this property. This allows new, empty elements to 
                be added to a vector or map, adding elements from a 
                std::vector or from another object of the same type.
  element
    type        Type of the vector or map element.
    name        Element name
    plural      Plural of the element name. If this is not set, the plural 
                will be formed by appending 's' to element.name.
    managed     If set to 'true', memory for the element will be managed 
                automatically for the object.
    defaultValue
                Default value for newly created objects.
  [style = 'map']
  key
    type        Type of map key.
    accessType  Type for the key to be used instead of the actual type in 
                accessor function declarations.

================================================================================
XML I/O
================================================================================

This module adds automatic XML serialization and deserialization functions 
for a class.

The XML serialization functions that are added to each class are:

  getXMLElementName()     Get the XML element name for the object.
  getXMLAttributeData()   Get a string containing the XML attributes of 
                          the object.
  getXMLChildData()       Get the XML child data for the object.
  loadFromXMLFile(()      Initialize the object from an XML file.
  getXMLObjectFactory()   Get the XML object factory for the class (static).

The build system is expected to create an XML object factory class for each 
class that needs to be deserialized from XML. This is done using the 
buildClassXMLFactory() builder (see site_scons/builders.py) and the 
xml.conf.xml_object_factory template.

Deserialization using the XML object factory is polymorphic if a child 
class has registered its factory with the XML object factory of the parent 
class. For this to work, it is sufficient to call getXMLObjectFactory() once 
on each of the polymorphic child classes in application code.

For serialization and deserialization of basic types, template functions are 
defined in xmlutils.hpp, xmlutils_private.hpp and xmlutils.cpp. These 
functions are:

  getXML0()          Serialization of IntVector, UIntVector, DoubleVector, 
                     vector of objects and dictionary of objects.
  getObject0()       Polymorphic initialization of an object from an XML 
                     element.
  loadFromXMLFile()  Polymorphic loading of an object from an XML file.
  getObjVector()     Polymorphic loading of a vector of objects.
  getObjMap()        Polymorphic loading of a dictionary of objects.

In addition to this, the XML object factory for each class defines the 
following public functions:

  getObjectXMLElementName()
                     Get the XML element name for the object class.
  getObjectClassName()
                     Get the object class name.
  initObject()       Initialize an object from an XML element or an XML 
                     string.
  createObject()     Create a new, uninitialized object or a new object 
                     initialized from XML element.

--------------------------------------------------------------------------------
Configuration options
--------------------------------------------------------------------------------

class
  features
    'xmlio'        Enable XML I/O for the class.
  
  xml
    elementName    XML element name to be used for the class.
    exception      Exception class to be used for the XML I/O functions.
    childClass[] 
                   Child classes that the XML I/O functions should be aware 
                   of when using polymorphism.
      name         Name of the child class.
                   This should be a fully qualified name if the child class 
                   is outside the project namespace.
      getFunc      The function to be used for initializing an instance of the 
                   child class from an XML element.
   base.[...]
      xml.enabled  Set this to 'true' if a base class supports XML I/O and 
                   the class should register its XML object factory with that 
                   of the base class for polymorphic deserialization.

property.protected[]
  [general]
  valueType        One of [float, integer, bool, object]
                   Used by the XML generator functions to determine how XML 
                   should be generated for the property value.
  xml
    getFunc        Function to be used to initialize an object of the type 
                   of the property from an XML element. If the property is 
                   represented by an attribute, this function must accept a 
                   string and return a value of the property type. If the 
                   property is represented by a child element, the function 
                   must accept the following parameters:
                   (element, childElementName)
    attribute
      name         Attribute name to be used for this property.
                   If non-empty, the property will be included in the 
                   attribute list for the class.
      generatorFunc
        name       Name of a custom XML generator function to use for the 
                   property. The function must accept the following 
                   parameters:
                   (property[, <custom arguments>])
        args       Custom arguments that will be passed to the XML generator 
                   function for the property.
    child
      name         Name of the property set on the child element using the 
                   'pname' attribute.
                   If non-empty, the property will be included in the 
                   child element list for the class.
      elementName  
                   Element name to be used for the child element.
                   If empty, the element name will be one of ['prop', 'vec', 
                   'map'], depending on the property style.
      generatorFunc
        name       Name of a custom XML generator function to use for the 
                   property. The function must accept the following 
                   parameters:
                   (property, indentLevel, attributes[, <custom arguments>])
        args       Custom arguments that will be passed to the XML generator 
                   function for the property.
  
  [valueType = 'object']
  xml
    createFunc     Function to be used to create an object of the type 
                   of the property from an XML element.
  
  [style = 'vector' | 'map']
  element
    valueType      Value type to be used for vector elements.

function
  xml
    fromXML.impl   Implementation of the XML deserialization function 
                   ([...]XMLObjectFactory::initObject())
    loadFromFile.impl
                   Implementation of the XML file loading function 
                   (loadFromXMLFile()).
    childData.impl 
                   Implementation of the XML child data function 
                   (getXMLChildData()).
    attributeData.impl
                   Implementation of the XML attribute data function 
                   (getXMLAttributeData()).

--------------------------------------------------------------------------------
Template variables
--------------------------------------------------------------------------------

class.isAbstract   Set to '1' if the class is an abstract class.

haveXMLAttributes  
                   Set to '1' if the class has XML attributes.
haveXMLChildElements  
                   Set to '1' if the class has XML child elements.
haveXMLBase        Set to '1' if the class has at least one base class that 
                   can be serialized to XML. This is tested via the 
                   class.base.xml.enabled configuration option.

class.xml.haveChildClasses
                   Set to '1' if the class has child classes that the 
                   polymorphic XML I/O functions should be aware of.

