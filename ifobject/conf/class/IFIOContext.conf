# ===================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2014 Joern P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# IFIOContext.conf              Class configuration.
# ===================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<iostream>'
        '"ifobject/types.hpp"'
        '"ifobject/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<fstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"ifobject/utf8.hpp"'
        '"ifobject/IFError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = IFIOContext
	shortDesc = I/O Context
	title = I/O Context
	longDesc = A context that collects data that is used for serializing and deserializing data.
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = iocontext
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::istream*
    setFromType = std::istream*
    name = inputStream
    desc = input stream
}
property.protected[] = {
    type = std::ostream*
    setFromType = std::ostream*
    name = outputStream
    desc = output stream
}
property.protected[] = {
    type = Ionflux::ObjectBase::PointerOffsetMap*
    setFromType = Ionflux::ObjectBase::PointerOffsetMap*
    name = poMapSerialized
    desc = Pointer/offset map (serialized)
}
property.protected[] = {
    type = Ionflux::ObjectBase::PointerOffsetMap*
    setFromType = Ionflux::ObjectBase::PointerOffsetMap*
    name = poMapCurrent
    desc = Pointer/offset map (current)
}
property.protected[] = {
    type = Ionflux::ObjectBase::StreamTypeID
    setFromType = Ionflux::ObjectBase::StreamTypeID
    name = inputStreamType
    desc = input stream type
    protectedWrite = true
}
property.protected[] = {
    type = Ionflux::ObjectBase::StreamTypeID
    setFromType = Ionflux::ObjectBase::StreamTypeID
    name = outputStreamType
    desc = output stream type
    protectedWrite = true
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = inputStream
        value = 0
    }
    initializer[] = {
        name = outputStream
        value = 0
    }
    initializer[] = {
        name = poMapSerialized
        value = 0
    }
    initializer[] = {
        name = poMapCurrent
        value = 0
    }
    initializer[] = {
        name = inputStreamType
        value = Ionflux::ObjectBase::STREAM_TYPE_UNDEFINED
    }
    initializer[] = {
        name = outputStreamType
        value = Ionflux::ObjectBase::STREAM_TYPE_UNDEFINED
    }
    impl = 
}

# Destructor.
destructor.impl = clear();

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
// NOTE: IFIOContext should not be copied.
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = void
	name = clearInputStream
	shortDesc = Clear input stream
	longDesc = Clear the input stream and release all associated resources.
	impl = <<<
if (inputStream != 0)
{
    closeInputStream();
    delete inputStream;
}
inputStream = 0;
inputStreamType = STREAM_TYPE_UNDEFINED;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearOutputStream
	shortDesc = Clear output stream
	longDesc = Clear the output stream and release all associated resources.
	impl = <<<
if (outputStream != 0)
{
    closeOutputStream();
    delete outputStream;
}
outputStream = 0;
outputStreamType = STREAM_TYPE_UNDEFINED;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearStreams
	shortDesc = Clear streams
	longDesc = Clear the input/output streams and release all associated resources.
	impl = <<<
clearInputStream();
clearOutputStream();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearMaps
	shortDesc = Clear maps
	longDesc = Clear the pointer/offset maps and release all associated resources.
	impl = <<<
if (poMapSerialized != 0)
    delete poMapSerialized;
poMapSerialized = 0;
if (poMapCurrent != 0)
    delete poMapCurrent;
poMapCurrent = 0;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the I/O context and release all associated resources.
	impl = <<<
clearStreams();
clearMaps();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = initMaps
	shortDesc = Initialize maps
	longDesc = Initialize the pointer/offset maps.
	impl = <<<
clearMaps();
poMapSerialized = 
    Ionflux::ObjectBase::create<Ionflux::ObjectBase::PointerOffsetMap>(
        this, "initMaps", "pointer/offset map (serialized)");
poMapCurrent = 
    Ionflux::ObjectBase::create<Ionflux::ObjectBase::PointerOffsetMap>(
        this, "initMaps", "pointer/offset map (serialized)");
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = flushOutputStream
	shortDesc = Flush output stream
	longDesc = Flush the output stream.
	impl = <<<
if (outputStream != 0)
    outputStream->flush();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = closeInputStream
	shortDesc = Close input stream
	longDesc = Close the input stream.
	impl = <<<
if ((inputStream != 0) 
    && (inputStreamType == Ionflux::ObjectBase::STREAM_TYPE_FILE))
{
    std::ifstream* s0 = checkedDynamicCast<std::ifstream>(
            inputStream, this, "closeInputStream", "input stream", 
            "std::ifstream");
    s0->close();
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = closeOutputStream
	shortDesc = Close output stream
	longDesc = Close the output stream.
	impl = <<<
if ((outputStream != 0) 
    && (outputStreamType == Ionflux::ObjectBase::STREAM_TYPE_FILE))
{
    std::ofstream* s0 = checkedDynamicCast<std::ofstream>(
            outputStream, this, "closeOutputStream", "output stream", 
            "std::ofstream");
    s0->close();
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = closeStreams
	shortDesc = Close streams
	longDesc = Close the input/output streams.
	impl = <<<
closeInputStream();
closeOutputStream();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = begin
	shortDesc = Begin I/O operation
	longDesc = Begin a new I/O operation, i.e. a serialization or deserialization. This should be called before such an operation to ensure that the I/O context is in the correct state.
	impl = <<<
initMaps();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = finish
	shortDesc = Finish I/O operation
	longDesc = Finish the current I/O operation, i.e. a serialization or deserialization. This should be called before such an operation to ensure that I/O buffers are flushed.
	impl = <<<
flushOutputStream();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = openFileForOutput
	shortDesc = Open file for output
	longDesc = Open the specified file for output.
	param[] = {
	    type = const std::string&
	    name = fileName
	    desc = file name
	}
	impl = <<<
clearOutputStream();
outputStream = new std::ofstream(fileName.c_str(), 
    std::ios_base::out | std::ios_base::binary);
if (outputStream == 0)
{
    throw IFError(getErrorString(
        "Could not allocate output stream.", "openFileForOutput"));
}
if (!outputStream->good())
{
    std::ostringstream status;
    status << "Could not open file '" << fileName << "' for writing.";
    throw IFError(getErrorString(status.str(), 
        "openFileForOutput"));
}
outputStreamType = STREAM_TYPE_FILE;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = openFileForInput
	shortDesc = Open file for input
	longDesc = Open the specified file for input.
	param[] = {
	    type = const std::string&
	    name = fileName
	    desc = file name
	}
	impl = <<<
clearInputStream();
inputStream = new std::ifstream(fileName.c_str(), 
    std::ios_base::in | std::ios_base::binary);
if (inputStream == 0)
{
    throw IFError(getErrorString(
        "Could not allocate input stream.", "openFileForInput"));
}
if (!inputStream->good())
{
    std::ostringstream status;
    status << "Could not open file '" << fileName << "' for reading.";
    throw IFError(getErrorString(status.str(), 
        "openFileForInput"));
}
inputStreamType = STREAM_TYPE_FILE;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setStringBufferOutput
	shortDesc = Set string buffer for output
	longDesc = Set a string buffer for output.
	impl = <<<
clearOutputStream();
outputStream = new std::ostringstream;
if (outputStream == 0)
{
    throw IFError(getErrorString(
        "Could not allocate output stream.", "setStringBufferOutput"));
}
outputStreamType = STREAM_TYPE_STRING;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setStringBufferInput
	shortDesc = Set string buffer for input
	longDesc = Set a string buffer for input.
	param[] = {
	    type = const std::string&
	    name = data
	    desc = input data
	}
	impl = <<<
clearInputStream();
inputStream = new std::istringstream(data);
if (inputStream == 0)
{
    throw IFError(getErrorString(
        "Could not allocate input stream.", "setStringBufferInput"));
}
inputStreamType = STREAM_TYPE_STRING;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getStringBufferOutputValue
	shortDesc = Get output string buffer value
	longDesc = Get the value of the output string buffer.
	param[] = {
	    type = std::string&
	    name = target
	    desc = where to store the data
	}
	impl = <<<
if (outputStreamType != STREAM_TYPE_STRING)
{
    throw IFError(getErrorString(
        "Output stream has incompatible type.", 
        "getStringBufferOutputValue"));
}
std::ostringstream* s0 = checkedDynamicCast<std::ostringstream>(
        outputStream, this, "getStringBufferOutputValue", "output stream", 
        "std::ostringstream");
target.assign(s0->str());
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getStringBufferOutputValue0
	shortDesc = Get output string buffer value
	longDesc = Get the value of the output string buffer.
	impl = <<<
std::string result;
getStringBufferOutputValue(result);
>>>
    return = {
        value = result
        desc = value of the output string buffer
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = getStringBufferInputValue
	shortDesc = Get input string buffer value
	longDesc = Get the value of the input string buffer.
	param[] = {
	    type = std::string&
	    name = target
	    desc = where to store the data
	}
	impl = <<<
if (inputStreamType != STREAM_TYPE_STRING)
{
    throw IFError(getErrorString(
        "Output stream has incompatible type.", 
        "getStringBufferInputValue"));
}
std::istringstream* s0 = checkedDynamicCast<std::istringstream>(
        inputStream, this, "getStringBufferInputValue", "input stream", 
        "std::istringstream");
target.assign(s0->str());
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getStringBufferInputValue0
	shortDesc = Get input string buffer value
	longDesc = Get the value of the input string buffer.
	impl = <<<
std::string result;
getStringBufferInputValue(result);
>>>
    return = {
        value = result
        desc = value of the input string buffer
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::DataSize
	name = readFromInputStream
	shortDesc = Read data from input stream
	longDesc = Read data from the input stream.
	param[] = {
	    type = std::string&
	    name = target
	    desc = where to store the data
	}
	param[] = {
	    type = Ionflux::ObjectBase::DataSize
	    name = numBytes
	    desc = number of bytes to read
	    default = Ionflux::ObjectBase::DATA_SIZE_INVALID
	}
	param[] = {
	    type = Ionflux::ObjectBase::DataSize
	    name = offset
	    desc = offset
	    default = Ionflux::ObjectBase::DATA_SIZE_INVALID
	}
	impl = <<<
if (inputStream == 0)
    return DATA_SIZE_INVALID;
>>>
    return = {
        value = readFromStream(*inputStream, target, numBytes, offset)
        desc = number of bytes read
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::DataSize
	name = writeToOutputStream
	shortDesc = Write data to output stream
	longDesc = Write data to the output stream.
	param[] = {
	    type = const std::string&
	    name = source
	    desc = source data
	}
	param[] = {
	    type = Ionflux::ObjectBase::DataSize
	    name = offset
	    desc = offset
	    default = Ionflux::ObjectBase::DATA_SIZE_INVALID
	}
	impl = <<<
if (outputStream == 0)
    return 0;
>>>
    return = {
        value = writeToStream(*outputStream, source, offset)
        desc = number of bytes written
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::DataSize
	name = getInputStreamSize
	shortDesc = Get input stream size
	longDesc = Get the size of the input stream.
	impl = <<<
if (inputStream != 0)
{
    std::streampos p0 = inputStream->tellg();
    inputStream->seekg(0, inputStream->end);
    std::streampos p1 = inputStream->tellg();
    inputStream->seekg(p0);
    return p1;
}
>>>
    return = {
        value = DATA_SIZE_INVALID
        desc = size of the input stream (in bytes)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::DataSize
	name = getOutputStreamSize
	shortDesc = Get output stream size
	longDesc = Get the size of the output stream.
	impl = <<<
if (outputStream != 0)
{
    std::streampos p0 = outputStream->tellp();
    outputStream->seekp(0, outputStream->end);
    std::streampos p1 = outputStream->tellp();
    outputStream->seekp(p0);
    return p1;
}
>>>
    return = {
        value = DATA_SIZE_INVALID
        desc = size of the output stream (in bytes)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::DataSize
	name = getSerializedOffset
	shortDesc = Get serialized offset
	longDesc = Get the serialized offset for the specified pointer.
	param[] = {
	    type = Ionflux::ObjectBase::GenericPointer
	    name = p
	    desc = pointer
	}
	impl = <<<
nullPointerCheck(poMapSerialized, this, 
    "getSerializedOffset", "Pointer/offset map (serialized)");
>>>
    return = {
        value = <<<
checkedLookup(*poMapSerialized, p, this, 
    "getSerializedOffset", "Offset (serialized)");
>>>
        desc = serialized offset for the specified pointer
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setSerializedOffset
	shortDesc = Set serialized offset
	longDesc = Set the serialized offset for the specified pointer.
	param[] = {
	    type = Ionflux::ObjectBase::GenericPointer
	    name = p
	    desc = pointer
	}
	param[] = {
	    type = Ionflux::ObjectBase::DataSize
	    name = offset
	    desc = offset
	}
	impl = <<<
nullPointerCheck(poMapSerialized, this, 
    "setSerializedOffset", "Pointer/offset map (serialized)");
(*poMapSerialized)[p] = offset;
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::DataSize
	name = getCurrentOffset
	shortDesc = Get current offset
	longDesc = Get the current offset for the specified pointer.
	param[] = {
	    type = Ionflux::ObjectBase::GenericPointer
	    name = p
	    desc = pointer
	}
	impl = <<<
nullPointerCheck(poMapCurrent, this, 
    "getCurrentOffset", "Pointer/offset map (current)");
>>>
    return = {
        value = <<<
checkedLookup(*poMapCurrent, p, this, 
    "getCurrentOffset", "Offset (current)");
>>>
        desc = current offset for the specified pointer
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setCurrentOffset
	shortDesc = Set current offset
	longDesc = Set the current offset for the specified pointer.
	param[] = {
	    type = Ionflux::ObjectBase::GenericPointer
	    name = p
	    desc = pointer
	}
	param[] = {
	    type = Ionflux::ObjectBase::DataSize
	    name = offset
	    desc = offset
	}
	impl = <<<
nullPointerCheck(poMapCurrent, this, 
    "setCurrentOffset", "Pointer/offset map (current)");
(*poMapCurrent)[p] = offset;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = printDebugInfo
	shortDesc = Print debug information
	longDesc = Print debug information for the I/O context.
	param[] = {
	    type = bool
	    name = inputStreamVerbose
	    desc = show verbose information on input stream
	    default = false
	}
	param[] = {
	    type = bool
	    name = outputStreamVerbose
	    desc = show verbose information on output stream
	    default = false
	}
	param[] = {
	    type = bool
	    name = poMapSerializedVerbose
	    desc = show verbose information on pointer/offset map (serialized)
	    default = false
	}
	param[] = {
	    type = bool
	    name = poMapCurrentVerbose
	    desc = show verbose information on pointer/offset map (current)
	    default = false
	}
	impl = <<<
std::cout << "input: " 
    << getStreamTypeValueString(inputStreamType) << std::endl;
if (inputStreamVerbose 
    && (inputStream != 0))
{
    std::string data;
    readFromInputStream(data, DATA_SIZE_INVALID, 0);
    std::cout << "  size = " << data.size() << std::endl 
        << "  data:" << std::endl;
    std::cout << Ionflux::ObjectBase::utf8MakeNiceHexForData(data) 
        << std::endl;
}
std::cout << "output: " 
    << getStreamTypeValueString(outputStreamType) << std::endl;
if (outputStreamVerbose 
    && (outputStream != 0))
{
    std::cout << "  size = " << getOutputStreamSize() << std::endl;
    if (outputStreamType == STREAM_TYPE_STRING)
    {
        std::string data;
        getStringBufferOutputValue(data);
        std::cout << "  data:" << std::endl;
        std::cout << utf8MakeNiceHexForData(data) << std::endl;
    }
}
std::cout << "pointer/offset map (serialized): ";
if (poMapSerialized != 0)
{
    std::cout << "size = " << poMapSerialized->size() << std::endl;
    if (poMapSerializedVerbose)
    {
        Ionflux::ObjectBase::DataSize k = 0;
        for (Ionflux::ObjectBase::PointerOffsetMap::const_iterator i = 
            poMapSerialized->begin(); i != poMapSerialized->end(); i++)
        {
            std::cout << "  [" << std::setw(3) << std::setfill('0') 
                << std::right << k << "] " << (*i).first << " -> " 
                << (*i).second << std::endl;
            k++;
        }
    }
} else
    std::cout << "<null>"<< std::endl;
std::cout << "pointer/offset map (current): ";
if (poMapCurrent != 0)
{
    std::cout << "size = " << poMapCurrent->size() << std::endl;
    if (poMapCurrentVerbose)
    {
        Ionflux::ObjectBase::DataSize k = 0;
        for (Ionflux::ObjectBase::PointerOffsetMap::const_iterator i = 
            poMapCurrent->begin(); i != poMapCurrent->end(); i++)
        {
            std::cout << "  [" << std::setw(3) << std::setfill('0') 
                << std::right << k << "] " << (*i).first << " -> " 
                << (*i).second << std::endl;
            k++;
        }
    }
} else
    std::cout << "<null>"<< std::endl;
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << "input: " 
    << Ionflux::ObjectBase::getStreamTypeValueString(inputStreamType) 
    << ", output: " 
    << Ionflux::ObjectBase::getStreamTypeValueString(outputStreamType);
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

