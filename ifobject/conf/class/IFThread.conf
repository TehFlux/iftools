# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFLogMessage.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	header = {
		'<pthread.h>'
		'"ifobject/IFObject.hpp"'
	}
	impl = {
		'<unistd.h>'
		'<sstream>'
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.
typedef = {
	'void* (*IFThreadFunction)(void*)'
}

# Helper structs.

# events
event[] = {
	id = thread
	# using directives
	using = {
		'namespace std'
	}
	# include files.
	include = {
	   header = {
			'"ifobject/types.hpp"'
			'"ifobject/IFObject.hpp"'
	   }
	}
	# forward declarations
	forward = {
	 	'class IFThread'
	}
	# default constructor
	constructor.default = {
		initializer[] = {
			name = type
			value = TYPE_UNDEFINED
		}
		initializer[] = {
			name = source
			value = 0
		}
	}
	# constants
	constant.public[] = {
		name = TYPE_UNDEFINED
		type = Ionflux::ObjectBase::IFEventType
		desc = event type: undefined
		value = 0
	}
	constant.public[] = {
		name = TYPE_START
		type = Ionflux::ObjectBase::IFEventType
		desc = event type: start
		value = 1
	}
	constant.public[] = {
		name = TYPE_RUN
		type = Ionflux::ObjectBase::IFEventType
		desc = event type: run
		value = 2
	}
	constant.public[] = {
		name = TYPE_STOP
		type = Ionflux::ObjectBase::IFEventType
		desc = event type: stop
		value = 3
	}
	# properties (protected)
	property.protected[] = {
		type = Ionflux::ObjectBase::IFEventType
		setFromType = Ionflux::ObjectBase::IFEventType
		name = type
		desc = event type
	}
	property.protected[] = {
		type = Ionflux::ObjectBase::IFThread*
		setFromType = Ionflux::ObjectBase::IFThread*
		name = source
		desc = event source
	}
}

# signals
signal[] = {
	id = thread
	return.type = bool
	param[].type = const Ionflux::ObjectBase::IFThreadEvent&
	instance[] = {
		name = start
		desc = thread start signal
		id = start
	}
	instance[] = {
		name = run
		desc = thread run signal
		id = run
	}
	instance[] = {
		name = stop
		desc = thread stop signal
		id = stop
	}
}

# Class definition.
class = {
	name = IFThread
	shortDesc = Thread
	title = Thread
	longDesc = A thread of program execution.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
		}
	}
	features = {
		'logmessage'
	}
}

# Public constructors.
constructor.default = {
	initializer[] = {
		name = shutdownFlag
		value = Ionflux::ObjectBase::IFThread::SHUTDOWN_DISABLED
	}
	initializer[] = {
		name = runFlag
		value = false
	}
	initializer[] = {
		name = initFlag
		value = false
	}
	initializer[] = {
		name = threadFunction
		value = startImpl
	}
	initializer[] = {
		name = context
		value = 0
	}
	impl = pthread_attr_init(&threadAttributes);\
pthread_attr_setdetachstate(&threadAttributes, PTHREAD_CREATE_JOINABLE);
}

# Destructor.
destructor.impl = pthread_attr_destroy(&threadAttributes);

# Member variables.
variable.protected[] = {
	type = pthread_t
	name = thread
	desc = Thread
}
variable.protected[] = {
	type = pthread_attr_t
	name = threadAttributes
	desc = Thread attributes
}
variable.protected[] = {
	type = IFAtomic
	name = shutdownFlag
	desc = Shutdown flag
}
variable.protected[] = {
	type = bool
	name = runFlag
	desc = Run flag
}
variable.protected[] = {
	type = bool
	name = initFlag
	desc = Initialization flag
}

# Class properties.
property.protected[] = {
	type = Ionflux::ObjectBase::IFThreadFunction
	setFromType = Ionflux::ObjectBase::IFThreadFunction
	name = threadFunction
	desc = The function which is executed within the thread
}
property.protected[] = {
	type = Ionflux::ObjectBase::IFObject*
	setFromType = Ionflux::ObjectBase::IFObject*
	name = context
	desc = Context to be associated with the thread
}

# Public static constants.
constant.public[] = {
	type = IFAtomic
	name = SHUTDOWN_DISABLED
	desc = Shutdown state: disabled
	value = 0
}
constant.public[] = {
	type = IFAtomic
	name = SHUTDOWN_ENABLED
	desc = Shutdown state: enabled
	value = 1
}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = bool
	name = start
	shortDesc = Start
	longDesc = Start the thread and execute the thread function within the thread.\
\
\sa startImpl
	impl = int result = pthread_create(&thread, &threadAttributes, \
	threadFunction, reinterpret_cast<void*>(this));\
if (result != 0)\
\{\
	ostringstream state;\
	state << "Could not create thread (error code: " << result << ").";\
	log(IFLogMessage(state.str(), VL_ERROR, \
		this, "start"));\
	return false;\
\}\
runFlag = true;\
initFlag = true;\
IFThreadEvent* event = createThreadEvent();\
event->setType(IFThreadEvent::TYPE_START);\
event->setSource(this);\
signalStart.emit(*event);\
removeLocalRef(event);
	return = {
		value = true
		desc = \c true on success, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void*
	name = run
	shortDesc = Run
	longDesc = The function doing stuff in this thread. This will invoke the handlers for the run signal and return the object returned by one of the handlers.\
\
\note To change the default behavior when the thread is run, you can either override the run() function, or change the thread function using setThreadFunction().
	impl = if (!initFlag)\
\{\
	log(IFLogMessage("Thread has not been initialized.", \
		VL_ERROR, this, "run"));\
	return 0;\
\}\
shutdownFlag = SHUTDOWN_DISABLED;\
IFThreadEvent* event = createThreadEvent();\
event->setType(IFThreadEvent::TYPE_RUN);\
event->setSource(this);\
void* result = reinterpret_cast<void*>(signalRun.emit(*event));\
runFlag = false;\
removeLocalRef(event);
	return = {
		value = result;
		desc = Object returned by one of the handlers for the run signal
	}
}
function.public[] = {
	spec = virtual
	type = void*
	name = join
	shortDesc = Join
	longDesc = Join the thread with another thread.
	impl = void* result = 0;\
if (initFlag)\
	pthread_join(thread, &result);\
else\
	log(IFLogMessage("Thread has not been initialized.", \
		VL_ERROR, this, "join"));
	return = {
		value = result
		desc = Return value of the thread function
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = stop
	shortDesc = Stop
	longDesc = Stop the thread. Whether this actually does something depends on the implementation of the run() function. By default, calling stop() will set the shutdown flag to SHUTDOWN_ENABLED and emit the stop signal.
	impl = shutdownFlag = SHUTDOWN_ENABLED;\
IFThreadEvent* event = createThreadEvent();\
event->setType(IFThreadEvent::TYPE_STOP);\
event->setSource(this);\
signalStop.emit(*event);\
removeLocalRef(event);
}
function.public[] = {
	spec = virtual
	type = bool
	name = isRunning
	const = true
	shortDesc = Check whether the thread is running
	longDesc = Check whether the thread is running
	impl = 
	return = {
		value = runFlag
		desc = \c true if the thread is running, \c false otherwise
	}
}
function.public[] = {
	spec = static
	type = void*
	name = startImpl
	shortDesc = Start implementation
	longDesc = This function is the default thread function used by start(). Its purpose is to invoke the run() function on the specified thread. The actual implementation of the start() function can be changed by specifying a different thread function.\
\
\sa start
	param[] = {
		type = void*
		name = threadArgs
		desc = Thread arguments
	}
	impl = IFThread* theThread = reinterpret_cast<IFThread*>(threadArgs);
	return = {
		value = theThread->run()
		desc = Return value of the thread function
	}
}
function.public[] = {
	spec = static
	type = Ionflux::ObjectBase::IFObject*
	name = create
	shortDesc = Create instance
	longDesc = Create a new instance of the class. If the optional parent object is specified, a local reference for the new object will be added to the parent object.
	param[] = {
		type = Ionflux::ObjectBase::IFObject*
		name = parentObject
		desc = Parent object
		default = 0
	}
	impl = IFThread* newObject = new IFThread();\
if (newObject == 0)\
\{\
	cerr << IFLogMessage("Could not allocate object instance.", \
		VL_ERROR, 0, "IFThread::create") << endl;\
	return 0;\
\}\
if (parentObject != 0)\
	parentObject->addLocalRef(newObject);
	return = {
		value = newObject
		desc = Pointer to the new instance, or 0 if an error occurs
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = copy
	const = true
	bindings = {
		ruby = {
			enabled = true
		}
	}
	shortDesc = Copy
	longDesc = Create a copy of the object.
	impl = IFThread* newThread = new Ionflux::ObjectBase::IFThread();\
*newThread = *this;
	return = {
		value = newThread
		desc = Copy of the object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFThread&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFThread&
		name = otherThread
		desc = Thread
	}
	impl = 
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFObject&
		name = otherObject
		desc = Object
	}
	impl = const IFThread* otherThread = dynamic_cast<const IFThread*>(&otherObject);\
if (otherThread != 0)\
	*this = *otherThread;\
else\
	cerr << "[IFThread::operator=] ERROR: "\
		"Unable to assign object '" << otherObject.getClassName() \
		<< "'." << endl;
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = 
	return = {
		value = IFObject::getString()
		desc = String representation of the object
	}
}
function.public[] = {
	spec = static
	type = void
	name = sleep
	shortDesc = Sleep
	longDesc = Do nothing for the specified amount of time
	param[] = {
		type = unsigned int
		name = sleepSecs
		desc = Time in seconds
		bindings.ruby.type = UInt
	}
	impl = ::sleep(sleepSecs);
}
function.public[] = {
	spec = static
	type = void
	name = nanoSleep
	shortDesc = Sleep (nanosec resolution)
	longDesc = Do nothing for the specified amount of time.
	param[] = {
		type = unsigned int
		name = sleepSecs
		desc = Time in seconds
	}
	param[] = {
		type = unsigned int
		name = sleepNanoSecs
		desc = Time in nanoseconds
	}
	impl = timespec sleepTime;\
timespec remainingTime;\
sleepTime.tv_sec = sleepSecs;\
sleepTime.tv_nsec = sleepNanoSecs;\
remainingTime.tv_sec = 0;\
remainingTime.tv_nsec = 0;\
while ((sleepTime.tv_sec != 0)\
	|| (sleepTime.tv_nsec != 0))\
\{\
	::nanosleep(&sleepTime, &remainingTime);\
	sleepTime = remainingTime;\
\}
}
