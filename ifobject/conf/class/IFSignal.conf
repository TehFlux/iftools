# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFSignal.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	header = {
		'"ifobject/IFObject.hpp"'
	}
	impl = {
		'<sstream>'
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.

# Helper structs.

# events

# signals

# Class definition.
class = {
	name = IFSignal
	shortDesc = Signal
	title = Signal
	longDesc = A signal. The purpose of this class is to make signals available for handling by code which is aware of features of the Ionflux Object Base System, but not of the actual mechanism which is used for implementing signals.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
		}
	}
	features = {
		'logmessage'
	}
}

# Public constructors.
constructor.default = {
	initializer[] = {
		name = signal
		value = 0
	}
}
constructor.public[] = {
	param[] = {
		type = Ionflux::ObjectBase::IFSignalBase
		name = initSignal
		desc = Initial signal
	}
	param[] = {
		type = Ionflux::ObjectBase::IFSignalType
		name = initType
		desc = Initial signal type
	}
	param[] = {
		type = std::string
		name = initName
		desc = Initial signal name
	}
	initializer[] = {
		name = signal
		value = initSignal
	}
	initializer[] = {
		name = type
		value = initType
	}
	initializer[] = {
		name = name
		value = initName
	}
}

# Member variables.

# Class properties.
property.protected[] = {
	type = Ionflux::ObjectBase::IFSignalBase
	readOnly = true
	setFromType = Ionflux::ObjectBase::IFSignalBase
	name = signal
	desc = Signal
}
property.protected[] = {
	type = Ionflux::ObjectBase::IFSignalType
	readOnly = true
	setFromType = const Ionflux::ObjectBase::IFSignalType&
	name = type
	desc = Signal type
}
property.protected[] = {
	type = std::string
	readOnly = true
	setFromType = const std::string&
	name = name
	desc = Signal name
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = static
	type = Ionflux::ObjectBase::IFObject*
	name = create
	shortDesc = Create instance
	longDesc = Create a new instance of the class. If the optional parent object is specified, a local reference for the new object will be added to the parent object.
	param[] = {
		type = Ionflux::ObjectBase::IFObject*
		name = parentObject
		desc = Parent object
		default = 0
	}
	impl = IFSignal* newObject = new IFSignal();\
if (newObject == 0)\
\{\
	cerr << IFLogMessage("Could not allocate object instance.", \
		VL_ERROR, 0, "IFObject::create") << endl;\
	return 0;\
\}\
if (parentObject != 0)\
	parentObject->addLocalRef(newObject);
	return = {
		value = newObject
		desc = Pointer to the new instance, or 0 if an error occurs
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = copy
	const = true
	bindings = {
		ruby.enabled = true
	}
	shortDesc = Copy
	longDesc = Create a copy of the object.
	impl = IFSignal* newSignal = new IFSignal();\
*newSignal = *this;
	return = {
		value = newSignal
		desc = Copy of the object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFSignal&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFSignal&
		name = otherSignal
		desc = Test module
	}
	impl = 
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFObject&
		name = otherObject
		desc = IFObject
	}
	impl = const IFSignal* otherSignal = dynamic_cast<const IFSignal*>(&otherObject);\
if (otherSignal != 0)\
	*this = *otherSignal;\
else\
	std::cerr << "[IFSignal::operator=] ERROR: "\
		"Unable to assign object '" << otherObject.getClassName() \
		<< "'." << std::endl;
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << IFObject::getString() << ":{" << type << ";" << name << "}";
	return = {
		value = state.str()
		desc = String representation of the object
	}
}
