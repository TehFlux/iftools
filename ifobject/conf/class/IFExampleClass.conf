# ==========================================================================
# Ionflux Object Base System
# Copyright © 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFExampleClass.conf          Example class for demonstrating features.
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
		'<string>'
		'<iostream>'
		'<vector>'
		'<map>'
		'"ifobject/IFObject.hpp"'
	}
   # these includes will be added in the implementation file
   impl = {
#		'"SomeClass.hpp"'
		'<sstream>'
   }
}

# forward declarations
# forward = {
# 	'"class SomeClass"'
# }

# undefine macros
# undef = {
#	# undefine in the header file
#	header = {
#	}
#	# undefine in the implementation file
#	impl = {
#		'assert'
#	}
# }

# typedefs
typedef = {
	'std::map<int, int> FooMap'
}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.
# typedefAfterSignals = {
# }

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.
struct[] = {
	name = Blupp
	desc = A blupp object
	field[] = {
		type = int
		name = foo
		desc = Foo value
	}
	field[] = {
		type = int
		name = bar
		desc = Bar value
	}
}
struct[] = {
	name = Blah
	desc = A blah object
	field[] = {
		type = double
		name = baz
		desc = Baz value
	}
	field[] = {
		type = double
		name = baf
		desc = Baf value
	}
	constant[] = {
		type = int
		name = SOME_FLAG
		desc = Some flag
		value = -1
	}
}

# events
#
# Event classes will be created automatically for any events which have been 
# declared in this way.
event[] = {
	# The event ID will be used to construct the name of the event.
	id = example
	# Events are implemented as classes derived from IFObject and can have 
	# most of the properties which are also available for defining normal 
	# classes, including:
	#
	# • using directives
	# • include files
	# • forward declarations
	# • undefine macros
	# • typedefs
	# • helper structs
	# • constructors/destructors
	# • properties
	# • constants
	# • functions
	#
	# using directives
	# using = {
	#	'namespace std'
	# }
	# include files.
	include = {
	   header = {
	   		'"ifobject/IFObject.hpp"'
	   }
	   impl = {
			'"test/include/IFExampleClass.hpp"'
	   }
	}
	# forward declarations
	forward = {
	 	'class IFExampleClass'
	}
	# default constructor
	constructor.default = {
		initializer[] = {
			name = type
			value = TYPE_FIRST
		}
		initializer[] = {
			name = source
			value = 0
		}
	}
	# constants
	constant.public[] = {
		name = TYPE_FIRST
		type = int
		desc = event type: first
		value = 0
	}
	constant.public[] = {
		name = TYPE_SECOND
		type = int
		desc = event type: second
		value = 1
	}
	# properties (protected)
	property.protected[] = {
		type = int
		setFromType = int
		name = type
		desc = event type
	}
	property.protected[] = {
		type = Ionflux::Example::IFExampleClass*
		setFromType = Ionflux::Example::IFExampleClass*
		name = source
		desc = event source
	}
}

# signals
#
# This will automatically create all necessary code for signals used by 
# your class.
signal[] = {
	# The signal ID will be used to construct the name of the signal.
	id = example
	# return type of the signal handler
	return.type = void
	# parameters of the signal handler
	param[].type = const Ionflux::Example::IFExampleEvent&
	# signal instances which will be added to the class
	instance[] = {
		name = first
		desc = first signal
		id = first
	}
	instance[] = {
		name = second
		desc = second signal
		id = second
	}
}

# class definition
class = {
	name = IFExampleClass
	shortDesc = Example class
	title = Example class
	longDesc = This is an example class used to demonstrate features of the Ionflux Object Base System.
	# Use this if the class uses an additional include prefix besides the
	# project include prefix.
#	includePrefix = 
	group.name = ifobject
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			# inheritance type (optional)
#			inheritanceType = public
            # class name
			name = IFObject
#			# include file (optional)
#			include = 
		}
#		# other base classes
#		other[] = {
#           # class name
#			name = 
#			# include file (optional)
#			include = 
#		}
	}
	# Enable specific features of the Ionflux Object Base System.
	# This causes all necessary headers to be included and may also influence 
	# the default implementation of functions.
	features = {
		# • mutex
		# This makes IFMutex available to the implementation. This feature 
		# will be enabled by default if 'guards' is enabled.
		# 'mutex'
		# • function guards
		# If enabled, guards will be added to functions.
		# 'guards'
		# • auto guards
		# If enabled, the object will be set to guarded mode in the 
		# constructors. This will also enable the 'guards' and 'mutex' 
		# features.
		'autoguards'
		# • log message
		# Enable IFLogMessage based message reporting.
		'logmessage'
		# • signal
		# This makes IFSignal abailable. This feature will be enabled by 
		# default if the class uses signals.
		# 'signal'
		# Enable automatic serialization of properties and member variables.
		# This requires that a pack() function is available for the type of 
		# the property. Implementations of the pack() function are provided 
		# for all simple types, IFObject and some of the types derived from 
		# IFobject.
		'serialize'
	}
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = double
		name = initMiep
		desc = Initial miepness
	}
}

# Member variables.
variable.protected[] = {
	name = miep
	type = double
	desc = Miepness of the object
	serialize = true
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	name = someValue
	type = int
	setFromType = int
	desc = Some numeric value
	serialize = true
}
property.protected[] = {
	name = someText
	type = std::string
	setFromType = const std::string&
	desc = Some byte string
	serialize = true
}
property.protected[] = {
	# read-only property
	name = roProp
	type = double
	setFromType = double
	desc = A read-only property
	readOnly = true
	serialize = true
}
property.protected[] = {
	# helper struct used as a property type
	name = specialBlah
	type = Blah*
	setFromType = Blah*
	desc = Special Blah object
}
property.protected[] = {
	# Set the 'style' option to vector to automatically provide 
	# functions for secure access to elements of a vector field.
	# Also, the type of the vector field will be generated automatically 
	# from the element type.
	style = vector
	name = blupps
	desc = Blupp vector
	element = {
		type = Blupp*
		name = Blupp
		# Set addType and removeType if you need special types for adding 
		# or removing elements.
		#  addType = const Blupp&
		#  removeType = const Blupp&
		# The default value is the value which will be returned if a 
		# requested element is not found.
		#  defaultValue = 0
		# If the 'managed' option is set to 'true', IFObject based types will 
		# be referenced and unreferenced properly when added/removed.
		#  managed = true
	}
	# You can set the vector to be read-only as well.
	#  readOnly = true
}
property.protected[] = {
	# Set the 'style' option to map to automatically provide 
	# functions for secure access to elements of a map.
	# Also, the type of the map field will be generated automatically 
	# from the key type and the element type.
	style = map
	name = blahs
	desc = Blah map
	key = {
		type = std::string
		# The access type will be used in function declarations instead 
		# of the actual key type.
		accessType = const std::string&
	}
	element = {
		type = Blah*
		name = Blah
		# Set addType and removeType if you need special types for adding 
		# or removing elements.
		#  addType = const Blah&
		#  removeType = const Blah&
		# The default value is the value which will be returned if a 
		# requested element is not found.
		#  defaultValue = 0
		# If the 'managed' option is set to 'true', IFObject based types will 
		# be referenced and unreferenced properly when added/removed.
		#  managed = true
	}
	# You can set the map to be read-only as well.
	#  readOnly = true
}

# Public static constants.
constant.public[] = {
	name = MODULE_NAME
	type = std::string
	desc = Module name
	value = "Example"
}
constant.public[] = {
	name = MODULE_VERSION
	type = unsigned int
	desc = Module version
	value = 1
}

# Protected static constants.
constant.protected[] = {
	name = SOME_UID
	type = std::string
	desc = Unique ID
	value = "42"
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = int
	name = doStuff
	shortDesc = Do stuff.
	longDesc = Does some stuff.
	param[] = {
		type = int
		name = foo
		desc = A number to do stuff with
	}
	param[] = {
		type = char
		name = bar
		desc = A character to do stuff with
		default = 'x'
	}
	return.value = 0
	return.desc = The result of doing stuff
}
function.protected[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = doStuffWithObjectImpl
	shortDesc = Do stuff with object (implementation)
	longDesc = Does some stuff with an object. This is the implementation for the \c doStuffWithObject operation.
	param[] = {
		type = Ionflux::ObjectBase::IFObject*
		name = victim
		desc = object
	}
	return.value = 0
	return.desc = The result of doing stuff with the object
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	const = true
	name = doNothing
	shortDesc = Do nothing.
	longDesc = Does nothing.
	impl = cout << "Doing nothing." << endl;
}

# Pure virtual member functions.
# function.public[] = {
#	spec = virtual
#	type = void
#	pureVirtual = true
#	name = needsImplementation
#	shortDesc = Needs implementation.
#	longDesc = This function must be implemented by a derived class.
# }

# operations
operation[] = {
	name = doStuffWithObjectOp
#	const = true
	param[] = {
		type = Ionflux::ObjectBase::IFObject
		name = victim
		desc = object
		optional = false
		default = 0
	}
	result[] = {
		type = Ionflux::ObjectBase::IFObject
		desc = result
	}
	impl = return doStuffWithObjectImpl(victim);
}
