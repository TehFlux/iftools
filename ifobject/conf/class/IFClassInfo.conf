# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFClassInfo.conf          Run-time type information.
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# include files.
include = {
	header = {
		'<string>'
		'<vector>'
		'"ifobject/types.hpp"'
	}
#   impl = {
#   }
}

# undefine macros
# undef = {
# }

# forward declarations
forward = {
	'class IFClassInfo'
}

# typedefs
typedef = {
	'std::vector<const Ionflux::ObjectBase::IFClassInfo*> IFClassInfoVector'
}

# helper structs
struct[] = {
	name = IFOpParamInfo
	desc = Operation parameter info
	field[] = {
		type = const Ionflux::ObjectBase::IFClassInfo*
		name = type
		desc = Type
	}
	field[] = {
		type = std::string
		name = name
		desc = Name
	}
	field[] = {
		type = std::string
		name = desc
		desc = Description
	}
	field[] = {
		type = bool
		name = optional
		desc = Whether the parameter is optional
	}
	field[] = {
		type = Ionflux::ObjectBase::IFObject*
		name = defaultValue
		desc = Default value
	}
}
struct[] = {
	name = IFOpResultInfo
	desc = Operation result info
	field[] = {
		type = const Ionflux::ObjectBase::IFClassInfo*
		name = type
		desc = Type
	}
	field[] = {
		type = std::string
		name = desc
		desc = Description
	}
}
struct[] = {
	name = IFOpInfo
	desc = Operation info
	field[] = {
		type = Ionflux::ObjectBase::IFOpName
		name = name
		desc = Operation name
	}
	field[] = {
		type = Ionflux::ObjectBase::IFOpParamInfoVector
		name = paramInfo
		desc = Operation parameter information
	}
	field[] = {
		type = Ionflux::ObjectBase::IFOpResultInfoVector
		name = resultInfo
		desc = Operation result information
	}
}

# Class definition.
class = {
	name = IFClassInfo
	shortDesc = Class information
	title = Class information
	longDesc = This class provides run-time type information for IFObject based types.
	group.name = ifobject
}

# constructor
constructor.default = {
	initializer[] = {
		name = opInfo
		value = 0
	}
	initializer[] = {
		name = name
		value = "<undefined>"
	}
	initializer[] = {
		name = desc
		value = "<undefined>"
	}
}

# class member variables
variable.protected[] = {
	type = IFClassInfoVector
	name = baseClassInfo
	desc = base class type information
}
variable.protected[] = {
	type = Ionflux::ObjectBase::IFOpNameInfoMap*
	name = opInfo
	desc = Information on supported operations
}

# class properties
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = name
	desc = class name
	readOnly = true
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = desc
	desc = class description
	readOnly = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = int
	name = getNumBaseClasses
	const = true
	shortDesc = Get number of base classes
	longDesc = Get the number of base classes.
	impl = 
	return = {
		value = baseClassInfo.size()
		desc = Number of base classes
	}
}
function.public[] = {
	spec = virtual
	type = const Ionflux::ObjectBase::IFClassInfo*
	name = getBaseClassInfo
	const = true
	shortDesc = Get base class information
	longDesc = Get the class information record for the base class with the specified index.
	param[] = {
		type = unsigned int
		name = index
		desc = Index
	}
	impl = IFClassInfo* result = 0;\
if (index < baseClassInfo.size())\
	return baseClassInfo[index];
	return = {
		value = result
		desc = Base class information record, or 0 if the index is out of range
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isDerivedFrom
	const = true
	shortDesc = Derived class check
	longDesc = Check whether the class is derived from the specified class by searching base class records recursively. If \c recursive is set to \c false, the search will be restricted to direct base classes.
	param[] = {
		type = const Ionflux::ObjectBase::IFClassInfo*
		name = searchClass
		desc = Base class to search for
	}
	param[] = {
		type = bool
		name = recursive
		desc = Whether to search recursively
		default = true
	}
	impl = bool result = false;\
IFClassInfoVector::const_iterator i = baseClassInfo.begin();\
const IFClassInfo* currentClassInfo = 0;\
while (!result\
	&& (i != baseClassInfo.end()))\
\{\
	currentClassInfo = *i;\
	if (currentClassInfo != 0)\
	\{\
		if (currentClassInfo == searchClass)\
			result = true;\
		else\
		if (recursive)\
			result = currentClassInfo->isDerivedFrom(searchClass, true);\
	\}\
	i++;\
\}
	return = {
		value = result
		desc = \c true if the class is a base class of the specified class, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isBaseOf
	const = true
	shortDesc = Base class check
	longDesc = Check whether the class is a base class of the specified class by searching base class records recursively. If \c recursive is set to \c false, the search will be restricted to direct subclasses.
	param[] = {
		type = const Ionflux::ObjectBase::IFClassInfo*
		name = checkClass
		desc = Class to be checked
	}
	param[] = {
		type = bool
		name = recursive
		desc = Whether to search recursively
		default = true
	}
	impl = if (checkClass == 0)\
	return false;
	return = {
		value = checkClass->isDerivedFrom(this, recursive)
		desc = \c true if the class is a base class of the specified class, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isDerivedFrom
	const = true
	shortDesc = Derived class check
	longDesc = Check whether the class is derived from the specified class by searching base class records recursively. If \c recursive is set to \c false, the search will be restricted to direct base classes.
	param[] = {
		type = const std::string&
		name = searchClassName
		desc = Base class name to search for
	}
	param[] = {
		type = bool
		name = recursive
		desc = Whether to search recursively
		default = true
	}
	impl = bool result = false;\
IFClassInfoVector::const_iterator i = baseClassInfo.begin();\
const IFClassInfo* currentClassInfo = 0;\
while (!result\
	&& (i != baseClassInfo.end()))\
\{\
	currentClassInfo = *i;\
	if (currentClassInfo != 0)\
	\{\
		if (currentClassInfo->getName() == searchClassName)\
			result = true;\
		else\
		if (recursive)\
			result = currentClassInfo->isDerivedFrom(searchClassName, true);\
	\}\
	i++;\
\}
	return = {
		value = result
		desc = \c true if the class is a base class of the specified class, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = getOpInfo
	const = true
	shortDesc = Get operation info records
	longDesc = Get information about supported operations. The result is a map of operation names to operation information records.
	param[] = {
		type = Ionflux::ObjectBase::IFOpNameInfoMap&
		name = target
		desc = Where to store the information info records
	}
	impl = if (opInfo != 0)\
	target = *opInfo;\
else\
	target.clear();
}
function.public[] = {
	spec = virtual
	type = const Ionflux::ObjectBase::IFOpInfo*
	name = getOpInfo
	const = true
	shortDesc = Get operation info record
	longDesc = Get the information record for an operation by name.
	param[] = {
		type = const Ionflux::ObjectBase::IFOpName&
		name = opName
		desc = Operation name
	}
	impl = if (opInfo == 0)\
	return 0;\
IFOpNameInfoMap::const_iterator i = opInfo->find(opName);\
if (i != opInfo->end())\
	return (*i).second;
	return = {
		value = 0
		desc = Operation info record, or 0 if the operation is not supported.
	}
}
