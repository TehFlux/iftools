# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFMutex.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	header = {
		'"ifobject/IFObject.hpp"'
		'<pthread.h>'
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.

# Helper structs.

# events

# signals

# Class definition.
class = {
	name = IFMutex
	shortDesc = Mutex
	title = Mutex
	longDesc = A mutual exclusion for use with threads.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
		}
	}
}

# Public constructors.
constructor.default = {
	initializer[] = {
		name = type
		value = Ionflux::ObjectBase::IFMutex::TYPE_DEFAULT
	}
	impl = pthread_mutexattr_init(&attributes);\
pthread_mutexattr_settype(&attributes, PTHREAD_MUTEX_DEFAULT);\
pthread_mutex_init(&mutex, &attributes);
}
constructor.public[] = {
	param[] = {
		type = Ionflux::ObjectBase::IFMutexType
		name = initType
		desc = Initial type
	}
	initializer[] = {
		name = type
		value = initType
	}
	impl = pthread_mutexattr_init(&attributes);\
if (initType == TYPE_NORMAL)\
	pthread_mutexattr_settype(&attributes, PTHREAD_MUTEX_NORMAL);\
else\
if (initType == TYPE_ERRORCHECK)\
	pthread_mutexattr_settype(&attributes, PTHREAD_MUTEX_ERRORCHECK);\
else\
if (initType == TYPE_RECURSIVE)\
	pthread_mutexattr_settype(&attributes, PTHREAD_MUTEX_RECURSIVE);\
else\
	pthread_mutexattr_settype(&attributes, PTHREAD_MUTEX_DEFAULT);\
pthread_mutex_init(&mutex, &attributes);
}

# Destructor.
destructor.impl = pthread_mutex_destroy(&mutex);\
pthread_mutexattr_destroy(&attributes);\

# Member variables.
variable.protected[] = {
	type = pthread_mutex_t
	name = mutex
	desc = Mutex
}
variable.protected[] = {
	type = pthread_mutexattr_t
	name = attributes
	desc = Attributes
}

# Class properties.
property.protected[] = {
	type = Ionflux::ObjectBase::IFMutexType
	name = type
	desc = Type
	readOnly = true
}

# Public static constants.
constant.public[] = {
	type = Ionflux::ObjectBase::IFMutexType
	name = TYPE_DEFAULT
	desc = Mutex type: default
	value = 0
}
constant.public[] = {
	type = Ionflux::ObjectBase::IFMutexType
	name = TYPE_NORMAL
	desc = Mutex type: normal
	value = 1
}
constant.public[] = {
	type = Ionflux::ObjectBase::IFMutexType
	name = TYPE_ERRORCHECK
	desc = Mutex type: errorcheck
	value = 2
}
constant.public[] = {
	type = Ionflux::ObjectBase::IFMutexType
	name = TYPE_RECURSIVE
	desc = Mutex type: recursive
	value = 3
}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = bool
	name = lock
	shortDesc = Lock
	longDesc = Lock the mutex. This function blocks until the mutex can be locked.
	impl = if (pthread_mutex_lock(&mutex) == 0)\
	return true;
	return = {
		value = false
		desc = \c true on success, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = tryLock
	shortDesc = Try lock
	longDesc = Try to lock the mutex. This function returns immediately if the mutex cannot be locked.
	impl = if (pthread_mutex_trylock(&mutex) == 0)\
	return true;
	return = {
		value = false
		desc = \c true on success, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = unlock
	shortDesc = Unlock
	longDesc = Unlock the mutex.
	impl = if (pthread_mutex_unlock(&mutex) == 0)\
	return true;
	return = {
		value = false
		desc = \c true on success, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = copy
	const = true
	shortDesc = Copy
	longDesc = Create a copy of the object.
	impl = IFMutex* newMutex = new Ionflux::ObjectBase::IFMutex();\
*newMutex = *this;
	return = {
		value = newMutex
		desc = Copy of the object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFMutex&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFMutex&
		name = otherMutex
		desc = Mutex
	}
	impl = 
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFObject&
		name = otherObject
		desc = Object
	}
	impl = const IFMutex* otherMutex = dynamic_cast<const IFMutex*>(&otherObject);\
if (otherMutex != 0)\
	*this = *otherMutex;\
else\
	cerr << "[IFMutex::operator=] ERROR: "\
		"Unable to assign object '" << otherObject.getClassName() \
		<< "'." << endl;
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = 
	return = {
		value = IFObject::getString()
		desc = String representation of the object
	}
}
