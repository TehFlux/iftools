# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2011 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFCache.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	header = {
	    '"ifobject/types.hpp"'
	    '"ifobject/cachehelpers.hpp"'
		'<queue>'
		'<vector>'
		'<map>'
	}
	impl = {
	    '"ifobject/utils.hpp"'
	    '"ifobject/IFError.hpp"'
	    '<algorithm>'
	    '<sstream>'
	    '<iomanip>'
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.

# Helper structs.

# events

# signals

# Class definition.
class = {
	name = IFCache
	shortDesc = Cache
	title = Cache
	longDesc = A cache for arbitrary objects.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
		}
	}
	features = {
		'logmessage'
		'create'
	}
	create.allocationError = IFError("Could not allocate object.")
}

# Member variables.
variable.protected[] = {
    type = std::vector<Ionflux::ObjectBase::IFCacheEntry*>
    name = items
    desc = Item vector
}
variable.protected[] = {
    type = std::map<std::string, Ionflux::ObjectBase::IFCacheEntry*>
    name = idMap
    desc = Item ID to entry map
}

# Class properties.
property.protected[] = {
    type = Ionflux::ObjectBase::UInt64
    setFromType = Ionflux::ObjectBase::UInt64
    name = maxSize
    desc = Maximum cache size
}
property.protected[] = {
    type = Ionflux::ObjectBase::UInt64
    setFromType = Ionflux::ObjectBase::UInt64
    name = currentSize
    desc = Current cache size
    readOnly = true
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = allowZeroSize
    desc = Allow zero size items
}
property.protected[] = {
    type = Ionflux::ObjectBase::CachePolicy
    setFromType = Ionflux::ObjectBase::CachePolicy
    name = policy
    desc = Caching policy
}

# Public static constants.
constant.public[] = {
    type = Ionflux::ObjectBase::CachePolicy
    name = POLICY_KEEP_RECENT
    desc = Caching policy: Keep most recently used
    value = 0
}
constant.public[] = {
    type = Ionflux::ObjectBase::CachePolicy
    name = POLICY_KEEP_MOST_HITS
    desc = Caching policy: Keep most hits
    value = 1
}

# Protected static constants.

# Public constructors.
constructor.default = {
    initializer[] = {
        name = maxSize
        value = 0
    }
    initializer[] = {
        name = currentSize
        value = 0
    }
    initializer[] = {
        name = allowZeroSize
        value = false
    }
    initializer[] = {
        name = policy
        value = POLICY_KEEP_MOST_HITS
    }
	impl = 
}
constructor.public[] = {
    initializer[] = {
        name = maxSize
        value = initMaxSize
    }
    initializer[] = {
        name = currentSize
        value = 0
    }
    initializer[] = {
        name = allowZeroSize
        value = initAllowZeroSize
    }
    initializer[] = {
        name = policy
        value = initPolicy
    }
    param[] = {
        type = Ionflux::ObjectBase::UInt64
        name = initMaxSize
        desc = Maximum cache size
    }
    param[] = {
        type = bool
        name = initAllowZeroSize
        desc = Allow zero size items
        default = false
    }
    param[] = {
        type = Ionflux::ObjectBase::CachePolicy
        name = initPolicy
        desc = Caching policy
        default = POLICY_KEEP_MOST_HITS
    }
	impl = 
}

# Destructor.
destructor.impl = clear();

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFCacheEntry*
	name = getEntry
	shortDesc = Get cache entry
	longDesc = Get the cache entry for an item ID.
	param[] = {
	    type = const Ionflux::ObjectBase::IFObjectID&
	    name = itemID
	    desc = Item ID
	}
	impl = std::map<std::string, Ionflux::ObjectBase::IFCacheEntry*>::iterator i = idMap.find(itemID);\
if (i != idMap.end())\
    return (*i).second;
	return = {
		value = 0
		desc = Cache entry, or 0 if the item with the specified ID is not in the cache
	}
}
function.protected[] = {
	spec = virtual
	type = void
	name = hit
	shortDesc = Hit entry
	longDesc = Record a hit for the specified entry.
	param[] = {
	    type = Ionflux::ObjectBase::IFCacheEntry*
	    name = entry
	    desc = Cache entry
	}
	impl = if (entry == 0)\
    return;\
entry->hits++;\
entry->hTime = getTimeTicks();
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = 
	return = {
		value = IFObject::getString()
		desc = String representation of the object
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear entries
	longDesc = Clear cache entries.
	impl = items.clear();\
std::vector<Ionflux::ObjectBase::IFCacheEntry*>::iterator i;\
for (i = items.begin(); i != items.end(); i++)\
\{\
    IFCacheEntry* e0 = *i;\
    if (e0->item != 0)\
    \{\
        currentSize -= e0->item->getSize();\
        removeLocalRef(e0->item);\
        e0->item = 0;\
    \}\
    delete e0;\
\}\
idMap.clear();
}
function.public[] = {
	spec = virtual
	type = void
	name = reset
	shortDesc = Reset hits
	longDesc = Reset the hits for all cache entries. If the optional \c hits argument is specified, the hits for all objects will be set to that value.
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = hits
	    desc = Number of hits
	    default = 0
	}
	impl = UInt64 hTime = getTimeTicks();\
std::vector<Ionflux::ObjectBase::IFCacheEntry*>::iterator i;\
for (i = items.begin(); i != items.end(); i++)\
\{\
    IFCacheEntry* e0 = *i;\
    e0->hits = hits;\
    e0->hTime = hTime;\
\}
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumEntries
	const = true
	shortDesc = Get number of cache entries
	longDesc = Get the number of cache entries.
	impl = 
	return = {
		value = idMap.size()
		desc = Number of cache entries
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isFull
	const = true
	shortDesc = Check whether the cache is full
	longDesc = Returns \c true if the cache has the maximum number of elements. If \c offset is specified, the function returns \c true if the cache would be full after adding elements of that size. If the maximum size of the cache is 0, the cache is never considered full.
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = offset
	    desc = Size offset
	    default = 0
	}
	impl = if (maxSize == 0)\
    return false;
	return = {
		value = (currentSize + offset) >= maxSize
		desc = Result of the test
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = itemExists
	shortDesc = Check item
	longDesc = Check whether an item with the specified ID exists in the cache. This does not record a hit for the item.
	param[] = {
	    type = const std::string&
	    name = itemID
	    desc = Item ID
	}
	impl = IFCacheEntry* e0 = getEntry(itemID);\
if (e0 != 0)\
    return true;
	return = {
		value = false
		desc = \c true if item exists in the cache, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::UInt64
	name = getHits
	shortDesc = Get hits
	longDesc = Get the number of hits for an item.
	param[] = {
	    type = const std::string&
	    name = itemID
	    desc = Item ID
	}
	impl = IFCacheEntry* e0 = getEntry(itemID);\
if (e0 != 0)\
    return e0->hits;
	return = {
		value = 0
		desc = Number of hits for the item
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = getItem
	shortDesc = Get item
	longDesc = Get the item with the specified ID from the cache. This also records a hit for the item.
	param[] = {
	    type = const std::string&
	    name = itemID
	    desc = Item ID
	}
	impl = IFCacheEntry* e0 = getEntry(itemID);\
if (e0 == 0)\
    return 0;\
hit(e0);
	return = {
		value = e0->item
		desc = The item with the specified ID, or 0 if the item is not currently in the cache
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = removeItem
	shortDesc = Remove item
	longDesc = Remove the item with the specified ID from the cache.
	param[] = {
	    type = const std::string&
	    name = itemID
	    desc = Item ID
	}
	impl = if (!itemExists(itemID))\
    return false;\
std::map<std::string, Ionflux::ObjectBase::IFCacheEntry*>::iterator i = idMap.find(itemID);\
IFCacheEntry* e0 = (*i).second;\
std::vector<Ionflux::ObjectBase::IFCacheEntry*>::iterator j = std::find(items.begin(), items.end(), e0);\
idMap.erase(i);\
items.erase(j);\
if (e0->item != 0)\
\{\
    currentSize -= e0->item->getSize();\
    removeLocalRef(e0->item);\
    e0->item = 0;\
\}\
delete e0;
	return = {
		value = true
		desc = \c true if the item was successfully removed, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Find the entry which was hit the longest time ago from the entries with the least hits and remove it from the cache.
	impl = if (items.size() == 0)\
    return;\
if (policy == POLICY_KEEP_MOST_HITS)\
    std::sort(items.begin(), items.end(), IFCacheEntryCompareByHits());\
else\
    std::sort(items.begin(), items.end(), IFCacheEntryCompareByHTime());\
IFCacheEntry* e0 = items[0];\
UInt64 ch = 0;\
if (policy == POLICY_KEEP_MOST_HITS)\
    ch = e0->hits;\
else\
    ch = e0->hTime;\
UInt64 hMin = ch;\
std::vector<IFCacheEntry*> candidates;\
candidates.push_back(e0);\
unsigned int i = 1;\
// Get entries with the same number of hits as the first one.\
while ((ch == hMin) \
    && (i < items.size()))\
\{\
    e0 = items[i];\
    if (policy == POLICY_KEEP_MOST_HITS)\
        ch = e0->hits;\
    else\
        ch = e0->hTime;\
    if (ch == hMin)\
        candidates.push_back(e0);\
    i++;\
\}\
if (policy == POLICY_KEEP_MOST_HITS)\
    std::sort(candidates.begin(), candidates.end(), \
        IFCacheEntryCompareByHTime());\
else\
    std::sort(candidates.begin(), candidates.end(), \
        IFCacheEntryCompareByHits());\
e0 = candidates[0];\
// <---- DEBUG ----- //\
std::ostringstream status;\
status << "Removing object (id = '" << e0->itemID << "', hits = " \
    << e0->hits << ", cTime = " << e0->cTime << ", hTime = " \
    << e0->hTime << ").";\
log(IFLogMessage(status.str(), VL_DEBUG, this, "cleanup"));\
// ----- DEBUG ----> */\
removeItem(e0->itemID);
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Remove entries from the cache until at least \c minSize cache units are free.
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = minSize
	    desc = Minimum free size
	}
	impl = if ((maxSize == 0) \
    || (minSize == 0))\
    return;\
if (minSize > maxSize)\
\{\
    std::ostringstream status;\
    status << "[IFCache.cleanup] Size to be cleaned up is larger "\
        "than maximum cache size (minSize = " << minSize \
        << ", maxSize = " << maxSize << ")!";\
    throw IFError(status.str());\
\}\
while ((items.size() > 0) \
    && ((maxSize - currentSize) < minSize))\
    cleanup();
}
function.public[] = {
	spec = virtual
	type = void
	name = addItem
	shortDesc = Add item
	longDesc = Add an item to the cache.
	param[] = {
	    type = const std::string&
	    name = itemID
	    desc = Item ID
	}
	param[] = {
	    type = Ionflux::ObjectBase::IFObject*
	    name = item
	    desc = Item
	}
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = hits
	    desc = Initial number of hits
	    default = 0
	}
	impl =  if (item == 0)\
    throw IFError("[IFCache.addItem] " \
        "Attempt to add null item!");\
std::ostringstream status;\
if (itemExists(itemID))\
\{\
    status << "[IFCache.addItem] Item exists (id ='"\
        << itemID << "')!";\
    throw IFError(status.str());\
\}\
// Make sure the item fits within the cache.\
UInt64 is0 = item->getSize();\
if (!allowZeroSize \
    && (is0 == 0))\
\{\
    status << "[IFCache.addItem] Item has zero size (id ='"\
        << itemID << "')!";\
    throw IFError(status.str());\
\}\
/* <---- DEBUG ----- //\
status.str("");\
status << "maxSize = " << maxSize << ", itemSize = " << is0 \
    << ", currentSize = " << currentSize;\
log(IFLogMessage(status.str(), VL_DEBUG, this, "addItem"));\
// ----- DEBUG ----> */\
if (maxSize > 0)\
\{\
    if (is0 > maxSize)\
    \{\
        status.str("");\
        status << "[IFCache.addItem] Item does not fit into "\
            "cache (id ='" << itemID << "', size = " << is0 \
            << ")!";\
        throw IFError(status.str());\
    \}\
    if (isFull(is0))\
        cleanup(is0);\
\}\
// Create a new cache entry.\
IFCacheEntry* e0 = new IFCacheEntry();\
if (e0 == 0)\
    throw IFError("[IFCache.addItem] " \
        "Could not allocate cache entry!");\
initEntry(*e0, item, itemID, 0, 0, hits);\
// <---- DEBUG ----- //\
status.str("");\
status << "Adding object (id = '" << e0->itemID << "', hits = " \
    << e0->hits << ", cTime = " << e0->cTime << ", hTime = " \
    << e0->hTime << ").";\
log(IFLogMessage(status.str(), VL_DEBUG, this, "addItem"));\
// ----- DEBUG ----> */\
addLocalRef(item);\
idMap[itemID] = e0;\
items.push_back(e0);\
currentSize += is0;
}
function.public[] = {
	spec = virtual
	type = void
	name = getItems
	shortDesc = Get items
	longDesc = Get all items from the cache.
	param[] = {
	    type = Ionflux::ObjectBase::IFObjectVector&
	    name = target
	    desc = Target vector
	}
	impl = std::vector<Ionflux::ObjectBase::IFCacheEntry*>::iterator i;\
for (i = items.begin(); i != items.end(); i++)\
    target.push_back((*i)->item);
}
function.public[] = {
	spec = virtual
	type = void
	name = getItemIDs
	shortDesc = Get item IDs
	longDesc = Get all item IDs from the cache.
	param[] = {
	    type = Ionflux::ObjectBase::StringVector&
	    name = target
	    desc = Target vector
	}
	impl = std::vector<Ionflux::ObjectBase::IFCacheEntry*>::iterator i;\
for (i = items.begin(); i != items.end(); i++)\
    target.push_back((*i)->itemID);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getDebugInfo
	shortDesc = Get debug info
	longDesc = Get information that is useful for debugging.
	impl = std::ostringstream status;\
status << "IFCache[" << endl\
    << "  maxSize     = " << maxSize << endl \
    << "  currentSize = " << currentSize << endl\
    << "  numItems    = " << items.size() << endl\
    << "  full        = " ;\
if (isFull())\
    status << "yes" << endl;\
else\
    status << "no" << endl;\
status << "  entries:" << endl;\
if (items.size() == 0)\
    status << "    <none>" << endl;\
else\
\{\
    if (policy == POLICY_KEEP_MOST_HITS)\
    \{\
        std::sort(items.begin(), items.end(), \
            IFCacheEntryCompareByHTime());\
        std::sort(items.begin(), items.end(), \
            IFCacheEntryCompareByHits());\
    \} else\
    \{\
        std::sort(items.begin(), items.end(), \
            IFCacheEntryCompareByHits());\
        std::sort(items.begin(), items.end(), \
            IFCacheEntryCompareByHTime());\
    \}\
    unsigned int k = 1;\
    std::vector<Ionflux::ObjectBase::IFCacheEntry*>::iterator i;\
    for (i = items.begin(); i != items.end(); i++)\
    \{\
        IFCacheEntry* e0 = *i;\
        status << "    #" << setw(3) << setfill('0') << k << ": id = '" \
            << e0->itemID << "', hits = " << e0->hits << ", cTime = " \
            << e0->cTime << ", hTime = " << e0->hTime << ")" << endl;\
        k++;\
    \}\
\}\
status << "]";
    return = {
        value = status.str()
        desc = Debug info
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = void
	name = initEntry
	shortDesc = Initialize cache entry.
	longDesc = Initilaize a cache entry.
	param[] = {
	    type = Ionflux::ObjectBase::IFCacheEntry&
	    name = entry
	    desc = Cache entry
	}
	param[] = {
	    type = Ionflux::ObjectBase::IFObject*
	    name = item
	    desc = Item
	    default = 0
	}
	param[] = {
	    type = const std::string&
	    name = itemID
	    desc = Item ID
	    default = ""
	}
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = cTime
	    desc = Creation time
	    default = 0
	}
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = hTime
	    desc = Time of last hit
	    default = 0
	}
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = hits
	    desc = Number of hits
	    default = 0
	}
	impl = entry.item = item;\
entry.itemID = itemID;\
if (cTime == 0)\
    entry.cTime = getTimeTicks();\
else\
    entry.cTime = cTime;\
if (hTime == 0)\
    entry.hTime = getTimeTicks();\
else\
    entry.hTime = hTime;\
entry.hits = hits;
}

