# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFLogMessage.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	header = {
		'"ifobject/IFObject.hpp"'
	}
	impl = {
		'<sstream>'
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.

# Helper structs.

# events

# signals

# Class definition.
class = {
	name = IFLogMessage
	shortDesc = Log message
	title = Log message
	longDesc = A message which provides information about what is going on and may be logged by a logging facility.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
		}
	}
	features = {
		'guards'
		'serialize'
	}
}

# Public constructors.
constructor.default = {
	initializer[] = {
		name = level
		value = VL_INFO
	}
	initializer[] = {
		name = source
		value = 0
	}
}
constructor.public[] = {
	param[] = {
		type = const std::string&
		name = initMessage
		desc = Initial message
	}
	param[] = {
		type = Ionflux::ObjectBase::IFVerbosityLevel
		name = initLevel
		desc = Initial verbosity level
		default = Ionflux::ObjectBase::VL_INFO
	}
	param[] = {
		type = const Ionflux::ObjectBase::IFObject*
		name = initSource
		desc = Initial source object
		default = 0
	}
	param[] = {
		type = const std::string&
		name = initFunctionName
		desc = Initial source function name
		default = ""
	}
	initializer[] = {
		name = message
		value = initMessage
	}
	initializer[] = {
		name = level
		value = initLevel
	}
	initializer[] = {
		name = source
		value = initSource
	}
	initializer[] = {
		name = sourceFunctionName
		value = initFunctionName
	}
}

# Destructor.

# Member variables.

# Class properties.
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = message
	desc = The message
	serialize = true
}
property.protected[] = {
	type = Ionflux::ObjectBase::IFVerbosityLevel
	setFromType = Ionflux::ObjectBase::IFVerbosityLevel
	name = level
	desc = Verbosity level
	serialize = true
}
property.protected[] = {
	type = const Ionflux::ObjectBase::IFObject*
	setFromType = const Ionflux::ObjectBase::IFObject*
	name = source
	desc = Source object
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = sourceFunctionName
	desc = Source function name
	serialize = true
}

# Signals.

# Public static constants.
constant.public[] = {
	type = std::string
	name = TEXT_ASSERTION
	desc = Verbosity level text: assertion
	value = "ASSERTION FAILED"
}
constant.public[] = {
	type = std::string
	name = TEXT_SILENT
	desc = Verbosity level text: silent
	value = ""
}
constant.public[] = {
	type = std::string
	name = TEXT_ERROR_CRITICAL
	desc = Verbosity level text: critical error
	value = "CRITICAL ERROR"
}
constant.public[] = {
	type = std::string
	name = TEXT_ERROR
	desc = Verbosity level text: error
	value = "ERROR"
}
constant.public[] = {
	type = std::string
	name = TEXT_WARNING
	desc = Verbosity level text: warning
	value = "WARNING"
}
constant.public[] = {
	type = std::string
	name = TEXT_WARNING_OPT
	desc = Verbosity level text: optional warning
	value = "WARNING"
}
constant.public[] = {
	type = std::string
	name = TEXT_INFO
	desc = Verbosity level text: info
	value = ""
}
constant.public[] = {
	type = std::string
	name = TEXT_INFO_OPT
	desc = Verbosity level text: optional info
	value = ""
}
constant.public[] = {
	type = std::string
	name = TEXT_DEBUG
	desc = Verbosity level text: debug
	value = "DEBUG"
}
constant.public[] = {
	type = std::string
	name = TEXT_DEBUG_OPT
	desc = Verbosity level text: optional debug
	value = "DEBUG"
}
constant.public[] = {
	type = std::string
	name = TEXT_DEBUG_INSANE
	desc = Verbosity level text: insane debug
	value = "DEBUG"
}
constant.public[] = {
	type = std::string
	name = TEXT_ALL
	desc = Verbosity level text: all
	value = ""
}

# Protected static constants.

# Protected member functions.
function.public[] = {
	spec = static
	type = Ionflux::ObjectBase::IFObject*
	name = create
	shortDesc = Create instance
	longDesc = Create a new instance of the class. If the optional parent object is specified, a local reference for the new object will be added to the parent object.
	param[] = {
		type = Ionflux::ObjectBase::IFObject*
		name = parentObject
		desc = Parent object
		default = 0
	}
	impl = IFLogMessage* newObject = new IFLogMessage();\
if (newObject == 0)\
\{\
	cerr << IFLogMessage("Could not allocate object instance.", \
		VL_ERROR, 0, "IFObject::create") << endl;\
	return 0;\
\}\
if (parentObject != 0)\
	parentObject->addLocalRef(newObject);
	return = {
		value = newObject
		desc = Pointer to the new instance, or 0 if an error occurs
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = copy
	const = true
	shortDesc = Copy
	longDesc = Create a copy of the object.
	impl = IFLogMessage* newLogMessage = new IFLogMessage();\
*newLogMessage = *this;
	return = {
		value = newLogMessage
		desc = Copy of the object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFLogMessage&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFLogMessage&
		name = otherLogMessage
		desc = LogMessage
	}
	impl = message = otherLogMessage.getMessage();\
level = otherLogMessage.getLevel();\
source = otherLogMessage.getSource();\
sourceFunctionName = otherLogMessage.getSourceFunctionName();
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFObject&
		name = otherObject
		desc = Object
	}
	impl = const IFLogMessage* otherLogMessage = dynamic_cast<const IFLogMessage*>(&otherObject);\
if (otherLogMessage != 0)\
	*this = *otherLogMessage;\
else\
	cerr << "[IFLogMessage::operator=] ERROR: "\
		"Unable to assign object '" << otherObject.getClassName() \
		<< "'." << endl;
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = static
	type = std::string
	name = getLevelString
	shortDesc = Get string representation of verbosity level
	longDesc = Get a string representation of the verbosity level of the message.
	param[] = {
		type = Ionflux::ObjectBase::IFVerbosityLevel
		name = otherLevel
		desc = Verbosity level
		bindings.ruby.type = int
	}
	impl = string result;\
if (otherLevel == VL_ASSERTION)\
	result = TEXT_ASSERTION;\
else\
if (otherLevel == VL_ERROR_CRITICAL)\
	result = TEXT_ERROR_CRITICAL;\
else\
if (otherLevel == VL_ERROR)\
	result = TEXT_ERROR;\
else\
if (otherLevel == VL_WARNING)\
	result = TEXT_WARNING;\
else\
if (otherLevel == VL_WARNING_OPT)\
	result = TEXT_WARNING_OPT;\
else\
if (otherLevel == VL_INFO)\
	result = TEXT_INFO;\
else\
if (otherLevel == VL_INFO_OPT)\
	result = TEXT_INFO_OPT;\
else\
if (otherLevel == VL_DEBUG)\
	result = TEXT_DEBUG;\
else\
if (otherLevel == VL_DEBUG_OPT)\
	result = TEXT_DEBUG_OPT;\
else\
if (otherLevel == VL_DEBUG_INSANE)\
	result = TEXT_DEBUG_INSANE;
	return = {
		value = result
		desc = String representation of the verbosity level
	}
}
function.public[] = {
	spec = static
	type = Ionflux::ObjectBase::IFVerbosityLevel
	name = getLevelFromString
	shortDesc = Get verbosity level from string representation
	longDesc = Get the verbosity level corresponding to the string representation.
	param[] = {
		type = const std::string&
		name = levelString
		desc = Verbosity level string representation
		bindings.ruby = {
			type = String
			nativeType = std::string
		}
	}
	impl = IFVerbosityLevel result = VL_INFO;\
if (levelString == "VL_ASSERTION")\
	result = VL_ASSERTION;\
else\
if (levelString == "VL_SILENT")\
	result = VL_SILENT;\
else\
if (levelString == "VL_ERROR_CRITICAL")\
	result = VL_ERROR_CRITICAL;\
else\
if (levelString == "VL_ERROR")\
	result = VL_ERROR;\
else\
if (levelString == "VL_WARNING")\
	result = VL_WARNING;\
else\
if (levelString == "VL_WARNING_OPT")\
	result = VL_WARNING_OPT;\
else\
if (levelString == "VL_INFO")\
	result = VL_INFO;\
else\
if (levelString == "VL_INFO_OPT")\
	result = VL_INFO_OPT;\
else\
if (levelString == "VL_DEBUG")\
	result = VL_DEBUG;\
else\
if (levelString == "VL_DEBUG_OPT")\
	result = VL_DEBUG_OPT;\
else\
if (levelString == "VL_DEBUG_INSANE")\
	result = VL_DEBUG_INSANE;\
else\
if (levelString == "VL_ALL")\
	result = VL_ALL;
	return = {
		value = result
		desc = Verbosity level corresponding to the string representation
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
if ((source != 0)\
	|| (sourceFunctionName.size() > 0))\
\{\
	state << "[";\
	if (source != 0)\
	\{\
		state << source->getClassName();\
		string objectID = source->getID();\
		if (objectID.size() > 0)\
			state << "{" << objectID << "}";\
		if (sourceFunctionName.size() > 0)\
			state << "::";\
	\}\
	state << sourceFunctionName << "] ";\
\}\
string levelText = getLevelString(level);\
if (levelText.size() > 0)\
	state << levelText << ": ";\
state << message;
	return = {
		value = state.str()
		desc = String representation of the object
	}
}
