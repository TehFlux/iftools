# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2013 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFMMEvent.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifobject/types.hpp"'
        '"ifobject/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<cmath>'
        '"ifobject/IFError.hpp"'
        '"ifobject/utils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = IFMMEvent
	shortDesc = Memory Management Event
	title = Memory Management Event
	longDesc = A memory management event.
	group.name = ifobject
	base = {
        other[] = {
            name = IFObject
        }
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
    create = {
        extendedCreate = true
        allocationError = IFError("Could not allocate object.")
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::ObjectBase::MMEventTypeID
	setFromType = Ionflux::ObjectBase::MMEventTypeID
	name = typeID
	desc = type ID
}
property.protected[] = {
	type = const Ionflux::ObjectBase::IFObject*
	setFromType = const Ionflux::ObjectBase::IFObject*
	name = object
	desc = object
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = objectRefCount
	desc = object reference count
}
property.protected[] = {
	type = const Ionflux::ObjectBase::IFObject*
	setFromType = const Ionflux::ObjectBase::IFObject*
	name = parentObject
	desc = parent object
}

# Public static constants.
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_UNDEFINED
    desc = Event type ID: undefined
    value = 0
}
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_CREATE
    desc = Event type ID: create
    value = 1
}
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_DELETE
    desc = Event type ID: delete
    value = 2
}
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_ADD_REF
    desc = Event type ID: add reference
    value = 3
}
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_REMOVE_REF
    desc = Event type ID: remove reference
    value = 4
}
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_ADD_LOCAL_REF
    desc = Event type ID: add local reference
    value = 5
}
constant.public[] = {
    type = Ionflux::ObjectBase::MMEventTypeID
    name = TYPE_REMOVE_LOCAL_REF
    desc = Event type ID: remove local reference
    value = 6
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = typeID
        value = TYPE_UNDEFINED
    }
    initializer[] = {
        name = object
        value = 0
    }
    initializer[] = {
        name = objectRefCount
        value = 0
    }
    initializer[] = {
        name = parentObject
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = typeID
        value = initTypeID
    }
    initializer[] = {
        name = object
        value = 0
    }
    initializer[] = {
        name = objectRefCount
        value = initObjectRefCount
    }
    initializer[] = {
        name = parentObject
        value = 0
    }
	param[] = {
		type = Ionflux::ObjectBase::MMEventTypeID
		name = initTypeID
		desc = type ID
	}
	param[] = {
		type = const Ionflux::ObjectBase::IFObject*
		name = initObject
		desc = object
	}
	param[] = {
		type = unsigned int
		name = initObjectRefCount
		desc = object reference count
		default = 0
	}
	param[] = {
		type = const Ionflux::ObjectBase::IFObject*
		name = initParentObject
		desc = parent object
		default = 0
	}
    impl = setObject(initObject);\
setParentObject(initParentObject);
}
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = if (this == &other)\
    return *this;\
typeID = other.typeID;\
setObject(other.object);\
setParentObject(other.parentObject);

function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::ObjectBase::IFMMEvent&
		name = other
		desc = value
	}
	impl = 
	return = {
        value = (typeID == other.typeID) && (object == other.object)
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::ObjectBase::IFMMEvent&
		name = other
		desc = value
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = ostringstream state;\
state << mmTypeIDGetString(typeID) << ", obj = " \
    << dynamic_cast<const void*>(object);\
if (object != 0)\
\{\
    state << " (" << object->getIDString() << ")";\
\}\
if (parentObject != 0)\
\{\
    state << ", parent = " << dynamic_cast<const void*>(parentObject) \
        << " (" << parentObject->getIDString() << ")";\
\}\
state << ", refs = " << objectRefCount;
    return = {
        value = state.str()
        desc = String representation
    }
}

# Static member functions

# Pure virtual member functions.

# operations

