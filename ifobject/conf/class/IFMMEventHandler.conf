# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2013 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# MMEventHandler.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifobject/types.hpp"'
        '"ifobject/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<cmath>'
        '"ifobject/IFError.hpp"'
        '"ifobject/utils.hpp"'
        '"ifobject/IFMMEvent.hpp"'
    }
}

# forward declarations
forward = {
    'class IFMMEvent'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = IFMMEventHandler
	shortDesc = Memory management event handler
	title = Memory management event handler
	longDesc = A handler for memory management events.
	group.name = ifobject
	base = {
        other[] = {
            name = IFObject
        }
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
    create = {
        allocationError = IFError("Could not allocate object.")
        extendedCreate = true
    }
}

# Member variables.
variable.protected[] = {
    spec = static
    type = Ionflux::ObjectBase::IFMMEventHandler*
    name = instance
    desc = Global event handler instance
    value = 0
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::ObjectBase::IFMMEventHandler*
	setFromType = Ionflux::ObjectBase::IFMMEventHandler*
	name = target
	desc = redirection target
	managed = true
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = logFileName
	desc = log file name
}
property.protected[] = {
	type = bool
	setFromType = bool
	name = silentFlag
	desc = silent flag
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = target
        value = 0
    }
    initializer[] = {
        name = logFileName
        value = ""
    }
    initializer[] = {
        name = silentFlag
        value = true
    }
}
constructor.public[] = {
    initializer[] = {
        name = target
        value = 0
    }
    initializer[] = {
        name = logFileName
        value = initLogFileName
    }
    initializer[] = {
        name = silentFlag
        value = initSilentFlag
    }
	param[] = {
		type = Ionflux::ObjectBase::IFMMEventHandler*
		name = initTarget
		desc = target
	}
	param[] = {
		type = const std::string&
		name = initLogFileName
		desc = log file name
		default = ""
	}
	param[] = {
		type = bool
		name = initSilentFlag
		desc = silent flag
		default = true
	}
    impl = if (initTarget != 0)\
    setTarget(initTarget);
}
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setTarget(other.target);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = clearLogFile
	const = true
	shortDesc = Clear log file
	longDesc = Clear the log file.
	impl = <<<
if (logFileName.size() == 0)
    return;
writeFile(logFileName, "", 'w');
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = handleMMEvent
	const = true
	shortDesc = Handle memory management event
	longDesc = Handle memory management event.
	param[] = {
	    type = const Ionflux::ObjectBase::IFMMEvent&
	    name = event
	    desc = event
	}
	impl = <<<
if (target != 0)
{
    target->handleMMEvent(event);
    return;
}
if (logFileName.size() > 0)
{
    std::ostringstream s0;
    s0 << "[" << getTimestamp() << "] " << event.getValueString() 
        << "\n";
    writeFile(logFileName, s0.str(), 'a');
    return;
}
if (!silentFlag)
    std::cerr << event << std::endl;
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream state;
if (target != 0)
{
    state << "target = " << dynamic_cast<const void*>(target) 
        << " (" << target->getIDString() << ")";
}
>>>
    return = {
        value = state.str()
        desc = String representation
    }
}

# Static member functions
function.public[] = {
	spec = static
	type = Ionflux::ObjectBase::IFMMEventHandler*
	name = getInstance
	shortDesc = Get global event handler instance
	longDesc = Get the global event handler instance.\
\
\sa cleanup()
    impl = if (instance != 0)\
    return instance;\
instance = Ionflux::ObjectBase::create<IFMMEventHandler>(\
    "IFMMEventHandler::getInstance", "event handler");\
instance->addRef();
    return = {
        value = instance
        desc = Global context instance
    }
}
function.public[] = {
	spec = static
	type = void
	name = cleanup
	shortDesc = Cleanup global event handler instance
	longDesc = Clean up the global event handler instance. This should be called to clean up the global vent handler instance that can be obtained by getInstance() before exiting the application.\
\
\sa getInstance()
    impl = if (instance == 0)\
    return;\
if (instance->getNumRefs() == 0)\
    throw IFError("[IFMMEventHandler::cleanup] "\
        "Event handler has already been cleaned up.");\
instance->removeRef();\
if (instance->getNumRefs() == 0)\
\{\
    delete instance;\
    instance = 0;\
\} else\
    throw IFError("[MMEventHandler::cleanup] "\
        "Event handler still referenced on cleanup.");
}

# Pure virtual member functions.

# operations

