# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFGuard.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	header = {
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.

# Helper structs.

# events

# signals

# Class definition.
class = {
	name = IFGuard
	shortDesc = Guard
	title = Guard
	longDesc = A guard object which will lock a mutex on construction and release it on destruction. Locking and unlocking is also possible using the accessors.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
		}
	}
	features = {
		'mutex'
		'logmessage'
	}
}

# Public constructors.
constructor.default = {
	initializer[] = {
		name = mutex
		value = 0
	}
	impl = 
}
constructor.public[] = {
	param[] = {
		type = Ionflux::ObjectBase::IFMutex*
		name = initMutex
		desc = Initial mutex
	}
	initializer[] = {
		name = mutex
		value = 0
	}
	impl = setMutex(initMutex);
}

# Destructor.
destructor.impl = setMutex(0);

# Member variables.

# Class properties.
property.protected[] = {
	type = Ionflux::ObjectBase::IFMutex*
	setFromType = Ionflux::ObjectBase::IFMutex*
	name = mutex
	desc = Mutex
	impl.set = if (newMutex == mutex)\
	return;\
if (mutex != 0)\
\{\
	mutex->unlock();\
	removeLocalRef(mutex);\
\}\
mutex = newMutex;\
if (mutex != 0)\
\{\
	addLocalRef(mutex);\
	mutex->lock();\
\}
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = static
	type = Ionflux::ObjectBase::IFObject*
	name = create
	shortDesc = Create instance
	longDesc = Create a new instance of the class. If the optional parent object is specified, a local reference for the new object will be added to the parent object.
	param[] = {
		type = Ionflux::ObjectBase::IFObject*
		name = parentObject
		desc = Parent object
		default = 0
	}
	impl = IFGuard* newObject = new IFGuard();\
if (newObject == 0)\
\{\
	cerr << IFLogMessage("Could not allocate object instance.", \
		VL_ERROR, 0, "IFObject::create") << endl;\
	return 0;\
\}\
if (parentObject != 0)\
	parentObject->addLocalRef(newObject);
	return = {
		value = newObject
		desc = Pointer to the new instance, or 0 if an error occurs
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = copy
	const = true
	shortDesc = Copy
	longDesc = Create a copy of the object.
	impl = IFGuard* newGuard = new IFGuard();\
*newGuard = *this;
	return = {
		value = newGuard
		desc = Copy of the object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFGuard&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFGuard&
		name = otherGuard
		desc = Guard
	}
	impl = setMutex(otherGuard.getMutex());
	return = {
		value = *this
		desc = The object itself
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assignment operator.
	param[] = {
		type = const Ionflux::ObjectBase::IFObject&
		name = otherObject
		desc = Object
	}
	impl = const IFGuard* otherGuard = dynamic_cast<const IFGuard*>(&otherObject);\
if (otherGuard != 0)\
	*this = *otherGuard;\
else\
	cerr << "[IFGuard::operator=] ERROR: "\
		"Unable to assign object '" << otherObject.getClassName() \
		<< "'." << endl;
	return = {
		value = *this
		desc = The object itself
	}
}
