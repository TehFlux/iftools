# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006-2013 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFXMLObjectFactory.conf          Class definition file
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# namespaces
namespace[].name = Ionflux
namespace[].name = ObjectBase
namespace[].name = XMLUtils

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	header = {
	    '"ifobject/types.hpp"'
	    '"ifobject/xmlutils.hpp"'
	}
	impl = {
	    '"ifobject/xmlutils_private.hpp"'
	    '"ifobject/IFError.hpp"'
	}
}

# Undefine macros.

# Forward declarations.

# Typedefs.

# Helper structs.

# events

# signals

# Class definition.
class = {
	name = IFXMLObjectFactory
	shortDesc = XML object factory
	title = XML object factory
	longDesc = A factory that creates objects from XML data.
	group.name = ifobject
	base = {
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
	}
	features = {
		'copy'
		'upcast'
		'classinfo'
		'create'
	}
    create = {
        allocationError = IFError("Could not allocate object.")
        extendedCreate = true
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
	impl = 
}

# Destructor.
destructor.impl = 

# Member variables.

# Class properties.
property.protected[] = {
    style = vector
    name = factories
    desc = Child XML object factories
    element = {
        type = Ionflux::ObjectBase::XMLUtils::IFXMLObjectFactory*
        name = Factory
        plural = Factories
        managed = true
        valueType = object
        createExpr = IFXMLObjectFactory::create()
    }
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
XMLObjectFactoryVector v0;
for (XMLObjectFactoryVector::const_iterator i = 
    other.factories.begin(); i != other.factories.end(); i++)
    v0.push_back((*i)->copy());
clearFactories();
addFactories(v0);
>>>
function.public[] = {
	spec = virtual
	type = std::string
	name = getObjectXMLElementName
	const = true
	shortDesc = Get XML element name
	longDesc = Get the XML element name that this factory creates objects for.
	impl = 
	return = {
	    value = Ionflux::ObjectBase::IFObject::XML_ELEMENT_NAME
	    desc = XML element name
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getObjectClassName
	const = true
	shortDesc = Get class name
	longDesc = Get the name of the class this factory creates objects for. This should be overridden by derived classes to return the name of the base type.
	impl = <<<
/* NOTE: This should be obtained via a global singleton IFClassInfo 
         instance of the appropriate type. */
>>>
	return = {
	    value = "IFObject"
	    desc = Class name
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = initObject
	const = true
	bindings.disable = true
	shortDesc = Initialize object
	longDesc = Initialize an object from an XML element. This should be overridden by derived classes to initialize an object of the base type.
	param[] = {
	    type = TiXmlElement*
	    name = xmlElement
	    desc = XML element
	}
	param[] = {
	    type = Ionflux::ObjectBase::IFObject*
	    name = target
	    desc = Target object
	}
	param[] = {
	    type = const std::string&
	    name = elementName
	    desc = XML element name
	    default = ""
	}
	impl = <<<
if (xmlElement == 0)
    throw IFError(getErrorString("XML element is null.", "initObject"));
if (target == 0)
    throw IFError(getErrorString("Target object is null.", "initObject"));
std::string en1(elementName);
if (en1.size() == 0)
    en1 = getObjectXMLElementName();
checkElementNameOrError(xmlElement, en1, 
    "IFXMLObjectFactory::initObject");
Ionflux::ObjectBase::XMLUtils::getObject(xmlElement, *target);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = initObject
	const = true
	bindings.disable = true
	shortDesc = Initialize object
	longDesc = Initialize an object from an XML element.
	param[] = {
	    type = TiXmlElement*
	    name = xmlElement
	    desc = XML element
	}
	param[] = {
	    type = Ionflux::ObjectBase::IFObject&
	    name = target
	    desc = Target object
	}
	param[] = {
	    type = const std::string&
	    name = elementName
	    desc = XML element name
	    default = ""
	}
	impl = initObject(xmlElement, &target, elementName);
}
function.public[] = {
	spec = virtual
	type = void
	name = initObject
	const = true
	shortDesc = Initialize object
	longDesc = Initialize an object from XML data.
	param[] = {
	    type = const std::string&
	    name = data
	    desc = XML data
	}
	param[] = {
	    type = Ionflux::ObjectBase::IFObject&
	    name = target
	    desc = Target object
	}
	impl = getObject(data, target);
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = createObject
    const = true
	shortDesc = Create new object
	longDesc = Create a new object. This should be overridden by derived classes to create a new object of the base type.
	impl = 
	return = {
	    value = IFObject::create()
	    desc = New object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = createObject
	const = true
	bindings.disable = true
	shortDesc = Create object
	longDesc = Create a new object from an XML element. This function supports polymorphic object creation if the XML object factories of derived classes have been loaded.
	param[] = {
	    type = TiXmlElement*
	    name = xmlElement
	    desc = XML element
	}
	param[] = {
	    type = const std::string&
	    name = elementName
	    desc = XML element name
	    default = ""
	}
	impl = <<<
std::string en0(xmlElement->Value());
IFObject* o0 = 0;
std::string en1(elementName);
if (en1.size() == 0)
    en1 = getObjectXMLElementName();
if (en0 == en1)
{
    // Create an object of the base type.
    o0 = createObject();
    initObject(xmlElement, o0, en0);
} else
{
    unsigned int k = 0;
    unsigned int numFactories = getNumFactories();
    while ((k < numFactories) 
        && (o0 == 0))
    {
        IFXMLObjectFactory* f0 = getFactory(k);
        if (en0 == f0->getObjectXMLElementName())
            o0 = f0->createObject(xmlElement, en0);
        k++;
    }
    if (o0 == 0)
    {
        std::ostringstream status;
        status << "Unexpected child element name: '" << en0 << "'";
        throw IFError(getErrorString(status.str(), "createObject"));
    }
}
>>>
	return = {
	    value = o0
	    desc = New object
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = createObject
	const = true
	shortDesc = Create object
	longDesc = Create an object from XML data. This function supports polymorphic object creation if the XML object factories of derived classes have been loaded.
	param[] = {
	    type = const std::string&
	    name = data
	    desc = XML data
	}
	param[] = {
	    type = const std::string&
	    name = elementName
	    desc = XML element name
	    default = ""
	}
	impl = <<<
TiXmlDocument d0;
/* NOTE: Probably a peculiarity of tinyxml, there must be at least one 
         character after the data. Or there could of course also be 
         something wrong with how tinyxml is used here. Anyway, this 
         seems to work. */
std::string d1(data);
d1.append(1, ' ');
if (!d0.Parse(d1.c_str(), 0, TIXML_ENCODING_UTF8))
    throw (getErrorString( 
        "Unable to parse XML data.", "createObject"));
std::string en0(elementName);
if (en0.size() == 0)
    en0 = getObjectXMLElementName();
TiXmlElement* e0 = 
    Ionflux::ObjectBase::XMLUtils::findElementByNameOrError(
        d0.RootElement(), en0);
>>>
    return = {
        value = createObject(e0, en0)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFObject*
	name = loadFromXMLFile
    const = true
	shortDesc = Load object from XML file
	longDesc = Create a new object that is initialized with data loaded from an XML file. This function supports polymorphic object creation if the XML object factories of derived classes have been loaded.
	param[] = {
	    type = const std::string&
	    name = fileName
	    desc = File name
	}
	param[] = {
	    type = const std::string&
	    name = elementName
	    desc = XML element name
	    default = ""
	}
	impl = <<<
TiXmlDocument d0(fileName.c_str());
loadDocumentOrError(d0, "loadFromXMLFile");
std::string en0(elementName);
if (en0.size() == 0)
    en0 = getObjectXMLElementName();
TiXmlElement* e0 = findElementByNameOrError(d0.RootElement(), en0);
>>>
	return = {
	    value = createObject(e0, en0)
	    desc = New object
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << getObjectClassName() << "; <" << getObjectXMLElementName() 
    << ">; [";
bool e0 = true;
for (XMLObjectFactoryVector::const_iterator i = factories.begin(); 
    i != factories.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "(" << (*i)->getValueString() << ")";
}
if (factories.size() == 0)
    status << "<none>";
status << "]";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

