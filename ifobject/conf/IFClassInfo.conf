# ==========================================================================
# Ionflux Object Base System
# Copyright Â© 2006 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# IFClassInfo.conf          Run-time type information.
# ==========================================================================
# 
# This file is part of Ionflux Object Base System.
# 
# Ionflux Object Base System is free software; you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of the 
# License, or (at  your option) any later version.
# 
# Ionflux Object Base System is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Object Base System; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# project settings
project = {
	name = Ionflux Object Base System
	author = Joern P. Meier
	mail = mail@ionflux.org
	copyrightYear = 2006
	license = GPL
	includePrefix = ifobject
	includeGuardPrefix = IONFLUX_OBJECT_
}

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = ObjectBase

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	header = {
		'<string>'
		'<vector>'
	}
#   impl = {
#   }
}

# undefine macros
# undef = {
# }

# typedefs
typedef = {
	'std::vector<Ionflux::ObjectBase::IFClassInfo*> IFClassInfoVector'
}

# Class definition.
class = {
	name = IFClassInfo
	shortDesc = Class information
	title = Class information
	longDesc = This class provides run-time type information for IFObject based types.
#	includePrefix = 
	group.name = ifobject
#	base = {
#		# base classes from the IFObject hierarchy
#		ifobject[] = {
#           # class name
#			name = 
#			# include file (optional)
#			include = 
#		}
#		# other base classes
#		other[] = {
#           # class name
#			name = 
#			# include file (optional)
#			include = 
#		}
#	}
}

# constructor
constructor.default = {
	initializer[] = {
		name = name
		value = "<undefined>"
	}
	initializer[] = {
		name = desc
		value = "<undefined>"
	}
}

# class member variables
variable.protected[] = {
	type = IFClassInfoVector
	name = baseClassInfo
	desc = base class type information
}

# class properties
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = name
	desc = class name
	readOnly = true
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = desc
	desc = class description
	readOnly = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = int
	name = getNumBaseClasses
	const = true
	shortDesc = Get number of base classes
	longDesc = Get the number of base classes.
	impl = 
	return = {
		value = baseClassInfo.size()
		desc = Number of base classes
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IFClassInfo*
	name = getBaseClassInfo
	const = true
	shortDesc = Get base class information
	longDesc = Get the class information record for the base class with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
	impl = 
	return = {
		value = result
		desc = Base class information record, or 0 if the index is out of range
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isDerivedFrom
	const = true
	shortDesc = Derived class check
	longDesc = Check whether the class is derived from the specified class by searching base class records recursively.
	param[] = {
		type = const Ionflux::ObjectBase::IFClassInfo*
		name = searchClass
		desc = Base class to search for
	}
	impl = 
	return = {
		value = result
		desc = \c true if the class is a base class of the specified class, \c false otherwise
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = isBaseOf
	const = true
	shortDesc = Base class check
	longDesc = Check whether the class is a base class of the specified class by searching base class records recursively.
	param[] = {
		type = const Ionflux::ObjectBase::IFClassInfo*
		name = checkClass
		desc = Class to be checked
	}
	impl = if (checkClass == 0)\
	return false;
	return = {
		value = checkClass->isDerivedFrom(this)
		desc = \c true if the class is a base class of the specified class, \c false otherwise
	}
}
