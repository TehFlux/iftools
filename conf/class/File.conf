# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# File.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
}

# Include files.
include.header = {
	'<string>'
	'<iostream>'
	'<sstream>'
	'<vector>'
	'<sys/stat.h>'
	'"ionflux/tools.hpp"'
	'"ionflux/DateTime.hpp"'
	'"ionflux/ObjectPool.hpp"'
}

# Class definition.
class = {
	name = File
	base = public Ionflux::Tools::ManagedObject
	shortDesc = File
	title = File
	longDesc =  A wrapper for various file properties and operations.
	includeDir = ionflux
	group.name = general
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const std::string&
		name = initFullName
		desc = Full name of file (including path)
	}
}

# Protected variables.
variable.protected[] = {
	type = struct stat
	name = statInfo
	desc = Information returned by stat
}
variable.protected[] = {
	type = unsigned int
	name = size
	desc = File size
}
variable.protected[] = {
	type = time_t
	name = accessTime
	desc = Time of last access
}
variable.protected[] = {
	type = time_t
	name = modTime
	desc = Time of last modification
}
variable.protected[] = {
	type = time_t
	name = changeTime
	desc = Time of last status change
}
variable.protected[] = {
	type = bool
	name = validity
	desc = Validity flag
}

# Public constants.

# Protected class properties.
property.protected[] = {
	type = std::string
	name = name
	setFromType = const std::string&
	desc = File name
}
property.protected[] = {
	type = std::string
	name = path
	setFromType = const std::string&
	desc = File path
}
property.protected[] = {
	type = std::string
	name = fullName
	setFromType = const std::string&
	desc = Full name of file (including path)
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = bool
	name = updateStatInfo
	shortDesc = Update stat information
	longDesc = Updates the file information obtained from \c stat.
	return.value = false
	return.desc = \c true on success, \c false otherwise
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = refresh
	shortDesc = Refresh file
	longDesc = Refresh file status information.
}
function.public[] = {
	spec = virtual
	type = bool
	name = isValid
	shortDesc = Check validity
	longDesc = Check the validity of the file.
	return.value = validity
	return.desc = \c true if the file is valid, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = bool
	name = isDir
	shortDesc = Get directory status
	longDesc = Get the directory status flag for the file.
	return.value = false
	return.desc = \c true if the file is a directory, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getSize
	shortDesc = Get file size
	longDesc = Get the total size of the file.
	return.value = 0
	return.desc = File size
}
function.public[] = {
	spec = virtual
	type = time_t
	name = getAccessTime
	shortDesc = Get access time
	longDesc = Get the time of last access.
	return.value = 0
	return.desc = Time of last access
}
function.public[] = {
	spec = virtual
	type = time_t
	name = getModTime
	shortDesc = Get modification time
	longDesc = Get the time of last modification.
	return.value = 0
	return.desc = Time of last modification
}
function.public[] = {
	spec = virtual
	type = time_t
	name = getChangeTime
	shortDesc = Get change time
	longDesc = Get the time of last status change.
	return.value = 0
	return.desc = Time of last status change
}
