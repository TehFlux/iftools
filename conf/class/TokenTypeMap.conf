# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TokenTypeMap.conf                Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project.name = Ionflux Tools
project.author = Joern P. Meier
project.mail = mail@ionflux.org
copyrightYear = 2004
includeGuardPrefix = IONFLUX_TOOLS_

# Include files.
include[0] = <string>
include[1] = <iostream>
include[2] = <sstream>
include[3] = <vector>
include[4] = "ionflux/Tokenizer.h"

# Enclosing namespaces.
namespace[0].name = Ionflux
namespace[1].name = Tools

# Forward declarations.
forward[0] = struct TokenType

# Class definition.
class.name = TokenTypeMap
class.shortDesc = Token type lookup map
class.title = Token type lookup map
class.longDesc =  A lookup map for mapping bytes to token types.
class.includeDir = ionflux

# Public constructors.

# Protected variables.
variable.protected[0].type = TokenType**
variable.protected[0].name = typeMap
variable.protected[0].desc = Token type lookup map
variable.protected[1].type = std::vector<TokenType *>
variable.protected[1].name = types
variable.protected[1].desc = Token types

# Class properties.

# Static constants.
constant.public[0].name = TYPE_MAP_SIZE
constant.public[0].type = unsigned int
constant.public[0].desc = Size of token type lookup map
constant.public[0].value = 256

# Protected member functions.

# Public member functions.
function.public[0].spec = virtual
function.public[0].type = void
function.public[0].name = addTokenType
function.public[0].shortDesc = Add token type
function.public[0].longDesc = Add a token type to the map.
function.public[0].param[0].type = const TokenType&
function.public[0].param[0].name = newTokenType
function.public[0].param[0].desc = Token type to be added

function.public[1].spec = virtual
function.public[1].type = void
function.public[1].name = removeTokenType
function.public[1].shortDesc = Remove token type
function.public[1].longDesc = Remove a token type from the map.
function.public[1].param[0].type = const TokenType&
function.public[1].param[0].name = removeTokenType
function.public[1].param[0].desc = Token type to be removed

function.public[2].spec = virtual
function.public[2].type = TokenType
function.public[2].name = getTokenType
function.public[2].shortDesc = Get token type
function.public[2].longDesc = Perform a token type lookup for the specified character.
function.public[2].param[0].type = unsigned char
function.public[2].param[0].name = testChar
function.public[2].param[0].desc = Character to look up
function.public[2].return.value = Tokenizer::TT_INVALID
function.public[2].return.desc = The token type \c testChar belongs to, or Tokenizer::TT_INVALID \
		 * if \c testChar is not part of any valid token.

function.public[3].spec = virtual
function.public[3].type = void
function.public[3].name = addTokenTypeAnything
function.public[3].shortDesc = Add special token type 'anything'
function.public[3].longDesc = Add special token type 'anything' to the map. The 'anything' token \
		 * type matches any character that is not matched by another token \
		 * in the current setup.\
		 *\
		 * \note If you have already added a token type 'anything', calling \
		 * this function again will have no effect. In order to change the \
		 * 'anything' token type, you will either have to remove the one you \
		 * have added previously (by calling removeTokenType()) or clear the \
		 * entire map (by calling clear()).
function.public[3].param[0].type = const TokenType&
function.public[3].param[0].name = newTokenType
function.public[3].param[0].desc = Token type to be added as special type 'anything'

function.public[4].spec = virtual
function.public[4].type = unsigned int
function.public[4].name = getNumTokenTypes
function.public[4].shortDesc = Get number of token types
function.public[4].return.value = types.size()
function.public[4].return.desc = Number of token types in the type map

function.public[5].spec = virtual
function.public[5].type = void
function.public[5].name = clear
function.public[5].shortDesc = Clear map
function.public[5].longDesc = Clears all entries from the token type map
