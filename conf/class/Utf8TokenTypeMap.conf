# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004-2005 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Utf8TokenTypeMap.conf          Token type map with UTF-8 support.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
	'namespace Ionflux::Tools'
}

# Include files (header).
include.header = {
	'<string>'
	'<vector>'
	'<map>'
}

# Include files (implementation).
include.impl = {
	'"ionflux/tools.hpp"'
}

# Forward declarations.
forward = {
    'struct Utf8TokenType'
}

# Typedefs.
typedef = {
	'std::map<unsigned int, Ionflux::Tools::Utf8TokenType*> ImplTokenTypeMap'
}

# Helper structs.
struct[] = {
	name = Utf8TokenType
	desc = A token type with UTF-8 support.
	field[] = {
		type = int
		name = typeID
		desc = Numeric token type ID
	}
	field[] = {
		type = std::string
		name = validChars
		desc = UTF-8 encoded sequence of valid characters
	}
	field[] = {
		type = unsigned int
		name = maxChars
		desc = Maximum number of characters (use 0 for unlimited)
	}
	constant[] = {
		type = int
		name = USERTYPE_ID
		desc = First free token type ID for user types
		value = 100
	}
	constant[] = {
		type = int
		name = INVALID_ID
		desc = Type ID for invalid tokens
		value = -1
	}
	constant[] = {
		type = int
		name = EMPTY_ID
		desc = Type ID for empty tokens
		value = 0
	}
}

# Class definition.
class = {
	name = Utf8TokenTypeMap
	shortDesc = Token type map with UTF-8 support
	title = Token type map with UTF-8 support
	longDesc = A lookup map for mapping Unicode characters to token types.
	includeDir = ionflux
	group.name = tokenizer
	createClassInfo = true
	managed = true
}

# Public constructors.

# Member variables.
variable.protected[] = {
	type = std::vector<Utf8TokenType*>
	name = tokenTypes
	desc = Token types
}
variable.protected[] = {
	type = ImplTokenTypeMap
	name = typeMap
	desc = The actual token type map
}
variable.protected[] = {
	type = Utf8TokenType*
	name = defaultTokenType
	desc = The default token type
}

# Class properties.

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear token type map
	longDesc = Remove all token types from the map.
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumTokenTypes
	shortDesc = Get number of token types
	longDesc = Get the number of token types in the map.
	return.desc = Number of token types
	return.value = tokenTypes.size()
}
function.public[] = {
	spec = virtual
	type = void
	name = addTokenType
	shortDesc = Add token type
	longDesc = Add a token type to the map
	param[] = {
		type = const Utf8TokenType&
		name = newTokenType
		desc = Token type to be added
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = removeTokenType
	shortDesc = Remove token type
	longDesc = Remove a token type from the map
	param[] = {
		type = const Utf8TokenType&
		name = removeTokenType
		desc = Token type to be removed
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setDefaultTokenType
	shortDesc = Set default token type
	longDesc = Set the token type to be returned if a character does not match any token type in the map.
	param[] = {
		type = const Utf8TokenType&
		name = newDefaultTokenType
		desc = Default token type
	}
}
function.public[] = {
	spec = virtual
	type = Utf8TokenType
	name = getTokenType
	shortDesc = Get token type
	longDesc = Perform a token type lookup for the specified character.
	param[] = {
		type = unsigned int
		name = testChar
		desc = Unicode character
	}
	return.desc = Token type
	return.value = Utf8TokenType()
}
function.public[] = {
	spec = static
	type = bool
	name = isValid
	shortDesc = Validate token type
	longDesc = Check whether the specified token type represents a valid token (i.e. it is not invalid or empty).
	param[] = {
		type = const Utf8TokenType&
		name = checkTokenType
		desc = Token type to be checked
	}
	return.desc = \c true if the specified token type is valid, \c false otherwise
	return.value = false
}
