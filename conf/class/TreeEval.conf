# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TreeEval.conf                     Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project.name = Ionflux Tools
project.author = Joern P. Meier
project.mail = mail@ionflux.org
copyrightYear = 2004
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[0].name = Ionflux
namespace[1].name = Tools

# Include files.
include[0] = <string>
include[1] = <iostream>
include[2] = <vector>
include[3] = <ionflux/Tokenizer.h>
include[4] = <ionflux/Tree.h>
include[5] = <ionflux/TreeResolver.h>

# Class definition.
class.name = TreeEval
class.shortDesc = Tree expression evaluator
class.title = Tree expression evaluator
class.longDesc = Evaluates expressions in which tree paths are used as variables.

# Static constants.
constant.public[0].name = TT_OPERATOR
constant.public[0].type = TokenType
constant.public[0].desc = Token type: Operators
constant.public[0].value = {\
	TokenType::USERTYPE_ID + 201, "+-*/=<>&|!~%^", false, 0}

constant.public[1].name = TT_TREEPATH_NP
constant.public[1].type = TokenType
constant.public[1].desc = Token type: Tree path (excluding parentheses)
constant.public[1].value = {\
	TokenType::USERTYPE_ID + 202, ".[]'\"", false, 0}

constant.public[2].name = TT_PAR_LEFT
constant.public[2].type = TokenType
constant.public[2].desc = Token type: Parenthesis (left)
constant.public[2].value = {\
	TokenType::USERTYPE_ID + 203, "(", false, 1}

constant.public[3].name = TT_PAR_RIGHT
constant.public[3].type = TokenType
constant.public[3].desc = Token type: Parenthesis (right)
constant.public[3].value = {\
	TokenType::USERTYPE_ID + 204, ")", false, 1}
