# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Vector3.conf                Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Include files.
include = {
	'<string>'
	'<iostream>'
	'<sstream>'
	'"ionflux/ManagedObject.hpp"'
}

# Class definition.
class = {
	name = Vector3
	base = public ManagedObject
	shortDesc = Vector (R3)
	title = Vector (R3)
	longDesc =  A vector in three dimensional space.
	includeDir = ionflux
	group = {
		name = vecmath
		shortDesc = Vector mathematics
		longDesc = Tools for handling vectors and matrices in R3.
	}
}

# Public constructors.
constructor.public[0].param[0].type = double
constructor.public[0].param[0].name = initX1
constructor.public[0].param[0].desc = x1 component
constructor.public[0].param[1].type = double
constructor.public[0].param[1].name = initX2
constructor.public[0].param[1].desc = x2 component
constructor.public[0].param[2].type = double
constructor.public[0].param[2].name = initX3
constructor.public[0].param[2].desc = x3 component

constructor.public[1].param[0].type = const Vector3&
constructor.public[1].param[0].name = initVec
constructor.public[1].param[0].desc = Vector (R3)

constructor.public[2].param[0].type = const double*
constructor.public[2].param[0].name = initComp
constructor.public[2].param[0].desc = Array of vector components

# Protected variables.
variable.protected[0].type = double*
variable.protected[0].name = comp
variable.protected[0].desc = Components

# Class properties.
property[0].type = double
property[0].name = x1
property[0].setFromType = double
property[0].desc = x1 component
property[1].type = double
property[1].name = x2
property[1].setFromType = double
property[1].desc = x2 component
property[2].type = double
property[2].name = x3
property[2].setFromType = double
property[2].desc = x3 component

# Protected member functions.

# Public member functions.
function.public[0].spec = virtual
function.public[0].type = void
function.public[0].name = setComps
function.public[0].shortDesc = Set components
function.public[0].longDesc = Set the components of the vector.
function.public[0].param[0].type = double
function.public[0].param[0].name = newX1
function.public[0].param[0].desc = x1 component
function.public[0].param[1].type = double
function.public[0].param[1].name = newX2
function.public[0].param[1].desc = x2 component
function.public[0].param[2].type = double
function.public[0].param[2].name = newX3
function.public[0].param[2].desc = x3 component

function.public[1].spec = virtual
function.public[1].type = void
function.public[1].name = setComps
function.public[1].shortDesc = Set components
function.public[1].longDesc = Set the components of the vector. \
		 *\
		 * \note \c newComp is expected to have a size of at least 3.
function.public[1].param[0].type = const double*
function.public[1].param[0].name = newComp
function.public[1].param[0].desc = Component array

function.public[2].spec = virtual
function.public[2].type = void
function.public[2].name = setComp
function.public[2].shortDesc = Set component
function.public[2].longDesc = Set the specified component of the vector. \
		 *\
		 * \note If \c compIndex is out of range, this function does nothing.
function.public[2].param[0].type = int
function.public[2].param[0].name = compIndex
function.public[2].param[0].desc = Component index (0...2)
function.public[2].param[1].type = double
function.public[2].param[1].name = newComp
function.public[2].param[1].desc = New value of component

function.public[3].spec = virtual
function.public[3].type = Vector3&
function.public[3].name = operator=
function.public[3].shortDesc = Assignment operator
function.public[3].longDesc = Assign one vector to another vector.
function.public[3].param[0].type = const Vector3&
function.public[3].param[0].name = newVec
function.public[3].param[0].desc = Vector (R3)

function.public[4].spec = virtual
function.public[4].type = Vector3
function.public[4].name = operator+
function.public[4].shortDesc = Add operator
function.public[4].longDesc = Add one vector to another vector.
function.public[4].param[0].type = const Vector3&
function.public[4].param[0].name = otherVec
function.public[4].param[0].desc = Vector (R3)

function.public[5].spec = virtual
function.public[5].type = Vector3
function.public[5].name = operator-
function.public[5].shortDesc = Subtract operator
function.public[5].longDesc = Subtract one vector from another vector.
function.public[5].param[0].type = const Vector3&
function.public[5].param[0].name = otherVec
function.public[5].param[0].desc = Vector (R3)

function.public[6].spec = virtual
function.public[6].type = double
function.public[6].name = operator*
function.public[6].shortDesc = Multiply operator
function.public[6].longDesc = Calculate the scalar product of two vectors.
function.public[6].param[0].type = const Vector3&
function.public[6].param[0].name = otherVec
function.public[6].param[0].desc = Vector (R3)

function.public[7].spec = virtual
function.public[7].type = Vector3
function.public[7].name = operator*
function.public[7].shortDesc = Multiply operator
function.public[7].longDesc = Calculate the product of the vector and a scalar.
function.public[7].param[0].type = double
function.public[7].param[0].name = a
function.public[7].param[0].desc = Scalar

function.public[8].spec = virtual
function.public[8].type = double
function.public[8].name = operator[]
function.public[8].shortDesc = Subscript operator
function.public[8].longDesc = Access a component of the vector.\
		 *\
		 * \note If \c compIndex is out of range, the function returns 0.
function.public[8].param[0].type = int
function.public[8].param[0].name = compIndex
function.public[8].param[0].desc = Component index (0...2)

function.public[9].spec = virtual
function.public[9].type = std::string
function.public[9].name = toString
function.public[9].shortDesc = Create string representation
function.public[9].longDesc = Create a string representation of the vector \
		 * (i.e. "(&lt;x1&gt;,&lt;x2&gt;,&lt;x3&gt;)").
