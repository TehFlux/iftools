# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# EMailAddress.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'"ionflux/tools.hpp"'
	'"ionflux/ManagedObject.hpp"'
	'"ionflux/StringManipulator.hpp"'
}

# Class definition.
class = {
	name = EMailAddress
	base = public Ionflux::Tools::ManagedObject
	shortDesc = EMail address
	title = EMail address
	longDesc =  An email address, as defined in RFC 2822.
	includeDir = ionflux
	group.name = general
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const EMailAddress&
		name = initAddress
		desc = EMail address
	}
}
constructor.public[] = {
	param[] = {
		type = const std::string&
		name = initRawAddress
		desc = Unparsed address
	}
}

# Protected variables.
variable.protected[] = {
	type = bool
	name = validAddress
	desc = Validity flag
}
variable.protected[] = {
	type = std::vector<Mailbox>
	name = mailboxes
	desc = Mailboxes which are part of this address
}

# Public constants.
constant.public[] = {
	name = TT_ATOM_TEXT
	type = Ionflux::Tools::TokenType
	desc = Token type: Atom text
	value = \{\
	TokenType::USERTYPE_ID + 1301, \
	"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890"\
	"!#$%&'*+-/=?^_`{|}~", false, 0\}
}
constant.public[] = {
	name = TT_SPECIAL
	type = Ionflux::Tools::TokenType
	desc = Token type: Special
	value = \{\
	TokenType::USERTYPE_ID + 1302, "()<>[]:;@\\,.\"", false, 0\}
}
constant.public[] = {
	name = TT_FWS
	type = Ionflux::Tools::TokenType
	desc = Token type: Folding whitespace
	value = \{\
	TokenType::USERTYPE_ID + 1303, " \t\r\n", false, 0\}
}

# Protected class properties.
property.protected[] = {
	type = std::string
	name = rawAddress
	setFromType = const std::string&
	desc = Unparsed address
}
property.protected[] = {
	type = std::string
	name = displayName
	setFromType = const std::string&
	desc = Display name (mailbox or group)
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Reset all fields.
}
function.public[] = {
	spec = virtual
	type = bool
	name = parse
	shortDesc = Parse email address
	longDesc = Parse an email address.
	param[] = {
		type = const std::string&
		name = newRawAddress
		desc = Unparsed email address
		default = ""
	}
	return.value = false
	return.desc = \c true on success, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = bool
	name = isValid
	const = true
	shortDesc = Validate address
	longDesc = Check whether this email address is valid.
	return.value = false
	return.desc = \c true if the email address is valid, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = const std::vector<Mailbox>&
	name = getMailboxes
	const = true
	shortDesc = Get mailboxes
	longDesc = Get the mailboxes which are part of this address.
	return.value = mailboxes
	return.desc = Mailboxes
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumMailboxes
	const = true
	shortDesc = Get number of mailboxes
	longDesc = Get the number of mailboxes which are part of this address.
	return.value = 0
	return.desc = Number of mailboxes
}
function.public[] = {
	spec = virtual
	type = Mailbox
	name = getMailbox
	const = true
	shortDesc = Get mailbox
	longDesc = Get the mailbox with specified index.
	param[] = {
		type = unsigned int
		name = mailboxIndex
		desc = Mailbox index
		default = 0
	}
	return.value = MailBox()
	return.desc = Mailbox with specified index, or an empty mailbox if mailbox with specified index does not exist
}
function.public[] = {
	spec = virtual
	type = EMailAddress&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign one EMailAddress to another EMailAddress.
	param[] = {
		type = const EMailAddress&
		name = newEMailAddress
		desc = EMailAddress
	}
}
function.public[] = {
	spec = virtual
	type = EMailAddress&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a string to an EMailAddress.
	param[] = {
		type = const std::string&
		name = newRawAddress
		desc = Unparsed email address
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = printDebugInfo
	const = true
	shortDesc = Print debug information
	longDesc = Print useful information for debugging purposes.
}
