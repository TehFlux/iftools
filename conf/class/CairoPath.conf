# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoPath.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include.header = {
	'"cairo.h"'
	'"ionflux/ObjectPool.hpp"'
	'"ionflux/CairoPathIterator.hpp"'
}
include.impl = {
	'"ionflux/CairoPathIterator.hpp"'
}

# Forward declarations.
forward = {
	'class PathIterator'
}

# Class definition.
class = {
	name = Path
	base = public Ionflux::Tools::ManagedObject
	shortDesc = Cairo path
	title = Cairo path
	longDesc = A path in the Cairo vector graphics API (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const Path&
		name = initPath
		desc = Cairo path
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_path_t*
		name = initPath
		desc = Cairo path
	}
}

# Protected variables.
variable.protected[] = {
	type = Ionflux::Tools::ObjectPool
	name = pool
	desc = Object pool
}
variable.protected[] = {
	type = std::vector<PathData*>
	name = pathData
	desc = Path data
}

# Public constants.

# Protected class properties.
property.protected[] = {
	type = cairo_path_t*
	setFromType = cairo_path_t*
	name = cairoPath
	desc = Cairo path
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = initPathData
	shortDesc = Initialize path data
	longDesc = Initialize the path data vector
}
function.protected[] = {
	spec = virtual
	type = void
	name = clearPathData
	shortDesc = Clear path data
	longDesc = Clear the path data vector
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = destroy
	shortDesc = Destroy
	longDesc = Destroy path
	impl = cairo_path_destroy(cairoPath);
}
function.public[] = {
	spec = virtual
	type = cairo_status_t
	name = getStatus
	shortDesc = Get status
	longDesc = Get status
	return.value = CAIRO_STATUS_SUCCESS
	return.desc = Status
}
function.public[] = {
	spec = virtual
	type = cairo_path_data_t*
	name = getData
	shortDesc = Get data
	longDesc = Get data
	return.value = 0
	return.desc = Path data
}
function.public[] = {
	spec = virtual
	type = PathData*
	name = getDataElement
	shortDesc = Get data element
	longDesc = Get the data element with the specified index.
	param[] = {
		type = unsigned int
		name = elementIndex
		desc = Element index
	}
	return.value = 0
	return.desc = Path data element, or 0 if the element with the specified index doesn't exist.
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumData
	shortDesc = Get number of data elements
	longDesc = Get number of data elements
	return.value = 0
	return.desc = Number of data elements
}
function.public[] = {
	spec = virtual
	type = PathIterator
	name = begin
	shortDesc = Begin
	longDesc = Return an iterator to the beginning of the path element list.
	return.value = PathIterator(*this, 0)
}
function.public[] = {
	spec = virtual
	type = PathIterator
	name = end
	shortDesc = End
	longDesc = Return an iterator to the end of the path element list.
	return.value = PathIterator(*this, getNumData())
}
function.public[] = {
	spec = virtual
	type = Path&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a path to another path.
	param[] = {
		type = const Path&
		name = newCairoPath
		desc = Cairo path
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = Path&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo path to this path object.
	param[] = {
		type = cairo_path_t*
		name = newCairoPath
		desc = Cairo path
	}
	return.value = *this
	return.desc = The object itself
}
