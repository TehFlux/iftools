# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoContext.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include.header = {
	'<string>'
	'"cairo.h"'
	'"ionflux/color.hpp"'
	'"ionflux/ManagedObject.hpp"'
	'"ionflux/CairoMatrix.hpp"'
	'"ionflux/CairoPattern.hpp"'
	'"ionflux/CairoSurface.hpp"'
	'"ionflux/CairoPath.hpp"'
}

# Class definition.
class = {
	name = CairoContext
	base = public ManagedObject
	shortDesc = Cairo context
	title = Cairo context
	longDesc = A wrapper for the Cairo vector graphics API (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
	group.shortDesc = Cairo
	group.longDesc = The Cairo vector graphics API.
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const CairoContext&
		name = initCairoContext
		desc = Cairo context
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_t*
		name = initCairoContext
		desc = Cairo context
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_surface_t*
		name = initSurface
		desc = Cairo surface
	}
}
constructor.public[] = {
	param[] = {
		type = Surface&
		name = initSurface
		desc = Cairo surface
	}
}

# Protected variables.

# Public constants.

# Protected class properties.
property.protected[] = {
	type = cairo_t*
	name = cairoContext
	setFromType = cairo_t*
	desc = Cairo context
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = reference
	shortDesc = Reference
	longDesc = Reference
	impl = cairo_reference(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = destroy
	shortDesc = Destroy
	longDesc = Destroy
	impl = cairo_destroy(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = save
	shortDesc = Save
	longDesc = Save
	impl = cairo_save(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = restore
	shortDesc = Restore
	longDesc = Restore
	impl = cairo_restore(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = setOperator
	shortDesc = Set operator
	longDesc = Set operator
	param[] = {
		type = cairo_operator_t
		name = op
		desc = Op
	}
	impl = cairo_set_operator(cr, op);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSource
	shortDesc = Set source
	longDesc = Set source
	param[] = {
		type = cairo_pattern_t*
		name = source
		desc = Source
	}
	impl = cairo_set_source(cr, source);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSource
	shortDesc = Set source
	longDesc = Set source
	param[] = {
		type = const Pattern&
		name = source
		desc = Source
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceRgb
	shortDesc = Set source rgb
	longDesc = Set source rgb
	param[] = {
		type = double
		name = red
		desc = Red
	}
	param[] = {
		type = double
		name = green
		desc = Green
	}
	param[] = {
		type = double
		name = blue
		desc = Blue
	}
	impl = cairo_set_source_rgb(cr, red, green, blue);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceRgba
	shortDesc = Set source rgba
	longDesc = Set source rgba
	param[] = {
		type = double
		name = red
		desc = Red
	}
	param[] = {
		type = double
		name = green
		desc = Green
	}
	param[] = {
		type = double
		name = blue
		desc = Blue
	}
	param[] = {
		type = double
		name = alpha
		desc = Alpha
	}
	impl = cairo_set_source_rgba(cr, red, green, blue, alpha);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceColor
	shortDesc = Set source color
	longDesc = Set source Color
	param[] = {
		type = const Ionflux::Tools::Color&
		name = color
		desc = Color
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceSurface
	shortDesc = Set source surface
	longDesc = Set source surface
	param[] = {
		type = cairo_surface_t*
		name = surface
		desc = Surface
	}
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
	impl = cairo_set_source_surface(cr, surface, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceSurface
	shortDesc = Set source surface
	longDesc = Set source surface
	param[] = {
		type = Surface&
		name = surface
		desc = Surface
	}
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setTolerance
	shortDesc = Set tolerance
	longDesc = Set tolerance
	param[] = {
		type = double
		name = tolerance
		desc = Tolerance
	}
	impl = cairo_set_tolerance(cr, tolerance);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFillRule
	shortDesc = Set fill rule
	longDesc = Set fill rule
	param[] = {
		type = cairo_fill_rule_t
		name = fill_rule
		desc = Fill_rule
	}
	impl = cairo_set_fill_rule(cr, fill_rule);
}
function.public[] = {
	spec = virtual
	type = void
	name = setLineWidth
	shortDesc = Set line width
	longDesc = Set line width
	param[] = {
		type = double
		name = width
		desc = Width
	}
	impl = cairo_set_line_width(cr, width);
}
function.public[] = {
	spec = virtual
	type = void
	name = setLineCap
	shortDesc = Set line cap
	longDesc = Set line cap
	param[] = {
		type = cairo_line_cap_t
		name = line_cap
		desc = Line_cap
	}
	impl = cairo_set_line_cap(cr, line_cap);
}
function.public[] = {
	spec = virtual
	type = void
	name = setLineJoin
	shortDesc = Set line join
	longDesc = Set line join
	param[] = {
		type = cairo_line_join_t
		name = line_join
		desc = Line_join
	}
	impl = cairo_set_line_join(cr, line_join);
}
function.public[] = {
	spec = virtual
	type = void
	name = setDash
	shortDesc = Set dash
	longDesc = Set dash
	param[] = {
		type = double*
		name = dashes
		desc = Dashes
	}
	param[] = {
		type = int
		name = ndash
		desc = Ndash
	}
	param[] = {
		type = double
		name = offset
		desc = Offset
	}
	impl = cairo_set_dash(cr, dashes, ndash, offset);
}
function.public[] = {
	spec = virtual
	type = void
	name = setMiterLimit
	shortDesc = Set miter limit
	longDesc = Set miter limit
	param[] = {
		type = double
		name = limit
		desc = Limit
	}
	impl = cairo_set_miter_limit(cr, limit);
}
function.public[] = {
	spec = virtual
	type = void
	name = translate
	shortDesc = Translate
	longDesc = Translate
	param[] = {
		type = double
		name = tx
		desc = Tx
	}
	param[] = {
		type = double
		name = ty
		desc = Ty
	}
	impl = cairo_translate(cr, tx, ty);
}
function.public[] = {
	spec = virtual
	type = void
	name = scale
	shortDesc = Scale
	longDesc = Scale
	param[] = {
		type = double
		name = sx
		desc = Sx
	}
	param[] = {
		type = double
		name = sy
		desc = Sy
	}
	impl = cairo_scale(cr, sx, sy);
}
function.public[] = {
	spec = virtual
	type = void
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate
	param[] = {
		type = double
		name = angle
		desc = Angle
	}
	impl = cairo_rotate(cr, angle);
}
function.public[] = {
	spec = virtual
	type = void
	name = transform
	shortDesc = Transform
	longDesc = Transform
	param[] = {
		type = const cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_transform(cr, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = transform
	shortDesc = Transform
	longDesc = Transform
	param[] = {
		type = const Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setMatrix
	shortDesc = Set matrix
	longDesc = Set matrix
	param[] = {
		type = const cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_set_matrix(cr, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = setMatrix
	shortDesc = Set matrix
	longDesc = Set matrix
	param[] = {
		type = const Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = identityMatrix
	shortDesc = Identity matrix
	longDesc = Identity matrix
	impl = cairo_identity_matrix(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = userToDevice
	shortDesc = User to device
	longDesc = User to device
	param[] = {
		type = double*
		name = x
		desc = X
	}
	param[] = {
		type = double*
		name = y
		desc = Y
	}
	impl = cairo_user_to_device(cr, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = userToDeviceDistance
	shortDesc = User to device distance
	longDesc = User to device distance
	param[] = {
		type = double*
		name = dx
		desc = Dx
	}
	param[] = {
		type = double*
		name = dy
		desc = Dy
	}
	impl = cairo_user_to_device_distance(cr, dx, dy);
}
function.public[] = {
	spec = virtual
	type = void
	name = deviceToUser
	shortDesc = Device to user
	longDesc = Device to user
	param[] = {
		type = double*
		name = x
		desc = X
	}
	param[] = {
		type = double*
		name = y
		desc = Y
	}
	impl = cairo_device_to_user(cr, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = deviceToUserDistance
	shortDesc = Device to user distance
	longDesc = Device to user distance
	param[] = {
		type = double*
		name = dx
		desc = Dx
	}
	param[] = {
		type = double*
		name = dy
		desc = Dy
	}
	impl = cairo_device_to_user_distance(cr, dx, dy);
}
function.public[] = {
	spec = virtual
	type = void
	name = newPath
	shortDesc = New path
	longDesc = New path
	impl = cairo_new_path(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = moveTo
	shortDesc = Move to
	longDesc = Move to
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
	impl = cairo_move_to(cr, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = lineTo
	shortDesc = Line to
	longDesc = Line to
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
	impl = cairo_line_to(cr, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = curveTo
	shortDesc = Curve to
	longDesc = Curve to
	param[] = {
		type = double
		name = x1
		desc = X1
	}
	param[] = {
		type = double
		name = y1
		desc = Y1
	}
	param[] = {
		type = double
		name = x2
		desc = X2
	}
	param[] = {
		type = double
		name = y2
		desc = Y2
	}
	param[] = {
		type = double
		name = x3
		desc = X3
	}
	param[] = {
		type = double
		name = y3
		desc = Y3
	}
	impl = cairo_curve_to(cr, x1, y1, x2, y2, x3, y3);
}
function.public[] = {
	spec = virtual
	type = void
	name = arc
	shortDesc = Arc
	longDesc = Arc
	param[] = {
		type = double
		name = xc
		desc = Xc
	}
	param[] = {
		type = double
		name = yc
		desc = Yc
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = angle1
		desc = Angle1
	}
	param[] = {
		type = double
		name = angle2
		desc = Angle2
	}
	impl = cairo_arc(cr, xc, yc, radius, angle1, angle2);
}
function.public[] = {
	spec = virtual
	type = void
	name = arcNegative
	shortDesc = Arc negative
	longDesc = Arc negative
	param[] = {
		type = double
		name = xc
		desc = Xc
	}
	param[] = {
		type = double
		name = yc
		desc = Yc
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = angle1
		desc = Angle1
	}
	param[] = {
		type = double
		name = angle2
		desc = Angle2
	}
	impl = cairo_arc_negative(cr, xc, yc, radius, angle1, angle2);
}
function.public[] = {
	spec = virtual
	type = void
	name = relMoveTo
	shortDesc = Rel move to
	longDesc = Rel move to
	param[] = {
		type = double
		name = dx
		desc = Dx
	}
	param[] = {
		type = double
		name = dy
		desc = Dy
	}
	impl = cairo_rel_move_to(cr, dx, dy);
}
function.public[] = {
	spec = virtual
	type = void
	name = relLineTo
	shortDesc = Rel line to
	longDesc = Rel line to
	param[] = {
		type = double
		name = dx
		desc = Dx
	}
	param[] = {
		type = double
		name = dy
		desc = Dy
	}
	impl = cairo_rel_line_to(cr, dx, dy);
}
function.public[] = {
	spec = virtual
	type = void
	name = relCurveTo
	shortDesc = Rel curve to
	longDesc = Rel curve to
	param[] = {
		type = double
		name = dx1
		desc = Dx1
	}
	param[] = {
		type = double
		name = dy1
		desc = Dy1
	}
	param[] = {
		type = double
		name = dx2
		desc = Dx2
	}
	param[] = {
		type = double
		name = dy2
		desc = Dy2
	}
	param[] = {
		type = double
		name = dx3
		desc = Dx3
	}
	param[] = {
		type = double
		name = dy3
		desc = Dy3
	}
	impl = cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3);
}
function.public[] = {
	spec = virtual
	type = void
	name = rectangle
	shortDesc = Rectangle
	longDesc = Rectangle
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	impl = cairo_rectangle(cr, x, y, width, height);
}
function.public[] = {
	spec = virtual
	type = void
	name = closePath
	shortDesc = Close path
	longDesc = Close path
	impl = cairo_close_path(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = paint
	shortDesc = Paint
	longDesc = Paint
	impl = cairo_paint(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = paintWithAlpha
	shortDesc = Paint with alpha
	longDesc = Paint with alpha
	param[] = {
		type = double
		name = alpha
		desc = Alpha
	}
	impl = cairo_paint_with_alpha(cr, alpha);
}
function.public[] = {
	spec = virtual
	type = void
	name = mask
	shortDesc = Mask
	longDesc = Mask
	param[] = {
		type = cairo_pattern_t*
		name = pattern
		desc = Pattern
	}
	impl = cairo_mask(cr, pattern);
}
function.public[] = {
	spec = virtual
	type = void
	name = mask
	shortDesc = Mask
	longDesc = Mask
	param[] = {
		type = const Pattern&
		name = pattern
		desc = Pattern
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = maskSurface
	shortDesc = Mask surface
	longDesc = Mask surface
	param[] = {
		type = cairo_surface_t*
		name = surface
		desc = Surface
	}
	param[] = {
		type = double
		name = surface_x
		desc = Surface_x
	}
	param[] = {
		type = double
		name = surface_y
		desc = Surface_y
	}
	impl = cairo_mask_surface(cr, surface, surface_x, surface_y);
}
function.public[] = {
	spec = virtual
	type = void
	name = maskSurface
	shortDesc = Mask surface
	longDesc = Mask surface
	param[] = {
		type = Surface&
		name = surface
		desc = Surface
	}
	param[] = {
		type = double
		name = surface_x
		desc = Surface_x
	}
	param[] = {
		type = double
		name = surface_y
		desc = Surface_y
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = stroke
	shortDesc = Stroke
	longDesc = Stroke
	impl = cairo_stroke(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = strokePreserve
	shortDesc = Stroke preserve
	longDesc = Stroke preserve
	impl = cairo_stroke_preserve(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = fill
	shortDesc = Fill
	longDesc = Fill
	impl = cairo_fill(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = fillPreserve
	shortDesc = Fill preserve
	longDesc = Fill preserve
	impl = cairo_fill_preserve(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = copyPage
	shortDesc = Copy page
	longDesc = Copy page
	impl = cairo_copy_page(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = showPage
	shortDesc = Show page
	longDesc = Show page
	impl = cairo_show_page(cr);
}
function.public[] = {
	spec = virtual
	type = cairo_bool_t
	name = inStroke
	shortDesc = In stroke
	longDesc = In stroke
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
	return.value = cairo_in_stroke(cr, x, y)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = cairo_bool_t
	name = inFill
	shortDesc = In fill
	longDesc = In fill
	param[] = {
		type = double
		name = x
		desc = X
	}
	param[] = {
		type = double
		name = y
		desc = Y
	}
	return.value = cairo_in_fill(cr, x, y)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = strokeExtents
	shortDesc = Stroke extents
	longDesc = Stroke extents
	param[] = {
		type = double*
		name = x1
		desc = X1
	}
	param[] = {
		type = double*
		name = y1
		desc = Y1
	}
	param[] = {
		type = double*
		name = x2
		desc = X2
	}
	param[] = {
		type = double*
		name = y2
		desc = Y2
	}
	impl = cairo_stroke_extents(cr, x1, y1, x2, y2);
}
function.public[] = {
	spec = virtual
	type = void
	name = fillExtents
	shortDesc = Fill extents
	longDesc = Fill extents
	param[] = {
		type = double*
		name = x1
		desc = X1
	}
	param[] = {
		type = double*
		name = y1
		desc = Y1
	}
	param[] = {
		type = double*
		name = x2
		desc = X2
	}
	param[] = {
		type = double*
		name = y2
		desc = Y2
	}
	impl = cairo_fill_extents(cr, x1, y1, x2, y2);
}
function.public[] = {
	spec = virtual
	type = void
	name = resetClip
	shortDesc = Reset clip
	longDesc = Reset clip
	impl = cairo_reset_clip(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = clip
	shortDesc = Clip
	longDesc = Clip
	impl = cairo_clip(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = clipPreserve
	shortDesc = Clip preserve
	longDesc = Clip preserve
	impl = cairo_clip_preserve(cr);
}
function.public[] = {
	spec = virtual
	type = void
	name = selectFontFace
	shortDesc = Select font face
	longDesc = Select font face
	param[] = {
		type = const std::string&
		name = family
		desc = Family
	}
	param[] = {
		type = cairo_font_slant_t
		name = slant
		desc = Slant
	}
	param[] = {
		type = cairo_font_weight_t
		name = weight
		desc = Weight
	}
	impl = cairo_select_font_face(cr, family, slant, weight);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFontSize
	shortDesc = Set font size
	longDesc = Set font size
	param[] = {
		type = double
		name = size
		desc = Size
	}
	impl = cairo_set_font_size(cr, size);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFontMatrix
	shortDesc = Set font matrix
	longDesc = Set font matrix
	param[] = {
		type = const cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_set_font_matrix(cr, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFontMatrix
	shortDesc = Set font matrix
	longDesc = Set font matrix
	param[] = {
		type = const Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = getFontMatrix
	shortDesc = Get font matrix
	longDesc = Get font matrix
	param[] = {
		type = cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_get_font_matrix(cr, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = getFontMatrix
	shortDesc = Get font matrix
	longDesc = Get font matrix
	param[] = {
		type = Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = showText
	shortDesc = Show text
	longDesc = Show text
	param[] = {
		type = const std::string&
		name = utf8
		desc = Utf8
	}
	impl = cairo_show_text(cr, utf8);
}
function.public[] = {
	spec = virtual
	type = void
	name = showGlyphs
	shortDesc = Show glyphs
	longDesc = Show glyphs
	param[] = {
		type = cairo_glyph_t*
		name = glyphs
		desc = Glyphs
	}
	param[] = {
		type = int
		name = num_glyphs
		desc = Num_glyphs
	}
	impl = cairo_show_glyphs(cr, glyphs, num_glyphs);
}
function.public[] = {
	spec = virtual
	type = cairo_font_face_t*
	name = getFontFace
	shortDesc = Get font face
	longDesc = Get font face
	return.value = cairo_get_font_face(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = fontExtents
	shortDesc = Font extents
	longDesc = Font extents
	param[] = {
		type = cairo_font_extents_t*
		name = extents
		desc = Extents
	}
	impl = cairo_font_extents(cr, extents);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFontFace
	shortDesc = Set font face
	longDesc = Set font face
	param[] = {
		type = cairo_font_face_t*
		name = font_face
		desc = Font_face
	}
	impl = cairo_set_font_face(cr, font_face);
}
function.public[] = {
	spec = virtual
	type = void
	name = textExtents
	shortDesc = Text extents
	longDesc = Text extents
	param[] = {
		type = const std::string&
		name = utf8
		desc = Utf8
	}
	param[] = {
		type = cairo_text_extents_t*
		name = extents
		desc = Extents
	}
	impl = cairo_text_extents(cr, utf8, extents);
}
function.public[] = {
	spec = virtual
	type = void
	name = glyphExtents
	shortDesc = Glyph extents
	longDesc = Glyph extents
	param[] = {
		type = cairo_glyph_t*
		name = glyphs
		desc = Glyphs
	}
	param[] = {
		type = int
		name = num_glyphs
		desc = Num_glyphs
	}
	param[] = {
		type = cairo_text_extents_t*
		name = extents
		desc = Extents
	}
	impl = cairo_glyph_extents(cr, glyphs, num_glyphs, extents);
}
function.public[] = {
	spec = virtual
	type = void
	name = textPath
	shortDesc = Text path
	longDesc = Text path
	param[] = {
		type = const std::string&
		name = utf8
		desc = Utf8
	}
	impl = cairo_text_path(cr, utf8);
}
function.public[] = {
	spec = virtual
	type = void
	name = glyphPath
	shortDesc = Glyph path
	longDesc = Glyph path
	param[] = {
		type = cairo_glyph_t*
		name = glyphs
		desc = Glyphs
	}
	param[] = {
		type = int
		name = num_glyphs
		desc = Num_glyphs
	}
	impl = cairo_glyph_path(cr, glyphs, num_glyphs);
}
function.public[] = {
	spec = virtual
	type = cairo_operator_t
	name = getOperator
	shortDesc = Get operator
	longDesc = Get operator
	return.value = cairo_get_operator(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = cairo_pattern_t*
	name = getSource
	shortDesc = Get source
	longDesc = Get source
	return.value = cairo_get_source(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = double
	name = getTolerance
	shortDesc = Get tolerance
	longDesc = Get tolerance
	return.value = cairo_get_tolerance(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = getCurrentPoint
	shortDesc = Get current point
	longDesc = Get current point
	param[] = {
		type = double*
		name = x
		desc = X
	}
	param[] = {
		type = double*
		name = y
		desc = Y
	}
	impl = cairo_get_current_point(cr, x, y);
}
function.public[] = {
	spec = virtual
	type = cairo_fill_rule_t
	name = getFillRule
	shortDesc = Get fill rule
	longDesc = Get fill rule
	return.value = cairo_get_fill_rule(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = double
	name = getLineWidth
	shortDesc = Get line width
	longDesc = Get line width
	return.value = cairo_get_line_width(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = cairo_line_cap_t
	name = getLineCap
	shortDesc = Get line cap
	longDesc = Get line cap
	return.value = cairo_get_line_cap(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = cairo_line_join_t
	name = getLineJoin
	shortDesc = Get line join
	longDesc = Get line join
	return.value = cairo_get_line_join(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = double
	name = getMiterLimit
	shortDesc = Get miter limit
	longDesc = Get miter limit
	return.value = cairo_get_miter_limit(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = getMatrix
	shortDesc = Get matrix
	longDesc = Get matrix
	param[] = {
		type = cairo_matrix_t*
		name = matrix
		desc = Matrix
	}
	impl = cairo_get_matrix(cr, matrix);
}
function.public[] = {
	spec = virtual
	type = void
	name = getMatrix
	shortDesc = Get matrix
	longDesc = Get matrix
	param[] = {
		type = Matrix&
		name = matrix
		desc = Matrix
	}
}
function.public[] = {
	spec = virtual
	type = cairo_surface_t*
	name = getTarget
	shortDesc = Get target
	longDesc = Get target
	return.value = cairo_get_target(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = getTarget
	shortDesc = Get target
	longDesc = Get target
	param[] = {
		type = Surface&
		name = surface
		desc = Where to store the surface
	}
}
function.public[] = {
	spec = virtual
	type = cairo_path_t*
	name = copyPath
	shortDesc = Copy path
	longDesc = Copy path
	return.value = cairo_copy_path(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = copyPath
	shortDesc = Copy path
	longDesc = Copy path
	param[] = {
		type = Path&
		name = target
		desc = Where to store the path
	}
}
function.public[] = {
	spec = virtual
	type = cairo_path_t*
	name = copyPathFlat
	shortDesc = Copy path flat
	longDesc = Copy path flat
	return.value = cairo_copy_path_flat(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = copyPathFlat
	shortDesc = Copy path flat
	longDesc = Copy path flat
	param[] = {
		type = Path&
		name = target
		desc = Where to store the path
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = appendPath
	shortDesc = Append path
	longDesc = Append path
	param[] = {
		type = cairo_path_t*
		name = path
		desc = Path
	}
	impl = cairo_append_path(cr, path);
}
function.public[] = {
	spec = virtual
	type = void
	name = appendPath
	shortDesc = Append path
	longDesc = Append path
	param[] = {
		type = Path&
		name = path
		desc = Path
	}
}
function.public[] = {
	spec = virtual
	type = cairo_status_t
	name = status
	shortDesc = Status
	longDesc = Status
	return.value = cairo_status(cr)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = std::string
	name = statusToString
	shortDesc = Status to string
	longDesc = Status to string
	param[] = {
		type = cairo_status_t
		name = status
		desc = Status
	}
	return.value = cairo_status_to_string(status)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = CairoContext&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign one cairo object to another Cairo object.
	param[] = {
		type = const CairoContext&
		name = newCairoContext
		desc = Cairo context
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = CairoContext&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo context to this Cairo object.
	param[] = {
		type = cairo_t*
		name = newCairoContext
		desc = Cairo context
	}
	return.value = *this
	return.desc = The object itself
}
