# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004-2005 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ExampleClass.conf          Example class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2004-2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
	'namespace Ionflux::Tools'
}

# Include files (header).
#
# These include directives will be added to the header file.
include.header = {
	'<string>'
	'<iostream>'
	'<vector>'
	'<map>'
	'ionflux/ObjectPool.hpp'
}

# Include files (implementation).
#
# Use this for include directives that should be added to the implementation 
# instead of the header file. This is useful for classes which have been 
# declared in a forward declaration.
#
# include.impl = {
#     'SomeClass.hpp'
# }

# Forward declarations.
# forward = {
#     'class SomeClass'
# }

# Typedefs.
# typedef = {
#     'std::map<int, int> FooMap'
# }

# Helper structs.
#
# You can use this feature to declare any number of additional structs in a 
# class header.
struct[] = {
	name = Blupp
	desc = A blupp object
	field[] = {
		type = int
		name = foo
		desc = Foo value
	}
	field[] = {
		type = int
		name = bar
		desc = Bar value
	}
}
struct[] = {
	name = Blah
	desc = A blah object
	field[] = {
		type = double
		name = baz
		desc = Baz value
	}
	field[] = {
		type = double
		name = baf
		desc = Baf value
	}
	constant[] = {
		type = int
		name = SOME_FLAG
		desc = Some flag
		value = -1
	}
}

# Class definition.
class = {
	name = ExampleClass
	shortDesc = Example class
	title = Example class
	longDesc = This class has been generated automatically by the Ionflux Tools template processor.
	includeDir = ionflux
	# This is used to specify the documentation group for Doxygen. shortDesc 
	# and longDesc need to be specified only once. After that has been done, 
	# classes can be assigned to a group by just specifying group.name.
	group.name = example
	group.shortDesc = Examples
	group.longDesc = Example classes
	# Set to 'true' to enable automatic generation of class information which
	# can be queried at run-time.
	createClassInfo = true
	# Set to 'true' if you want to use this object with automatic memory 
	# management using an object pool.
	managed = true
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = double
		name = initMiep
		desc = Initial miepness
	}
}

# Member variables.
variable.protected[] = {
	type = Ionflux::Tools::ObjectPool
	name = pool
	desc = Object pool
}
variable.protected[] = {
	name = miep
	type = double
	desc = Miepness of the object
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
property.protected[] = {
	name = someValue
	type = int
	setFromType = int
	desc = Some numeric value
}
property.protected[] = {
	name = someText
	type = std::string
	setFromType = const std::string&
	desc = Some byte string
}
property.protected[] = {
	name = roProp
	type = double
	setFromType = double
	desc = A read-only property
	readOnly = true
}
property.protected[] = {
	name = specialBlah
	type = Blah*
	setFromType = Blah*
	desc = Special Blah object
	# If the 'managed' option is set to 'true', objects will be 
	# referenced and properly when set. The object pool to be used may be 
	# specified with the 'poolName' option.
	managed = true
	poolName = pool
}
property.protected[] = {
	# Set the 'style' option to vector to automatically provide 
	# functions for secure access to elements of a vector field.
	# Also, the type of the vector field will be generated automatically 
	# from the element type.
	style = vector
	name = blupps
	desc = Blupp vector
	element = {
		type = Blupp*
		name = Blupp
		# Set addType and removeType if you need special types for adding 
		# or removing elements.
		#  addType = const Blupp&
		#  removeType = const Blupp&
		# The default value is the value which will be returned if a 
		# requested element is not found.
		#  defaultValue = 0
		# If the 'managed' option is set to 'true', objects will be 
		# referenced and unreferenced properly when added/removed.
		#  managed = true
	}
	# You can set the vector to be read-only as well.
	#  readOnly = true
}
property.protected[] = {
	# Set the 'style' option to map to automatically provide 
	# functions for secure access to elements of a map.
	# Also, the type of the map field will be generated automatically 
	# from the key type and the element type.
	style = map
	name = blahs
	desc = Blah map
	key = {
		type = std::string
		# The access type will be used in function declarations instead 
		# of the actual key type.
		accessType = const std::string&
	}
	element = {
		type = Blah*
		name = Blah
		# Set addType and removeType if you need special types for adding 
		# or removing elements.
		#  addType = const Blah&
		#  removeType = const Blah&
		# The default value is the value which will be returned if a 
		# requested element is not found.
		#  defaultValue = 0
		# If the 'managed' option is set to 'true', objects will be 
		# referenced and unreferenced properly when added/removed.
		#  managed = true
	}
	# You can set the map to be read-only as well.
	#  readOnly = true
}

# Public static constants.
constant.public[] = {
	name = MODULE_NAME
	type = std::string
	desc = Module name
	value = "Example"
}
constant.public[] = {
	name = MODULE_VERSION
	type = unsigned int
	desc = Module version
	value = 1
}

# Protected static constants.
constant.protected[] = {
	name = SOME_UID
	type = std::string
	desc = Unique ID
	value = 42
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = int
	name = doStuff
	shortDesc = Do stuff.
	longDesc = Does some stuff.
	param[] = {
		type = int
		name = foo
		desc = A number to do stuff with
	}
	param[] = {
		type = char
		name = bar
		desc = A character to do stuff with
		default = 'x'
	}
	return.value = 0
	return.desc = The result of doing stuff
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	const = true
	name = doNothing
	shortDesc = Do nothing.
	longDesc = Does nothing.
	impl = cout << "Doing nothing." << endl;
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = void
	pureVirtual = true
	name = needsImplementation
	shortDesc = Needs implementation.
	longDesc = This function must be implemented by a derived class.
}
