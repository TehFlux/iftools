# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ObjectPool.conf          Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
}

# Include files.
include.header = {
	'<string>'
	'<iostream>'
	'<vector>'
	'"ionflux/ManagedObject.hpp"'
	'"ionflux/Reporter.hpp"'
}

# Class definition.
class = {
	name = ObjectPool
	shortDesc = Object pool
	title = Object pool
	longDesc = A pool of reference counted objects. The purpose of the pool is to delete objects at the end of the lifetime, or on a forced cleanup of the pool, if they are not needed anymore. An object managed by the pool will be deleted if its reference count is zero upon cleanup of the pool.\
\
\note To avoid confusion, pools are not intended for explicitly managed objects, that is, objects which have their parent memory management flag set to \c true. Such objects will never be added to a pool and a warning message may be issued if an attempt is made to add an explicitly managed object to a pool.
	includeDir = ionflux
	group.name = memmgmt
}

# Public constructors.

# Protected variables.
variable.protected[] = {
	type = Ionflux::Tools::Reporter
	name = log
	desc = Console output/logging
}
variable.protected[] = {
	type = std::map<ManagedObject*, bool>
	name = objects
	desc = Objects managed by the pool
}

# Public constants.

# Protected class properties.
property.protected[] = {
	type = bool
	setFromType = bool
	name = watchMode
	desc = Watch mode flag
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = unrefAll
	shortDesc = Unreference all objects
	longDesc = Remove the reference held by the pool for all objects.
}
function.protected[] = {
	spec = virtual
	type = void
	name = removeUnused
	shortDesc = Remove unused objects
	longDesc = Remove all objects for which the reference count has dropped to zero (or to specified value).
	param[] = {
		type = unsigned int
		name = threshold
		desc = Threshold
		default = 0
	}
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = bool
	name = findObject
	shortDesc = Find object
	longDesc = Check whether an object is in the pool.
	param[] = {
		type = ManagedObject*
		name = searchObject
		desc = Managed object
	}
	return.value = true
	return.desc = \c true if the specified object is in the pool, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = bool
	name = addObject
	shortDesc = Add object
	longDesc = Add an object to the pool.\
\
\note This function will make sure that the object to be added to the pool is not yet managed explicitly by another object. In this case, the object will not be added and the function will return \c false. The pool will reference the object, but it will not alter the management flag for the object. Thus, objects may be added to several pools.
	param[] = {
		type = ManagedObject*
		name = newObject
		desc = Object to be added to the pool
	}
	return.value = true
	return.desc = \c true if this object will be managed by the pool after the call, \c false otherwise
}
function.public[] = {
	spec = virtual
	type = void
	name = removeObject
	shortDesc = Remove object
	longDesc = Remove an object from the pool.
	param[] = {
		type = ManagedObject*
		name = rmObject
		desc = Object to be removed from the pool
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Cleanup pool
	longDesc = Clean up the pool. All objects that are not in use by any object (besides the pool itself) are removed from the pool and deleted.
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear pool
	longDesc = Clear the pool. All objects in the pool will be unreferenced and removed from the pool. Objects will also be deleted if their reference count is zero.
}
function.public[] = {
	spec = virtual
	type = Ionflux::Tools::Reporter&
	name = getLog
	shortDesc = Get Console output/logging facility
	longDesc = The console output/logging facility used by this object.
	return.value = log
	return.desc = Console output/logging facility
}
