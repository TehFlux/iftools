# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# GlibMultiplexer.conf                Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2004
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives.
using = {
	'namespace std'
}

# Include files.
include = {
	'<string>'
	'<iostream>'
	'<sstream>'
	'<vector>'
	'<signal.h>'
	'<gtkmm/main.h>'
	'"ionflux/IOHandler.h"'
	'"ionflux/Reporter.h"'
	'"ionflux/IOMultiplexer.h"'
}

# Class definition.
class = {
	name = GlibMultiplexer
	shortDesc = Glib based IO event multiplexer
	title = Glib based IO event multiplexer
	longDesc =  A multiplexer for IO events. If a specified event is ready to be processed, the IO multiplexer notifies the associated IO handler. For example, an IOHandler may be called if a file descriptor is ready for reading.\
\
To register an event, you set a file descriptor and a mask of event types which the IO handler should be notified of. You then call IOMultiplexer::registerEvent() with a pointer to an IOHandler and the event object. To remove (unregister) an event, call IOMultiplexer::removeEvent() with the same handler and event object.\
\
\note The GlibMultiplexer uses Glib signals as its underlying IO multiplexing facility.
	base = public SigC::Object, public IOMultiplexer
	includeDir = ionflux
	group = {
		name = iomplx
		shortDesc = I/O Multiplexing
		longDesc = I/O multiplexing facilities.
	}
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = int
		name = initArgc
		desc = Argument count
	}
	param[] = {
		type = char**
		name = initArgv
		desc = Argument vector
	}
	param[] = {
		type = int
		name = initArgc
		desc = Argument count
	}
	param[] = {
		type = char**
		name = initArgv
		desc = Argument vector
	}
	param[] = {
		type = Gtk::Window*
		name = initMainWin
		desc = Application main window
	}
}

# Protected variables.
variable.protected[] = {
	spec = static
	type = sig_atomic_t
	name = shutdown
	desc = Shutdown flag
	value = 0
}
variable.protected[] = {
	type = Ionflux::Tools::Reporter
	name = log
	desc = Console output/logging
}
variable.protected[] = {
	type = std::vector<GlibIOEventInfo *>
	name = events
	desc = Vector of registered IO events
}
variable.protected[] = {
	type = std::vector<GlibIOEventInfo *>
	name = trash
	desc = Vector of IO events to be removed
}
variable.protected[] = {
	type = std::vector<GlibIOEventInfo *>
	name = newEvents
	desc = Vector of IO events to be added
}
variable.protected[] = {
	type = bool
	name = running
	desc = Main loop flag
}
variable.protected[] = {
	type = Gtk::Main*
	name = kit
	desc = Gtk Main object
}
variable.protected[] = {
	type = int
	name = argc
	desc = Argument count
}
variable.protected[] = {
	type = char**
	name = argv
	desc = Argument vector
}

# Class properties.
property.protected[] = {
	type = Gtk::Window*
	name = mainWindow
	setFromType = Gtk::Window*
	desc = Application main window
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = clearEvent
	shortDesc = Clear IO event
	longDesc = Removes an event from the vector of registered events.
	param[] = {
		type = GlibIOEventInfo*
		name = eventInfo
		desc = Event to be removed
	}
}

function.protected[] = {
	spec = virtual
	type = void
	name = clearEvents
	shortDesc = Clear IO events
	longDesc = Removes events flagged for removal from  from the vector of registered events.
}

function.protected[] = {
	spec = virtual
	type = void
	name = addEvent
	shortDesc = Add IO event
	longDesc = Adds an event to the vector of registered events.
	param[] = {
		type = GlibIOEventInfo*
		name = eventInfo
		desc = Event to be added
	}
}

function.protected[] = {
	spec = virtual
	type = void
	name = addEvents
	shortDesc = Add IO events
	longDesc = Adds events flagged for addition to the vector of registered events.
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = registerEvent
	shortDesc = Register IO event
	longDesc = Register an IO event to be handled by the multiplexer.
	param[] = {
		type = IOHandler*
		name = handler
		desc = IO handler to be notified if the event occurs
	}
	param[] = {
		type = IOEvent
		name = event
		desc = IO event
	}
}

function.public[] = {
	spec = virtual
	type = void
	name = removeEvent
	shortDesc = Remove IO event
	longDesc = Remove an IO event from the set of events handled by the multiplexer.
	param[] = {
		type = IOHandler*
		name = handler
		desc = IO handler for which the event has been registered
	}
	param[] = {
		type = IOEvent
		name = event
		desc = IO event
	}
}

function.public[] = {
	spec = virtual
	type = bool
	name = processEvent
	shortDesc = Process IO event
	longDesc = Processes the event referenced by the specified IO event record.\
\
\note This is used by GlibIOEventInfo to propagate event signals. You should not have to use this in any other way.
	param[] = {
		type = GlibIOEventInfo*
		name = eventInfo
		desc = IO event record
	}
	param[] = {
		type = Glib::IOCondition
		name = ioCond
		desc = IO condition
	}
	return.value = true
	return.desc = \c true on success, \c false otherwise
}

function.public[] = {
	spec = virtual
	type = void
	name = run
	shortDesc = Main loop
	longDesc = Start the main loop to watch for registered events.
}

function.public[] = {
	spec = virtual
	type = void
	name = quit
	shortDesc = Exit main loop
	longDesc = Call this function to exit from the main loop.
}

function.public[] = {
	spec = virtual
	type = bool
	name = isRunning
	shortDesc = Get running state
	return.value = running
	return.desc = \c true if the main loop is running, \c false otherwise
}

function.public[] = {
	spec = virtual
	type = void
	name = runHandler
	shortDesc = Run handler
	longDesc = Event handler for 'run' signals.
}

function.public[] = {
	spec = virtual
	type = bool
	name = quitHandler
	shortDesc = Quit handler
	longDesc = Event handler for 'quit' signals.
	return.value = true
	return.desc = \c true on success, \c false otherwise
}

function.public[] = {
	spec = static
	type = void
	name = shutdownHandler
	shortDesc = Shutdown handler
	longDesc = Signal handler for signals that will cause the main loop to exit.
	param[] = {
		type = int
		name = signum
		desc = Signal
	}
}

function.public[] = {
	spec = virtual
	type = Reporter&
	name = getLog
	shortDesc = Get Console output/logging facility
	longDesc = The console output/logging facility used by this object
	return.value = log
	return.desc = Console output/logging facility
}
