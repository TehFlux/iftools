# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoSurface.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include = {
	'"cairo.h"'
	'"ionflux/ManagedObject.hpp"'
}

# Class definition.
class = {
	name = Surface
	base = public Ionflux::Tools::ManagedObject
	shortDesc = Cairo surface
	title = Cairo surface
	longDesc = Base class for the Cairo vector graphics API surface types (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const Surface&
		name = initSurface
		desc = Cairo surface
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_surface_t*
		name = initSurface
		desc = Cairo surface
	}
}

# Protected variables.

# Public constants.

# Protected class properties.
property.protected[] = {
	type = cairo_surface_t*
	setFromType = cairo_surface_t*
	name = cairoSurface
	desc = Cairo surface
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = cairo_surface_t*
	name = createSimilar
	shortDesc = Surface similar
	longDesc = Surface similar
	param[] = {
		type = cairo_content_t
		name = content
		desc = Content
	}
	param[] = {
		type = int
		name = width
		desc = Width
	}
	param[] = {
		type = int
		name = height
		desc = Height
	}
	return.value = cairo_surface_create_similar(other, content, width, height)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = reference
	shortDesc = Surface
	longDesc = Surface
	impl = cairo_surface_reference(cairoSurface);
}
function.public[] = {
	spec = virtual
	type = void
	name = destroy
	shortDesc = Surface
	longDesc = Surface
	impl = cairo_surface_destroy(cairoSurface);
}
function.public[] = {
	spec = virtual
	type = void
	name = finish
	shortDesc = Surface
	longDesc = Surface
	impl = cairo_surface_finish(cairoSurface)
}
function.public[] = {
	spec = virtual
	type = void*
	name = getUserData
	shortDesc = Surface user data
	longDesc = Surface user data
	param[] = {
		type = const cairo_user_data_key_t*
		name = key
		desc = Key
	}
	return.value = cairo_surface_get_user_data(cairoSurface, key)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = cairo_status_t
	name = setUserData
	shortDesc = Surface user data
	longDesc = Surface user data
	param[] = {
		type = const cairo_user_data_key_t*
		name = key
		desc = Key
	}
	param[] = {
		type = void*
		name = user_data
		desc = User_data
	}
	param[] = {
		type = cairo_destroy_func_t
		name = destroy
		desc = Destroy
	}
	return.value = cairo_surface_set_user_data(cairoSurface, key, user_data, destroy)
	return.desc = 
}
function.public[] = {
	spec = virtual
	type = void
	name = setDeviceOffset
	shortDesc = Surface device offset
	longDesc = Surface device offset
	param[] = {
		type = double
		name = x_offset
		desc = X_offset
	}
	param[] = {
		type = double
		name = y_offset
		desc = Y_offset
	}
	impl = cairo_surface_set_device_offset(cairoSurface, x_offset, y_offset);
}
function.public[] = {
	spec = virtual
	type = Surface&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a surface to another surface.
	param[] = {
		type = const Surface&
		name = newCairoSurface
		desc = Cairo surface
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = Surface&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo surface to this surface object.
	param[] = {
		type = cairo_surface_t*
		name = newCairoSurface
		desc = Cairo surface
	}
	return.value = *this
	return.desc = The object itself
}
