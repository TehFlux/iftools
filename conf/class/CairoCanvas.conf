# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoCanvas.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools

# Using directives
using = {
	'namespace std'
	'namespace Ionflux::Tools::Cairo'
}

# Include files (header).
include.header = {
	'"ionflux/CairoContext.hpp"'
	'"ionflux/Canvas.hpp"'
}

# Include files (implementation).
include.impl = {
	'<pango/pangocairo.h>'
}

# Class definition.
class = {
	name = CairoCanvas
	base = public Ionflux::Tools::Cairo::CairoContext, public Canvas
	shortDesc = Cairo drawing canvas
	title = Cairo drawing canvas
	longDesc =  A canvas which uses Cairo for drawing operations.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const Ionflux::Tools::Cairo::CairoContext&
		name = initCairoContext
		desc = Cairo context
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_t*
		name = initCairoContext
		desc = Cairo context
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_surface_t*
		name = initSurface
		desc = Cairo surface
	}
}
constructor.public[] = {
	param[] = {
		type = Ionflux::Tools::Cairo::Surface&
		name = initSurface
		desc = Cairo surface
	}
}
constructor.public[] = {
	param[] = {
		type = const CairoCanvas&
		name = initCairoCanvas
		desc = Cairo canvas
	}
}

# Protected variables.

# Public constants.

# Protected class properties.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = setTransform
	shortDesc = Set transform
	longDesc = Set transform.
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = drawLine
	shortDesc = Draw line
	longDesc = Draw a line.
	param[] = {
		type = double
		name = x1
		desc = x1 coordinate
	}
	param[] = {
		type = double
		name = y1
		desc = y1 coordinate
	}
	param[] = {
		type = double
		name = x2
		desc = x2 coordinate
	}
	param[] = {
		type = double
		name = y2
		desc = y2 coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = color
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawRectangle
	shortDesc = Draw rectangle
	longDesc = Draw a rectangle.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawArc
	shortDesc = Draw arc
	longDesc = Draw an arc.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	param[] = {
		type = double
		name = angle1
		desc = Angle 1
	}
	param[] = {
		type = double
		name = angle2
		desc = Angle 2
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawArcEc
	shortDesc = Draw arc
	longDesc = Draw an arc with specified eccentricity.
	param[] = {
		type = double
		name = xc
		desc = x center
	}
	param[] = {
		type = double
		name = yc
		desc = y center
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = angle1
		desc = Angle 1
	}
	param[] = {
		type = double
		name = angle2
		desc = Angle 2
	}
	param[] = {
		type = double
		name = eccentricity
		desc = Eccentricity
		default = 0.0
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawEllipse
	shortDesc = Draw ellipse
	longDesc = Draw an ellipse.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = double
		name = width
		desc = Width
	}
	param[] = {
		type = double
		name = height
		desc = Height
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawEllipseEc
	shortDesc = Draw ellipse
	longDesc = Draw an ellipse.
	param[] = {
		type = double
		name = xc
		desc = x center
	}
	param[] = {
		type = double
		name = yc
		desc = y center
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = eccentricity
		desc = Eccentricity
		default = 0.0
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawCircle
	shortDesc = Draw circle
	longDesc = Draw a circle.
	param[] = {
		type = double
		name = xc
		desc = x center
	}
	param[] = {
		type = double
		name = yc
		desc = y center
	}
	param[] = {
		type = double
		name = radius
		desc = Radius
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = strokeColor
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = const Color*
		name = fillColor
		desc = Fill color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawCurve
	shortDesc = Draw curve
	longDesc = Draw a curve.
	param[] = {
		type = double
		name = x1
		desc = x1 coordinate
	}
	param[] = {
		type = double
		name = y1
		desc = y1 coordinate
	}
	param[] = {
		type = double
		name = x2
		desc = x2 coordinate
	}
	param[] = {
		type = double
		name = y2
		desc = y2 coordinate
	}
	param[] = {
		type = double
		name = x3
		desc = x3 coordinate
	}
	param[] = {
		type = double
		name = y3
		desc = y3 coordinate
	}
	param[] = {
		type = double
		name = strokeWidth
		desc = Stroke width
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = color
		desc = Stroke color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = drawText
	shortDesc = Draw text
	longDesc = Draw a text.
	param[] = {
		type = double
		name = x
		desc = x coordinate
	}
	param[] = {
		type = double
		name = y
		desc = y coordinate
	}
	param[] = {
		type = const std::string&
		name = text
		desc = Text
	}
	param[] = {
		type = const std::string&
		name = fontDesc
		desc = Font description
		default = ""
	}
	param[] = {
		type = double
		name = fontSize
		desc = Font size
		default = 0.0
	}
	param[] = {
		type = const Color*
		name = color
		desc = Color
		default = 0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = getTextSize
	shortDesc = Get text size
	longDesc = Get the size of the specified text.
	param[] = {
		type = const std::string&
		name = text
		desc = Text
	}
	param[] = {
		type = double&
		name = width
		desc = Where to store the text width
	}
	param[] = {
		type = double&
		name = height
		desc = Where to store the text height
	}
	param[] = {
		type = const std::string&
		name = fontDesc
		desc = Font description
		default = ""
	}
	param[] = {
		type = double
		name = fontSize
		desc = Font size
		default = 0.0
	}
	param[] = {
		type = Matrix3*
		name = transform
		desc = Transform matrix
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = CairoCanvas&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a Cairo context to a Cairo canvas.
	param[] = {
		type = const Ionflux::Tools::Cairo::CairoContext&
		name = newCairoContext
		desc = Cairo context
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = CairoCanvas&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a Cairo context to a Cairo canvas.
	param[] = {
		type = cairo_t*
		name = newCairoContext
		desc = Cairo context
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = CairoCanvas&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a Cairo canvas to another Cairo canvas.
	param[] = {
		type = const CairoCanvas&
		name = newCairoCanvas
		desc = Cairo canvas
	}
	return.value = *this
	return.desc = The object itself
}
