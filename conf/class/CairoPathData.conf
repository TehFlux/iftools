# ==========================================================================
# Ionflux Tools
# Copyright (c) 2004 Joern P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# CairoPath.conf                    Class definition file.
# ==========================================================================
# 
# This file is part of Ionflux Tools.
# 
# Ionflux Tools is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at  your option)
# any later version.
# 
# Ionflux Tools is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Tools; if not, write to the Free Software Foundation, 
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# General options.
project = {
	name = Ionflux Tools
	author = Joern P. Meier
	mail = mail@ionflux.org
}
copyrightYear = 2005
includeGuardPrefix = IONFLUX_TOOLS_CAIRO_

# Enclosing namespaces.
namespace[].name = Ionflux
namespace[].name = Tools
namespace[].name = Cairo

# Using directives
using = {
	'namespace std'
}

# Include files.
include.header = {
	'"cairo.h"'
	'"ionflux/CairoMatrix.hpp"'
	'"ionflux/ManagedObject.hpp"'
}

# Forward declarations.

# Class definition.
class = {
	name = PathData
	base = public Ionflux::Tools::ManagedObject
	shortDesc = Cairo path data
	title = Cairo path data
	longDesc = Data element of a path in the Cairo vector graphics API (see http://www.cairographics.org/).\
\
\note Not all features of Cairo are supported yet by this wrapper.
	includeDir = ionflux
	group.name = cairo
}

# Public constructors.
constructor.public[] = {
	param[] = {
		type = const PathData&
		name = initPathData
		desc = Cairo path data
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_path_data_t*
		name = initPathData
		desc = Cairo path data
	}
	param[] = {
		type = bool
		name = initManagePathData
		desc = Cairo path data management flag
		default = false
	}
}
constructor.public[] = {
	param[] = {
		type = cairo_path_data_type_t
		name = initPathDataType
		desc = Cairo path data type
	}
}

# Protected variables.
variable.protected[] = {
	type = cairo_path_data_t*
	name = cairoPathData
	desc = Cairo path data
}

# Public constants.

# Protected class properties.
property.protected[] = {
	type = bool
	setFromType = bool
	name = managePathData
	desc = Cairo path data management flag
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = cairo_path_data_type_t
	name = getType
	shortDesc = Get type
	longDesc = Get the type of this path element.
	return.value = 0
	return.desc = Path data type
}
function.public[] = {
	spec = virtual
	type = void
	name = setType
	shortDesc = Set type
	longDesc = Set the type of this path element.
	param[] = {
		type = cairo_path_data_type_t
		name = newType
		desc = Path data type
	}
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumPoints
	shortDesc = Get number of points
	longDesc = Get the number of points for this path element.
	return.value = 0
	return.desc = Number of points
}
function.public[] = {
	spec = virtual
	type = Point
	name = getPoint
	shortDesc = Get point
	longDesc = Get the point with the specified index.
	param[] = {
		type = unsigned int
		name = pointIndex
		desc = Point index
		default = 0
	}
	return.value = Point()
	return.desc = Point
}
function.public[] = {
	spec = virtual
	type = void
	name = setPoint
	shortDesc = Set point
	longDesc = Set the point with the specified index.
	param[] = {
		type = const Point&
		name = source
		desc = Point
	}
	param[] = {
		type = unsigned int
		name = pointIndex
		desc = Point index
		default = 0
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setCairoPathData
	shortDesc = Set cairo path data
	longDesc = Set the cairo path data.
	param[] = {
		type = cairo_path_data_t*
		name = newCairoPathData
		desc = Cairo Path data
	}
	param[] = {
		type = bool
		name = newManagePathData
		desc = Cairo Path data management flag
		default = false
	}
}
function.public[] = {
	spec = virtual
	type = cairo_path_data_t*
	name = getCairoPathData
	const = true
	shortDesc = Get cairo path data
	longDesc = Get the cairo path data.
	return.value = cairoPathData
	return.desc = Cairo path data
}
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a path data to another path data.
	param[] = {
		type = const PathData&
		name = newCairoPathData
		desc = Cairo path data
	}
	return.value = *this
	return.desc = The object itself
}
function.public[] = {
	spec = virtual
	type = PathData&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a cairo path to this path object.\
\
\note By default, the cairo path data will not be managed by this object.
	param[] = {
		type = cairo_path_data_t*
		name = newCairoPathData
		desc = Cairo path data
	}
	return.value = *this
	return.desc = The object itself
}
